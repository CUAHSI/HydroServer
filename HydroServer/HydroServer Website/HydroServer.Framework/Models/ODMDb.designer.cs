#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4062
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HydroServer.Framework.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="LittleBearRiverODM")]
	public partial class ODMDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDataValue(DataValue instance);
    partial void UpdateDataValue(DataValue instance);
    partial void DeleteDataValue(DataValue instance);
    partial void InsertSource(Source instance);
    partial void UpdateSource(Source instance);
    partial void DeleteSource(Source instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    partial void InsertTimeSeries(TimeSeries instance);
    partial void UpdateTimeSeries(TimeSeries instance);
    partial void DeleteTimeSeries(TimeSeries instance);
    partial void InsertMethod(Method instance);
    partial void UpdateMethod(Method instance);
    partial void DeleteMethod(Method instance);
    partial void InsertQualityControlLevel(QualityControlLevel instance);
    partial void UpdateQualityControlLevel(QualityControlLevel instance);
    partial void DeleteQualityControlLevel(QualityControlLevel instance);
    partial void InsertVariable(Variable instance);
    partial void UpdateVariable(Variable instance);
    partial void DeleteVariable(Variable instance);
    partial void InsertSample(Sample instance);
    partial void UpdateSample(Sample instance);
    partial void DeleteSample(Sample instance);
    partial void InsertQualifier(Qualifier instance);
    partial void UpdateQualifier(Qualifier instance);
    partial void DeleteQualifier(Qualifier instance);
    partial void InsertSite(Site instance);
    partial void UpdateSite(Site instance);
    partial void DeleteSite(Site instance);
    #endregion
		
		public ODMDbDataContext() :
        base(global::System.Configuration.ConfigurationManager.AppSettings["OdmDbConnection"], mappingSource)
		{
			OnCreated();
		}
		
		public ODMDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ODMDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ODMDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ODMDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DataValue> DataValues
		{
			get
			{
				return this.GetTable<DataValue>();
			}
		}
		
		public System.Data.Linq.Table<Source> Sources
		{
			get
			{
				return this.GetTable<Source>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Units
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
		
		public System.Data.Linq.Table<TimeSeries> TimeSeries
		{
			get
			{
				return this.GetTable<TimeSeries>();
			}
		}
		
		public System.Data.Linq.Table<Method> Methods
		{
			get
			{
				return this.GetTable<Method>();
			}
		}
		
		public System.Data.Linq.Table<QualityControlLevel> QualityControlLevels
		{
			get
			{
				return this.GetTable<QualityControlLevel>();
			}
		}
		
		public System.Data.Linq.Table<Variable> Variables
		{
			get
			{
				return this.GetTable<Variable>();
			}
		}
		
		public System.Data.Linq.Table<Sample> Samples
		{
			get
			{
				return this.GetTable<Sample>();
			}
		}
		
		public System.Data.Linq.Table<Qualifier> Qualifiers
		{
			get
			{
				return this.GetTable<Qualifier>();
			}
		}
		
		public System.Data.Linq.Table<DerivedFrom> DerivedFroms
		{
			get
			{
				return this.GetTable<DerivedFrom>();
			}
		}
		
		public System.Data.Linq.Table<Site> Sites
		{
			get
			{
				return this.GetTable<Site>();
			}
		}
	}
	
	[Table(Name="dbo.DataValues")]
	public partial class DataValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ValueID;
		
		private double _DataValue1;
		
		private System.Nullable<double> _ValueAccuracy;
		
		private System.DateTime _LocalDateTime;
		
		private double _UTCOffset;
		
		private System.DateTime _DateTimeUTC;
		
		private int _SiteID;
		
		private int _VariableID;
		
		private System.Nullable<double> _OffsetValue;
		
		private System.Nullable<int> _OffsetTypeID;
		
		private string _CensorCode;
		
		private System.Nullable<int> _QualifierID;
		
		private int _MethodID;
		
		private int _SourceID;
		
		private System.Nullable<int> _SampleID;
		
		private System.Nullable<int> _DerivedFromID;
		
		private int _QualityControlLevelID;
		
		private EntityRef<Source> _Source;
		
		private EntityRef<Method> _Method;
		
		private EntityRef<QualityControlLevel> _QualityControlLevel;
		
		private EntityRef<Variable> _Variable;
		
		private EntityRef<Sample> _Sample;
		
		private EntityRef<Qualifier> _Qualifier;
		
		private EntityRef<Site> _Site;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnValueIDChanging(int value);
    partial void OnValueIDChanged();
    partial void OnDataValue1Changing(double value);
    partial void OnDataValue1Changed();
    partial void OnValueAccuracyChanging(System.Nullable<double> value);
    partial void OnValueAccuracyChanged();
    partial void OnLocalDateTimeChanging(System.DateTime value);
    partial void OnLocalDateTimeChanged();
    partial void OnUTCOffsetChanging(double value);
    partial void OnUTCOffsetChanged();
    partial void OnDateTimeUTCChanging(System.DateTime value);
    partial void OnDateTimeUTCChanged();
    partial void OnSiteIDChanging(int value);
    partial void OnSiteIDChanged();
    partial void OnVariableIDChanging(int value);
    partial void OnVariableIDChanged();
    partial void OnOffsetValueChanging(System.Nullable<double> value);
    partial void OnOffsetValueChanged();
    partial void OnOffsetTypeIDChanging(System.Nullable<int> value);
    partial void OnOffsetTypeIDChanged();
    partial void OnCensorCodeChanging(string value);
    partial void OnCensorCodeChanged();
    partial void OnQualifierIDChanging(System.Nullable<int> value);
    partial void OnQualifierIDChanged();
    partial void OnMethodIDChanging(int value);
    partial void OnMethodIDChanged();
    partial void OnSourceIDChanging(int value);
    partial void OnSourceIDChanged();
    partial void OnSampleIDChanging(System.Nullable<int> value);
    partial void OnSampleIDChanged();
    partial void OnDerivedFromIDChanging(System.Nullable<int> value);
    partial void OnDerivedFromIDChanged();
    partial void OnQualityControlLevelIDChanging(int value);
    partial void OnQualityControlLevelIDChanged();
    #endregion
		
		public DataValue()
		{
			this._Source = default(EntityRef<Source>);
			this._Method = default(EntityRef<Method>);
			this._QualityControlLevel = default(EntityRef<QualityControlLevel>);
			this._Variable = default(EntityRef<Variable>);
			this._Sample = default(EntityRef<Sample>);
			this._Qualifier = default(EntityRef<Qualifier>);
			this._Site = default(EntityRef<Site>);
			OnCreated();
		}
		
		[Column(Storage="_ValueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ValueID
		{
			get
			{
				return this._ValueID;
			}
			set
			{
				if ((this._ValueID != value))
				{
					this.OnValueIDChanging(value);
					this.SendPropertyChanging();
					this._ValueID = value;
					this.SendPropertyChanged("ValueID");
					this.OnValueIDChanged();
				}
			}
		}
		
		[Column(Name="DataValue", Storage="_DataValue1", DbType="Float NOT NULL")]
		public double DataValue1
		{
			get
			{
				return this._DataValue1;
			}
			set
			{
				if ((this._DataValue1 != value))
				{
					this.OnDataValue1Changing(value);
					this.SendPropertyChanging();
					this._DataValue1 = value;
					this.SendPropertyChanged("DataValue1");
					this.OnDataValue1Changed();
				}
			}
		}
		
		[Column(Storage="_ValueAccuracy", DbType="Float")]
		public System.Nullable<double> ValueAccuracy
		{
			get
			{
				return this._ValueAccuracy;
			}
			set
			{
				if ((this._ValueAccuracy != value))
				{
					this.OnValueAccuracyChanging(value);
					this.SendPropertyChanging();
					this._ValueAccuracy = value;
					this.SendPropertyChanged("ValueAccuracy");
					this.OnValueAccuracyChanged();
				}
			}
		}
		
		[Column(Storage="_LocalDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LocalDateTime
		{
			get
			{
				return this._LocalDateTime;
			}
			set
			{
				if ((this._LocalDateTime != value))
				{
					this.OnLocalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LocalDateTime = value;
					this.SendPropertyChanged("LocalDateTime");
					this.OnLocalDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_UTCOffset", DbType="Float NOT NULL")]
		public double UTCOffset
		{
			get
			{
				return this._UTCOffset;
			}
			set
			{
				if ((this._UTCOffset != value))
				{
					this.OnUTCOffsetChanging(value);
					this.SendPropertyChanging();
					this._UTCOffset = value;
					this.SendPropertyChanged("UTCOffset");
					this.OnUTCOffsetChanged();
				}
			}
		}
		
		[Column(Storage="_DateTimeUTC", DbType="DateTime NOT NULL")]
		public System.DateTime DateTimeUTC
		{
			get
			{
				return this._DateTimeUTC;
			}
			set
			{
				if ((this._DateTimeUTC != value))
				{
					this.OnDateTimeUTCChanging(value);
					this.SendPropertyChanging();
					this._DateTimeUTC = value;
					this.SendPropertyChanged("DateTimeUTC");
					this.OnDateTimeUTCChanged();
				}
			}
		}
		
		[Column(Storage="_SiteID", DbType="Int NOT NULL")]
		public int SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					if (this._Site.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Column(Storage="_VariableID", DbType="Int NOT NULL")]
		public int VariableID
		{
			get
			{
				return this._VariableID;
			}
			set
			{
				if ((this._VariableID != value))
				{
					if (this._Variable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariableIDChanging(value);
					this.SendPropertyChanging();
					this._VariableID = value;
					this.SendPropertyChanged("VariableID");
					this.OnVariableIDChanged();
				}
			}
		}
		
		[Column(Storage="_OffsetValue", DbType="Float")]
		public System.Nullable<double> OffsetValue
		{
			get
			{
				return this._OffsetValue;
			}
			set
			{
				if ((this._OffsetValue != value))
				{
					this.OnOffsetValueChanging(value);
					this.SendPropertyChanging();
					this._OffsetValue = value;
					this.SendPropertyChanged("OffsetValue");
					this.OnOffsetValueChanged();
				}
			}
		}
		
		[Column(Storage="_OffsetTypeID", DbType="Int")]
		public System.Nullable<int> OffsetTypeID
		{
			get
			{
				return this._OffsetTypeID;
			}
			set
			{
				if ((this._OffsetTypeID != value))
				{
					this.OnOffsetTypeIDChanging(value);
					this.SendPropertyChanging();
					this._OffsetTypeID = value;
					this.SendPropertyChanged("OffsetTypeID");
					this.OnOffsetTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CensorCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CensorCode
		{
			get
			{
				return this._CensorCode;
			}
			set
			{
				if ((this._CensorCode != value))
				{
					this.OnCensorCodeChanging(value);
					this.SendPropertyChanging();
					this._CensorCode = value;
					this.SendPropertyChanged("CensorCode");
					this.OnCensorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_QualifierID", DbType="Int")]
		public System.Nullable<int> QualifierID
		{
			get
			{
				return this._QualifierID;
			}
			set
			{
				if ((this._QualifierID != value))
				{
					if (this._Qualifier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualifierIDChanging(value);
					this.SendPropertyChanging();
					this._QualifierID = value;
					this.SendPropertyChanged("QualifierID");
					this.OnQualifierIDChanged();
				}
			}
		}
		
		[Column(Storage="_MethodID", DbType="Int NOT NULL")]
		public int MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					if (this._Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourceID", DbType="Int NOT NULL")]
		public int SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					if (this._Source.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_SampleID", DbType="Int")]
		public System.Nullable<int> SampleID
		{
			get
			{
				return this._SampleID;
			}
			set
			{
				if ((this._SampleID != value))
				{
					if (this._Sample.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSampleIDChanging(value);
					this.SendPropertyChanging();
					this._SampleID = value;
					this.SendPropertyChanged("SampleID");
					this.OnSampleIDChanged();
				}
			}
		}
		
		[Column(Storage="_DerivedFromID", DbType="Int")]
		public System.Nullable<int> DerivedFromID
		{
			get
			{
				return this._DerivedFromID;
			}
			set
			{
				if ((this._DerivedFromID != value))
				{
					this.OnDerivedFromIDChanging(value);
					this.SendPropertyChanging();
					this._DerivedFromID = value;
					this.SendPropertyChanged("DerivedFromID");
					this.OnDerivedFromIDChanged();
				}
			}
		}
		
		[Column(Storage="_QualityControlLevelID", DbType="Int NOT NULL")]
		public int QualityControlLevelID
		{
			get
			{
				return this._QualityControlLevelID;
			}
			set
			{
				if ((this._QualityControlLevelID != value))
				{
					if (this._QualityControlLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualityControlLevelIDChanging(value);
					this.SendPropertyChanging();
					this._QualityControlLevelID = value;
					this.SendPropertyChanged("QualityControlLevelID");
					this.OnQualityControlLevelIDChanged();
				}
			}
		}
		
		[Association(Name="Source_DataValue", Storage="_Source", ThisKey="SourceID", OtherKey="SourceID", IsForeignKey=true)]
		public Source Source
		{
			get
			{
				return this._Source.Entity;
			}
			set
			{
				Source previousValue = this._Source.Entity;
				if (((previousValue != value) 
							|| (this._Source.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Source.Entity = null;
						previousValue.DataValues.Remove(this);
					}
					this._Source.Entity = value;
					if ((value != null))
					{
						value.DataValues.Add(this);
						this._SourceID = value.SourceID;
					}
					else
					{
						this._SourceID = default(int);
					}
					this.SendPropertyChanged("Source");
				}
			}
		}
		
		[Association(Name="Method_DataValue", Storage="_Method", ThisKey="MethodID", OtherKey="MethodID", IsForeignKey=true)]
		public Method Method
		{
			get
			{
				return this._Method.Entity;
			}
			set
			{
				Method previousValue = this._Method.Entity;
				if (((previousValue != value) 
							|| (this._Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Method.Entity = null;
						previousValue.DataValues.Remove(this);
					}
					this._Method.Entity = value;
					if ((value != null))
					{
						value.DataValues.Add(this);
						this._MethodID = value.MethodID;
					}
					else
					{
						this._MethodID = default(int);
					}
					this.SendPropertyChanged("Method");
				}
			}
		}
		
		[Association(Name="QualityControlLevel_DataValue", Storage="_QualityControlLevel", ThisKey="QualityControlLevelID", OtherKey="QualityControlLevelID", IsForeignKey=true)]
		public QualityControlLevel QualityControlLevel
		{
			get
			{
				return this._QualityControlLevel.Entity;
			}
			set
			{
				QualityControlLevel previousValue = this._QualityControlLevel.Entity;
				if (((previousValue != value) 
							|| (this._QualityControlLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualityControlLevel.Entity = null;
						previousValue.DataValues.Remove(this);
					}
					this._QualityControlLevel.Entity = value;
					if ((value != null))
					{
						value.DataValues.Add(this);
						this._QualityControlLevelID = value.QualityControlLevelID;
					}
					else
					{
						this._QualityControlLevelID = default(int);
					}
					this.SendPropertyChanged("QualityControlLevel");
				}
			}
		}
		
		[Association(Name="Variable_DataValue", Storage="_Variable", ThisKey="VariableID", OtherKey="VariableID", IsForeignKey=true)]
		public Variable Variable
		{
			get
			{
				return this._Variable.Entity;
			}
			set
			{
				Variable previousValue = this._Variable.Entity;
				if (((previousValue != value) 
							|| (this._Variable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Variable.Entity = null;
						previousValue.DataValues.Remove(this);
					}
					this._Variable.Entity = value;
					if ((value != null))
					{
						value.DataValues.Add(this);
						this._VariableID = value.VariableID;
					}
					else
					{
						this._VariableID = default(int);
					}
					this.SendPropertyChanged("Variable");
				}
			}
		}
		
		[Association(Name="Sample_DataValue", Storage="_Sample", ThisKey="SampleID", OtherKey="SampleID", IsForeignKey=true)]
		public Sample Sample
		{
			get
			{
				return this._Sample.Entity;
			}
			set
			{
				Sample previousValue = this._Sample.Entity;
				if (((previousValue != value) 
							|| (this._Sample.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sample.Entity = null;
						previousValue.DataValues.Remove(this);
					}
					this._Sample.Entity = value;
					if ((value != null))
					{
						value.DataValues.Add(this);
						this._SampleID = value.SampleID;
					}
					else
					{
						this._SampleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sample");
				}
			}
		}
		
		[Association(Name="Qualifier_DataValue", Storage="_Qualifier", ThisKey="QualifierID", OtherKey="QualifierID", IsForeignKey=true)]
		public Qualifier Qualifier
		{
			get
			{
				return this._Qualifier.Entity;
			}
			set
			{
				Qualifier previousValue = this._Qualifier.Entity;
				if (((previousValue != value) 
							|| (this._Qualifier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Qualifier.Entity = null;
						previousValue.DataValues.Remove(this);
					}
					this._Qualifier.Entity = value;
					if ((value != null))
					{
						value.DataValues.Add(this);
						this._QualifierID = value.QualifierID;
					}
					else
					{
						this._QualifierID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Qualifier");
				}
			}
		}
		
		[Association(Name="Site_DataValue", Storage="_Site", ThisKey="SiteID", OtherKey="SiteID", IsForeignKey=true)]
		public Site Site
		{
			get
			{
				return this._Site.Entity;
			}
			set
			{
				Site previousValue = this._Site.Entity;
				if (((previousValue != value) 
							|| (this._Site.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Site.Entity = null;
						previousValue.DataValues.Remove(this);
					}
					this._Site.Entity = value;
					if ((value != null))
					{
						value.DataValues.Add(this);
						this._SiteID = value.SiteID;
					}
					else
					{
						this._SiteID = default(int);
					}
					this.SendPropertyChanged("Site");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sources")]
	public partial class Source : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SourceID;
		
		private string _Organization;
		
		private string _SourceDescription;
		
		private string _SourceLink;
		
		private string _ContactName;
		
		private string _Phone;
		
		private string _Email;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _ZipCode;
		
		private int _MetadataID;
		
		private EntitySet<DataValue> _DataValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSourceIDChanging(int value);
    partial void OnSourceIDChanged();
    partial void OnOrganizationChanging(string value);
    partial void OnOrganizationChanged();
    partial void OnSourceDescriptionChanging(string value);
    partial void OnSourceDescriptionChanged();
    partial void OnSourceLinkChanging(string value);
    partial void OnSourceLinkChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnMetadataIDChanging(int value);
    partial void OnMetadataIDChanged();
    #endregion
		
		public Source()
		{
			this._DataValues = new EntitySet<DataValue>(new Action<DataValue>(this.attach_DataValues), new Action<DataValue>(this.detach_DataValues));
			OnCreated();
		}
		
		[Column(Storage="_SourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Organization", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				if ((this._Organization != value))
				{
					this.OnOrganizationChanging(value);
					this.SendPropertyChanging();
					this._Organization = value;
					this.SendPropertyChanged("Organization");
					this.OnOrganizationChanged();
				}
			}
		}
		
		[Column(Storage="_SourceDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SourceDescription
		{
			get
			{
				return this._SourceDescription;
			}
			set
			{
				if ((this._SourceDescription != value))
				{
					this.OnSourceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SourceDescription = value;
					this.SendPropertyChanged("SourceDescription");
					this.OnSourceDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_SourceLink", DbType="NVarChar(500)")]
		public string SourceLink
		{
			get
			{
				return this._SourceLink;
			}
			set
			{
				if ((this._SourceLink != value))
				{
					this.OnSourceLinkChanging(value);
					this.SendPropertyChanging();
					this._SourceLink = value;
					this.SendPropertyChanged("SourceLink");
					this.OnSourceLinkChanged();
				}
			}
		}
		
		[Column(Storage="_ContactName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_ZipCode", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MetadataID", DbType="Int NOT NULL")]
		public int MetadataID
		{
			get
			{
				return this._MetadataID;
			}
			set
			{
				if ((this._MetadataID != value))
				{
					this.OnMetadataIDChanging(value);
					this.SendPropertyChanging();
					this._MetadataID = value;
					this.SendPropertyChanged("MetadataID");
					this.OnMetadataIDChanged();
				}
			}
		}
		
		[Association(Name="Source_DataValue", Storage="_DataValues", ThisKey="SourceID", OtherKey="SourceID")]
		public EntitySet<DataValue> DataValues
		{
			get
			{
				return this._DataValues;
			}
			set
			{
				this._DataValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Source = this;
		}
		
		private void detach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Source = null;
		}
	}
	
	[Table(Name="dbo.Units")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UnitsID;
		
		private string _UnitsName;
		
		private string _UnitsType;
		
		private string _UnitsAbbreviation;
		
		private EntitySet<Variable> _Variables;
		
		private EntitySet<Variable> _Variables1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitsIDChanging(int value);
    partial void OnUnitsIDChanged();
    partial void OnUnitsNameChanging(string value);
    partial void OnUnitsNameChanged();
    partial void OnUnitsTypeChanging(string value);
    partial void OnUnitsTypeChanged();
    partial void OnUnitsAbbreviationChanging(string value);
    partial void OnUnitsAbbreviationChanged();
    #endregion
		
		public Unit()
		{
			this._Variables = new EntitySet<Variable>(new Action<Variable>(this.attach_Variables), new Action<Variable>(this.detach_Variables));
			this._Variables1 = new EntitySet<Variable>(new Action<Variable>(this.attach_Variables1), new Action<Variable>(this.detach_Variables1));
			OnCreated();
		}
		
		[Column(Storage="_UnitsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UnitsID
		{
			get
			{
				return this._UnitsID;
			}
			set
			{
				if ((this._UnitsID != value))
				{
					this.OnUnitsIDChanging(value);
					this.SendPropertyChanging();
					this._UnitsID = value;
					this.SendPropertyChanged("UnitsID");
					this.OnUnitsIDChanged();
				}
			}
		}
		
		[Column(Storage="_UnitsName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UnitsName
		{
			get
			{
				return this._UnitsName;
			}
			set
			{
				if ((this._UnitsName != value))
				{
					this.OnUnitsNameChanging(value);
					this.SendPropertyChanging();
					this._UnitsName = value;
					this.SendPropertyChanged("UnitsName");
					this.OnUnitsNameChanged();
				}
			}
		}
		
		[Column(Storage="_UnitsType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UnitsType
		{
			get
			{
				return this._UnitsType;
			}
			set
			{
				if ((this._UnitsType != value))
				{
					this.OnUnitsTypeChanging(value);
					this.SendPropertyChanging();
					this._UnitsType = value;
					this.SendPropertyChanged("UnitsType");
					this.OnUnitsTypeChanged();
				}
			}
		}
		
		[Column(Storage="_UnitsAbbreviation", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UnitsAbbreviation
		{
			get
			{
				return this._UnitsAbbreviation;
			}
			set
			{
				if ((this._UnitsAbbreviation != value))
				{
					this.OnUnitsAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._UnitsAbbreviation = value;
					this.SendPropertyChanged("UnitsAbbreviation");
					this.OnUnitsAbbreviationChanged();
				}
			}
		}
		
		[Association(Name="Unit_Variable", Storage="_Variables", ThisKey="UnitsID", OtherKey="VariableUnitsID")]
		public EntitySet<Variable> Variables
		{
			get
			{
				return this._Variables;
			}
			set
			{
				this._Variables.Assign(value);
			}
		}
		
		[Association(Name="Unit_Variable1", Storage="_Variables1", ThisKey="UnitsID", OtherKey="TimeUnitsID")]
		public EntitySet<Variable> Variables1
		{
			get
			{
				return this._Variables1;
			}
			set
			{
				this._Variables1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Variables(Variable entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_Variables(Variable entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
		
		private void attach_Variables1(Variable entity)
		{
			this.SendPropertyChanging();
			entity.Unit1 = this;
		}
		
		private void detach_Variables1(Variable entity)
		{
			this.SendPropertyChanging();
			entity.Unit1 = null;
		}
	}
	
	[Table(Name="dbo.SeriesCatalog")]
	public partial class TimeSeries : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeriesID;
		
		private System.Nullable<int> _SiteID;
		
		private System.Nullable<int> _VariableID;
		
		private System.Nullable<int> _VariableUnitsID;
		
		private System.Nullable<int> _TimeUnitsID;
		
		private System.Nullable<int> _SourceID;
		
		private System.Nullable<int> _QualityControlLevelID;
		
		private System.Nullable<System.DateTime> _BeginDateTime;
		
		private System.Nullable<System.DateTime> _EndDateTime;
		
		private System.Nullable<System.DateTime> _BeginDateTimeUTC;
		
		private System.Nullable<System.DateTime> _EndDateTimeUTC;
		
		private System.Nullable<int> _ValueCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeriesIDChanging(int value);
    partial void OnSeriesIDChanged();
    partial void OnSiteIDChanging(System.Nullable<int> value);
    partial void OnSiteIDChanged();
    partial void OnVariableIDChanging(System.Nullable<int> value);
    partial void OnVariableIDChanged();
    partial void OnVariableUnitsIDChanging(System.Nullable<int> value);
    partial void OnVariableUnitsIDChanged();
    partial void OnTimeUnitsIDChanging(System.Nullable<int> value);
    partial void OnTimeUnitsIDChanged();
    partial void OnSourceIDChanging(System.Nullable<int> value);
    partial void OnSourceIDChanged();
    partial void OnQualityControlLevelIDChanging(System.Nullable<int> value);
    partial void OnQualityControlLevelIDChanged();
    partial void OnBeginDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateTimeChanged();
    partial void OnEndDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateTimeChanged();
    partial void OnBeginDateTimeUTCChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateTimeUTCChanged();
    partial void OnEndDateTimeUTCChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateTimeUTCChanged();
    partial void OnValueCountChanging(System.Nullable<int> value);
    partial void OnValueCountChanged();
    #endregion
		
		public TimeSeries()
		{
			OnCreated();
		}
		
		[Column(Storage="_SeriesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeriesID
		{
			get
			{
				return this._SeriesID;
			}
			set
			{
				if ((this._SeriesID != value))
				{
					this.OnSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._SeriesID = value;
					this.SendPropertyChanged("SeriesID");
					this.OnSeriesIDChanged();
				}
			}
		}
		
		[Column(Storage="_SiteID", DbType="Int")]
		public System.Nullable<int> SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Column(Storage="_VariableID", DbType="Int")]
		public System.Nullable<int> VariableID
		{
			get
			{
				return this._VariableID;
			}
			set
			{
				if ((this._VariableID != value))
				{
					this.OnVariableIDChanging(value);
					this.SendPropertyChanging();
					this._VariableID = value;
					this.SendPropertyChanged("VariableID");
					this.OnVariableIDChanged();
				}
			}
		}
		
		[Column(Storage="_VariableUnitsID", DbType="Int")]
		public System.Nullable<int> VariableUnitsID
		{
			get
			{
				return this._VariableUnitsID;
			}
			set
			{
				if ((this._VariableUnitsID != value))
				{
					this.OnVariableUnitsIDChanging(value);
					this.SendPropertyChanging();
					this._VariableUnitsID = value;
					this.SendPropertyChanged("VariableUnitsID");
					this.OnVariableUnitsIDChanged();
				}
			}
		}
		
		[Column(Storage="_TimeUnitsID", DbType="Int")]
		public System.Nullable<int> TimeUnitsID
		{
			get
			{
				return this._TimeUnitsID;
			}
			set
			{
				if ((this._TimeUnitsID != value))
				{
					this.OnTimeUnitsIDChanging(value);
					this.SendPropertyChanging();
					this._TimeUnitsID = value;
					this.SendPropertyChanged("TimeUnitsID");
					this.OnTimeUnitsIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourceID", DbType="Int")]
		public System.Nullable<int> SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_QualityControlLevelID", DbType="Int")]
		public System.Nullable<int> QualityControlLevelID
		{
			get
			{
				return this._QualityControlLevelID;
			}
			set
			{
				if ((this._QualityControlLevelID != value))
				{
					this.OnQualityControlLevelIDChanging(value);
					this.SendPropertyChanging();
					this._QualityControlLevelID = value;
					this.SendPropertyChanged("QualityControlLevelID");
					this.OnQualityControlLevelIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDateTime
		{
			get
			{
				return this._BeginDateTime;
			}
			set
			{
				if ((this._BeginDateTime != value))
				{
					this.OnBeginDateTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginDateTime = value;
					this.SendPropertyChanged("BeginDateTime");
					this.OnBeginDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDateTime
		{
			get
			{
				return this._EndDateTime;
			}
			set
			{
				if ((this._EndDateTime != value))
				{
					this.OnEndDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EndDateTime = value;
					this.SendPropertyChanged("EndDateTime");
					this.OnEndDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDateTimeUTC", DbType="DateTime")]
		public System.Nullable<System.DateTime> BeginDateTimeUTC
		{
			get
			{
				return this._BeginDateTimeUTC;
			}
			set
			{
				if ((this._BeginDateTimeUTC != value))
				{
					this.OnBeginDateTimeUTCChanging(value);
					this.SendPropertyChanging();
					this._BeginDateTimeUTC = value;
					this.SendPropertyChanged("BeginDateTimeUTC");
					this.OnBeginDateTimeUTCChanged();
				}
			}
		}
		
		[Column(Storage="_EndDateTimeUTC", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDateTimeUTC
		{
			get
			{
				return this._EndDateTimeUTC;
			}
			set
			{
				if ((this._EndDateTimeUTC != value))
				{
					this.OnEndDateTimeUTCChanging(value);
					this.SendPropertyChanging();
					this._EndDateTimeUTC = value;
					this.SendPropertyChanged("EndDateTimeUTC");
					this.OnEndDateTimeUTCChanged();
				}
			}
		}
		
		[Column(Storage="_ValueCount", DbType="Int")]
		public System.Nullable<int> ValueCount
		{
			get
			{
				return this._ValueCount;
			}
			set
			{
				if ((this._ValueCount != value))
				{
					this.OnValueCountChanging(value);
					this.SendPropertyChanging();
					this._ValueCount = value;
					this.SendPropertyChanged("ValueCount");
					this.OnValueCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Methods")]
	public partial class Method : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MethodID;
		
		private string _MethodDescription;
		
		private string _MethodLink;
		
		private EntitySet<DataValue> _DataValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMethodIDChanging(int value);
    partial void OnMethodIDChanged();
    partial void OnMethodDescriptionChanging(string value);
    partial void OnMethodDescriptionChanged();
    partial void OnMethodLinkChanging(string value);
    partial void OnMethodLinkChanged();
    #endregion
		
		public Method()
		{
			this._DataValues = new EntitySet<DataValue>(new Action<DataValue>(this.attach_DataValues), new Action<DataValue>(this.detach_DataValues));
			OnCreated();
		}
		
		[Column(Storage="_MethodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_MethodDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MethodDescription
		{
			get
			{
				return this._MethodDescription;
			}
			set
			{
				if ((this._MethodDescription != value))
				{
					this.OnMethodDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MethodDescription = value;
					this.SendPropertyChanged("MethodDescription");
					this.OnMethodDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MethodLink", DbType="NVarChar(500)")]
		public string MethodLink
		{
			get
			{
				return this._MethodLink;
			}
			set
			{
				if ((this._MethodLink != value))
				{
					this.OnMethodLinkChanging(value);
					this.SendPropertyChanging();
					this._MethodLink = value;
					this.SendPropertyChanged("MethodLink");
					this.OnMethodLinkChanged();
				}
			}
		}
		
		[Association(Name="Method_DataValue", Storage="_DataValues", ThisKey="MethodID", OtherKey="MethodID")]
		public EntitySet<DataValue> DataValues
		{
			get
			{
				return this._DataValues;
			}
			set
			{
				this._DataValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Method = this;
		}
		
		private void detach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Method = null;
		}
	}
	
	[Table(Name="dbo.QualityControlLevels")]
	public partial class QualityControlLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QualityControlLevelID;
		
		private string _Definition;
		
		private string _Explanation;
		
		private EntitySet<DataValue> _DataValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQualityControlLevelIDChanging(int value);
    partial void OnQualityControlLevelIDChanged();
    partial void OnDefinitionChanging(string value);
    partial void OnDefinitionChanged();
    partial void OnExplanationChanging(string value);
    partial void OnExplanationChanged();
    #endregion
		
		public QualityControlLevel()
		{
			this._DataValues = new EntitySet<DataValue>(new Action<DataValue>(this.attach_DataValues), new Action<DataValue>(this.detach_DataValues));
			OnCreated();
		}
		
		[Column(Storage="_QualityControlLevelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QualityControlLevelID
		{
			get
			{
				return this._QualityControlLevelID;
			}
			set
			{
				if ((this._QualityControlLevelID != value))
				{
					this.OnQualityControlLevelIDChanging(value);
					this.SendPropertyChanging();
					this._QualityControlLevelID = value;
					this.SendPropertyChanged("QualityControlLevelID");
					this.OnQualityControlLevelIDChanged();
				}
			}
		}
		
		[Column(Storage="_Definition", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this.OnDefinitionChanging(value);
					this.SendPropertyChanging();
					this._Definition = value;
					this.SendPropertyChanged("Definition");
					this.OnDefinitionChanged();
				}
			}
		}
		
		[Column(Storage="_Explanation", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Explanation
		{
			get
			{
				return this._Explanation;
			}
			set
			{
				if ((this._Explanation != value))
				{
					this.OnExplanationChanging(value);
					this.SendPropertyChanging();
					this._Explanation = value;
					this.SendPropertyChanged("Explanation");
					this.OnExplanationChanged();
				}
			}
		}
		
		[Association(Name="QualityControlLevel_DataValue", Storage="_DataValues", ThisKey="QualityControlLevelID", OtherKey="QualityControlLevelID")]
		public EntitySet<DataValue> DataValues
		{
			get
			{
				return this._DataValues;
			}
			set
			{
				this._DataValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.QualityControlLevel = this;
		}
		
		private void detach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.QualityControlLevel = null;
		}
	}
	
	[Table(Name="dbo.Variables")]
	public partial class Variable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VariableID;
		
		private string _VariableCode;
		
		private string _VariableName;
		
		private int _VariableUnitsID;
		
		private int _TimeUnitsID;
		
		private string _DataType;
		
		private EntitySet<DataValue> _DataValues;
		
		private EntityRef<Unit> _Unit;
		
		private EntityRef<Unit> _Unit1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVariableIDChanging(int value);
    partial void OnVariableIDChanged();
    partial void OnVariableCodeChanging(string value);
    partial void OnVariableCodeChanged();
    partial void OnVariableNameChanging(string value);
    partial void OnVariableNameChanged();
    partial void OnVariableUnitsIDChanging(int value);
    partial void OnVariableUnitsIDChanged();
    partial void OnTimeUnitsIDChanging(int value);
    partial void OnTimeUnitsIDChanged();
    partial void OnDataTypeChanging(string value);
    partial void OnDataTypeChanged();
    #endregion
		
		public Variable()
		{
			this._DataValues = new EntitySet<DataValue>(new Action<DataValue>(this.attach_DataValues), new Action<DataValue>(this.detach_DataValues));
			this._Unit = default(EntityRef<Unit>);
			this._Unit1 = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[Column(Storage="_VariableID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VariableID
		{
			get
			{
				return this._VariableID;
			}
			set
			{
				if ((this._VariableID != value))
				{
					this.OnVariableIDChanging(value);
					this.SendPropertyChanging();
					this._VariableID = value;
					this.SendPropertyChanged("VariableID");
					this.OnVariableIDChanged();
				}
			}
		}
		
		[Column(Storage="_VariableCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string VariableCode
		{
			get
			{
				return this._VariableCode;
			}
			set
			{
				if ((this._VariableCode != value))
				{
					this.OnVariableCodeChanging(value);
					this.SendPropertyChanging();
					this._VariableCode = value;
					this.SendPropertyChanged("VariableCode");
					this.OnVariableCodeChanged();
				}
			}
		}
		
		[Column(Storage="_VariableName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string VariableName
		{
			get
			{
				return this._VariableName;
			}
			set
			{
				if ((this._VariableName != value))
				{
					this.OnVariableNameChanging(value);
					this.SendPropertyChanging();
					this._VariableName = value;
					this.SendPropertyChanged("VariableName");
					this.OnVariableNameChanged();
				}
			}
		}
		
		[Column(Storage="_VariableUnitsID", DbType="Int NOT NULL")]
		public int VariableUnitsID
		{
			get
			{
				return this._VariableUnitsID;
			}
			set
			{
				if ((this._VariableUnitsID != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariableUnitsIDChanging(value);
					this.SendPropertyChanging();
					this._VariableUnitsID = value;
					this.SendPropertyChanged("VariableUnitsID");
					this.OnVariableUnitsIDChanged();
				}
			}
		}
		
		[Column(Storage="_TimeUnitsID", DbType="Int NOT NULL")]
		public int TimeUnitsID
		{
			get
			{
				return this._TimeUnitsID;
			}
			set
			{
				if ((this._TimeUnitsID != value))
				{
					if (this._Unit1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeUnitsIDChanging(value);
					this.SendPropertyChanging();
					this._TimeUnitsID = value;
					this.SendPropertyChanged("TimeUnitsID");
					this.OnTimeUnitsIDChanged();
				}
			}
		}
		
		[Column(Storage="_DataType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[Association(Name="Variable_DataValue", Storage="_DataValues", ThisKey="VariableID", OtherKey="VariableID")]
		public EntitySet<DataValue> DataValues
		{
			get
			{
				return this._DataValues;
			}
			set
			{
				this._DataValues.Assign(value);
			}
		}
		
		[Association(Name="Unit_Variable", Storage="_Unit", ThisKey="VariableUnitsID", OtherKey="UnitsID", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.Variables.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.Variables.Add(this);
						this._VariableUnitsID = value.UnitsID;
					}
					else
					{
						this._VariableUnitsID = default(int);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		[Association(Name="Unit_Variable1", Storage="_Unit1", ThisKey="TimeUnitsID", OtherKey="UnitsID", IsForeignKey=true)]
		public Unit Unit1
		{
			get
			{
				return this._Unit1.Entity;
			}
			set
			{
				Unit previousValue = this._Unit1.Entity;
				if (((previousValue != value) 
							|| (this._Unit1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit1.Entity = null;
						previousValue.Variables1.Remove(this);
					}
					this._Unit1.Entity = value;
					if ((value != null))
					{
						value.Variables1.Add(this);
						this._TimeUnitsID = value.UnitsID;
					}
					else
					{
						this._TimeUnitsID = default(int);
					}
					this.SendPropertyChanged("Unit1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Variable = this;
		}
		
		private void detach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Variable = null;
		}
	}
	
	[Table(Name="dbo.Samples")]
	public partial class Sample : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SampleID;
		
		private string _SampleType;
		
		private string _LabSampleCode;
		
		private int _LabMethodID;
		
		private EntitySet<DataValue> _DataValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSampleIDChanging(int value);
    partial void OnSampleIDChanged();
    partial void OnSampleTypeChanging(string value);
    partial void OnSampleTypeChanged();
    partial void OnLabSampleCodeChanging(string value);
    partial void OnLabSampleCodeChanged();
    partial void OnLabMethodIDChanging(int value);
    partial void OnLabMethodIDChanged();
    #endregion
		
		public Sample()
		{
			this._DataValues = new EntitySet<DataValue>(new Action<DataValue>(this.attach_DataValues), new Action<DataValue>(this.detach_DataValues));
			OnCreated();
		}
		
		[Column(Storage="_SampleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SampleID
		{
			get
			{
				return this._SampleID;
			}
			set
			{
				if ((this._SampleID != value))
				{
					this.OnSampleIDChanging(value);
					this.SendPropertyChanging();
					this._SampleID = value;
					this.SendPropertyChanged("SampleID");
					this.OnSampleIDChanged();
				}
			}
		}
		
		[Column(Storage="_SampleType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SampleType
		{
			get
			{
				return this._SampleType;
			}
			set
			{
				if ((this._SampleType != value))
				{
					this.OnSampleTypeChanging(value);
					this.SendPropertyChanging();
					this._SampleType = value;
					this.SendPropertyChanged("SampleType");
					this.OnSampleTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LabSampleCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LabSampleCode
		{
			get
			{
				return this._LabSampleCode;
			}
			set
			{
				if ((this._LabSampleCode != value))
				{
					this.OnLabSampleCodeChanging(value);
					this.SendPropertyChanging();
					this._LabSampleCode = value;
					this.SendPropertyChanged("LabSampleCode");
					this.OnLabSampleCodeChanged();
				}
			}
		}
		
		[Column(Storage="_LabMethodID", DbType="Int NOT NULL")]
		public int LabMethodID
		{
			get
			{
				return this._LabMethodID;
			}
			set
			{
				if ((this._LabMethodID != value))
				{
					this.OnLabMethodIDChanging(value);
					this.SendPropertyChanging();
					this._LabMethodID = value;
					this.SendPropertyChanged("LabMethodID");
					this.OnLabMethodIDChanged();
				}
			}
		}
		
		[Association(Name="Sample_DataValue", Storage="_DataValues", ThisKey="SampleID", OtherKey="SampleID")]
		public EntitySet<DataValue> DataValues
		{
			get
			{
				return this._DataValues;
			}
			set
			{
				this._DataValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Sample = this;
		}
		
		private void detach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Sample = null;
		}
	}
	
	[Table(Name="dbo.Qualifiers")]
	public partial class Qualifier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QualifierID;
		
		private string _QualifierCode;
		
		private string _QualifierDescription;
		
		private EntitySet<DataValue> _DataValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQualifierIDChanging(int value);
    partial void OnQualifierIDChanged();
    partial void OnQualifierCodeChanging(string value);
    partial void OnQualifierCodeChanged();
    partial void OnQualifierDescriptionChanging(string value);
    partial void OnQualifierDescriptionChanged();
    #endregion
		
		public Qualifier()
		{
			this._DataValues = new EntitySet<DataValue>(new Action<DataValue>(this.attach_DataValues), new Action<DataValue>(this.detach_DataValues));
			OnCreated();
		}
		
		[Column(Storage="_QualifierID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QualifierID
		{
			get
			{
				return this._QualifierID;
			}
			set
			{
				if ((this._QualifierID != value))
				{
					this.OnQualifierIDChanging(value);
					this.SendPropertyChanging();
					this._QualifierID = value;
					this.SendPropertyChanged("QualifierID");
					this.OnQualifierIDChanged();
				}
			}
		}
		
		[Column(Storage="_QualifierCode", DbType="NVarChar(50)")]
		public string QualifierCode
		{
			get
			{
				return this._QualifierCode;
			}
			set
			{
				if ((this._QualifierCode != value))
				{
					this.OnQualifierCodeChanging(value);
					this.SendPropertyChanging();
					this._QualifierCode = value;
					this.SendPropertyChanged("QualifierCode");
					this.OnQualifierCodeChanged();
				}
			}
		}
		
		[Column(Storage="_QualifierDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string QualifierDescription
		{
			get
			{
				return this._QualifierDescription;
			}
			set
			{
				if ((this._QualifierDescription != value))
				{
					this.OnQualifierDescriptionChanging(value);
					this.SendPropertyChanging();
					this._QualifierDescription = value;
					this.SendPropertyChanged("QualifierDescription");
					this.OnQualifierDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Qualifier_DataValue", Storage="_DataValues", ThisKey="QualifierID", OtherKey="QualifierID")]
		public EntitySet<DataValue> DataValues
		{
			get
			{
				return this._DataValues;
			}
			set
			{
				this._DataValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Qualifier = this;
		}
		
		private void detach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Qualifier = null;
		}
	}
	
	[Table(Name="dbo.DerivedFrom")]
	public partial class DerivedFrom
	{
		
		private int _DerivedFromID;
		
		private int _ValueID;
		
		public DerivedFrom()
		{
		}
		
		[Column(Storage="_DerivedFromID", DbType="Int NOT NULL")]
		public int DerivedFromID
		{
			get
			{
				return this._DerivedFromID;
			}
			set
			{
				if ((this._DerivedFromID != value))
				{
					this._DerivedFromID = value;
				}
			}
		}
		
		[Column(Storage="_ValueID", DbType="Int NOT NULL")]
		public int ValueID
		{
			get
			{
				return this._ValueID;
			}
			set
			{
				if ((this._ValueID != value))
				{
					this._ValueID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Sites")]
	public partial class Site : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SiteID;
		
		private string _SiteCode;
		
		private string _SiteName;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private int _LatLongDatumID;
		
		private System.Nullable<double> _Elevation_m;
		
		private string _VerticalDatum;
		
		private System.Nullable<double> _LocalX;
		
		private System.Nullable<double> _LocalY;
		
		private System.Nullable<int> _LocalProjectionID;
		
		private System.Nullable<double> _PosAccuracy_m;
		
		private string _State;
		
		private string _County;
		
		private string _Comments;
		
		private EntitySet<DataValue> _DataValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteIDChanging(int value);
    partial void OnSiteIDChanged();
    partial void OnSiteCodeChanging(string value);
    partial void OnSiteCodeChanged();
    partial void OnSiteNameChanging(string value);
    partial void OnSiteNameChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnLatLongDatumIDChanging(int value);
    partial void OnLatLongDatumIDChanged();
    partial void OnElevation_mChanging(System.Nullable<double> value);
    partial void OnElevation_mChanged();
    partial void OnVerticalDatumChanging(string value);
    partial void OnVerticalDatumChanged();
    partial void OnLocalXChanging(System.Nullable<double> value);
    partial void OnLocalXChanged();
    partial void OnLocalYChanging(System.Nullable<double> value);
    partial void OnLocalYChanged();
    partial void OnLocalProjectionIDChanging(System.Nullable<int> value);
    partial void OnLocalProjectionIDChanged();
    partial void OnPosAccuracy_mChanging(System.Nullable<double> value);
    partial void OnPosAccuracy_mChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Site()
		{
			this._DataValues = new EntitySet<DataValue>(new Action<DataValue>(this.attach_DataValues), new Action<DataValue>(this.detach_DataValues));
			OnCreated();
		}
		
		[Column(Storage="_SiteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[Column(Storage="_SiteCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SiteCode
		{
			get
			{
				return this._SiteCode;
			}
			set
			{
				if ((this._SiteCode != value))
				{
					this.OnSiteCodeChanging(value);
					this.SendPropertyChanging();
					this._SiteCode = value;
					this.SendPropertyChanged("SiteCode");
					this.OnSiteCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SiteName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SiteName
		{
			get
			{
				return this._SiteName;
			}
			set
			{
				if ((this._SiteName != value))
				{
					this.OnSiteNameChanging(value);
					this.SendPropertyChanging();
					this._SiteName = value;
					this.SendPropertyChanged("SiteName");
					this.OnSiteNameChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_LatLongDatumID", DbType="Int NOT NULL")]
		public int LatLongDatumID
		{
			get
			{
				return this._LatLongDatumID;
			}
			set
			{
				if ((this._LatLongDatumID != value))
				{
					this.OnLatLongDatumIDChanging(value);
					this.SendPropertyChanging();
					this._LatLongDatumID = value;
					this.SendPropertyChanged("LatLongDatumID");
					this.OnLatLongDatumIDChanged();
				}
			}
		}
		
		[Column(Storage="_Elevation_m", DbType="Float")]
		public System.Nullable<double> Elevation_m
		{
			get
			{
				return this._Elevation_m;
			}
			set
			{
				if ((this._Elevation_m != value))
				{
					this.OnElevation_mChanging(value);
					this.SendPropertyChanging();
					this._Elevation_m = value;
					this.SendPropertyChanged("Elevation_m");
					this.OnElevation_mChanged();
				}
			}
		}
		
		[Column(Storage="_VerticalDatum", DbType="NVarChar(255)")]
		public string VerticalDatum
		{
			get
			{
				return this._VerticalDatum;
			}
			set
			{
				if ((this._VerticalDatum != value))
				{
					this.OnVerticalDatumChanging(value);
					this.SendPropertyChanging();
					this._VerticalDatum = value;
					this.SendPropertyChanged("VerticalDatum");
					this.OnVerticalDatumChanged();
				}
			}
		}
		
		[Column(Storage="_LocalX", DbType="Float")]
		public System.Nullable<double> LocalX
		{
			get
			{
				return this._LocalX;
			}
			set
			{
				if ((this._LocalX != value))
				{
					this.OnLocalXChanging(value);
					this.SendPropertyChanging();
					this._LocalX = value;
					this.SendPropertyChanged("LocalX");
					this.OnLocalXChanged();
				}
			}
		}
		
		[Column(Storage="_LocalY", DbType="Float")]
		public System.Nullable<double> LocalY
		{
			get
			{
				return this._LocalY;
			}
			set
			{
				if ((this._LocalY != value))
				{
					this.OnLocalYChanging(value);
					this.SendPropertyChanging();
					this._LocalY = value;
					this.SendPropertyChanged("LocalY");
					this.OnLocalYChanged();
				}
			}
		}
		
		[Column(Storage="_LocalProjectionID", DbType="Int")]
		public System.Nullable<int> LocalProjectionID
		{
			get
			{
				return this._LocalProjectionID;
			}
			set
			{
				if ((this._LocalProjectionID != value))
				{
					this.OnLocalProjectionIDChanging(value);
					this.SendPropertyChanging();
					this._LocalProjectionID = value;
					this.SendPropertyChanged("LocalProjectionID");
					this.OnLocalProjectionIDChanged();
				}
			}
		}
		
		[Column(Storage="_PosAccuracy_m", DbType="Float")]
		public System.Nullable<double> PosAccuracy_m
		{
			get
			{
				return this._PosAccuracy_m;
			}
			set
			{
				if ((this._PosAccuracy_m != value))
				{
					this.OnPosAccuracy_mChanging(value);
					this.SendPropertyChanging();
					this._PosAccuracy_m = value;
					this.SendPropertyChanged("PosAccuracy_m");
					this.OnPosAccuracy_mChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(255)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_County", DbType="NVarChar(255)")]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Association(Name="Site_DataValue", Storage="_DataValues", ThisKey="SiteID", OtherKey="SiteID")]
		public EntitySet<DataValue> DataValues
		{
			get
			{
				return this._DataValues;
			}
			set
			{
				this._DataValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Site = this;
		}
		
		private void detach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Site = null;
		}
	}
}
#pragma warning restore 1591
