<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Synchronization</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Synchronization.ActiveChangeApplicationContextException">
      <summary>The exception that is thrown by the change application service when an active <see cref="T:Microsoft.Synchronization.ChangeApplicationContext" /> object has not been fully processed and a second <see cref="T:Microsoft.Synchronization.ChangeApplicationContext" /> object is requested.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ActiveChangeApplicationContextException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ActiveChangeApplicationContextException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ActiveChangeApplicationContextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ActiveChangeApplicationContextException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ActiveChangeApplicationContextException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ActiveChangeApplicationContextException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ActiveChangeApplicationContextException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ActiveChangeApplicationContextException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeApplicationAction">
      <summary>Represents the action a destination provider must take to apply a change.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ChangeApplicationAction.SaveChange">
      <summary>Save the change to the destination replica. Get <see cref="P:Microsoft.Synchronization.ChangeApplicationContext.ItemChangeSaveAction" /> to retrieve the save change action.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ChangeApplicationAction.SaveChangeWithChangeUnits">
      <summary>Save the change with change units to the destination replica. Call <see cref="M:Microsoft.Synchronization.ChangeApplicationContext.GetChangeUnitChangeSaveAction(Microsoft.Synchronization.ChangeUnitChange)" /> to retrieve the save change action.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ChangeApplicationAction.SaveConflict">
      <summary>Save the conflict to the conflict log of the destination replica.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ChangeApplicationAction.SetConflictWinnerInformation">
      <summary>Set the conflict winner information on this change by calling <see cref="M:Microsoft.Synchronization.ChangeApplicationContext.SetConflictWinnerInformation(System.UInt64)" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ChangeApplicationAction.Finished">
      <summary>Change application has completed for this change. Take no action.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeApplicationContext">
      <summary>Represents information returned by the change application service about a change to be applied.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeApplicationContext.Change">
      <summary>Gets the metadata for the change to be applied or the conflict to be saved.</summary>
      <returns>The metadata for the change to be applied or the conflict to be saved.</returns>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">
        <see cref="P:Microsoft.Synchronization.ChangeApplicationContext.ChangeApplicationAction" /> is set to a value other than <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.SaveChange" />, <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.SaveChangeWithChangeUnits" />, or <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.SaveConflict" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeApplicationContext.ChangeApplicationAction">
      <summary>Gets the action a destination provider must take to apply a change.</summary>
      <returns>The action a destination provider must take to apply a change.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeApplicationContext.ChangeData">
      <summary>Gets the data for the change to be applied or the conflict to be saved.</summary>
      <returns>The data for the change to be applied or the conflict to be saved.</returns>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">
        <see cref="P:Microsoft.Synchronization.ChangeApplicationContext.ChangeApplicationAction" /> is set to a value other than <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.SaveChange" />, <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.SaveChangeWithChangeUnits" />, or <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.SaveConflict" />. This exception is also thrown when no data exists for the specified save change action, such as <see cref="F:Microsoft.Synchronization.SaveChangeAction.DeleteAndStoreTombstone" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeApplicationContext.ConflictKnowledge">
      <summary>Gets the knowledge to be saved when this change is a conflict that must be saved.</summary>
      <returns>The knowledge to be saved when this change is a conflict that must be saved.</returns>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">
        <see cref="P:Microsoft.Synchronization.ChangeApplicationContext.ChangeApplicationAction" /> is set to a value other than <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.SaveConflict" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationContext.GetChangeUnitChangeSaveAction(Microsoft.Synchronization.ChangeUnitChange)">
      <summary>Gets the action a destination provider must take to save a change unit.</summary>
      <returns>The action a destination provider must take to save <paramref name="changeUnitChange" />.</returns>
      <param name="changeUnitChange">The change unit to look up.</param>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">
        <see cref="P:Microsoft.Synchronization.ChangeApplicationContext.ChangeApplicationAction" /> is set to a value other than <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.SaveChangeWithChangeUnits" />, or the change does not contain change units.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeApplicationContext.ItemChangeSaveAction">
      <summary>Gets the action a destination provider must take to save a change.</summary>
      <returns>The action a destination provider must take to save a change.</returns>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">
        <see cref="P:Microsoft.Synchronization.ChangeApplicationContext.ChangeApplicationAction" /> is set to a value other than <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.SaveChange" />, or the change contains change units.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationContext.SetConflictWinnerInformation(System.UInt64)">
      <summary>Sets the conflict winner information when this change is a conflict that requires more information.</summary>
      <param name="tickCount">The tick count, valid on the destination replica, to use for the version of the change that resolves the conflict.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tickCount" /> is less than the current tick count of the destination replica.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">
        <see cref="P:Microsoft.Synchronization.ChangeApplicationContext.ChangeApplicationAction" /> is set to a value other than <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.SetConflictWinnerInformation" />.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeApplicationServices">
      <summary>Represents a change application service object that can be used to perform change application actions individually.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.SyncSessionContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeApplicationServices" /> class by using the specified ID format schema, conflict resolution policy, and synchronization session context information. </summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="conflictResolutionPolicy">The conflict resolution policy that is used to resolve concurrency conflicts that occur during synchronization.</param>
      <param name="syncSessionContext">Additional information about the synchronization session.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="conflictResolutionPolicy" /> is an invalid value.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.BeginChangeApplication(Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.FilterInfo,Microsoft.Synchronization.SyncCallbacks,Microsoft.Synchronization.IChangeDataRetriever,Microsoft.Synchronization.IChangeDataRetriever)">
      <summary>Begins processing of a set of changes.</summary>
      <param name="destinationKnowledge">The current knowledge of the destination replica.</param>
      <param name="destinationForgottenKnowledge">The current forgotten knowledge of the destination replica. Can be a null.</param>
      <param name="filterInfo">Information about filters used by the destination provider. Can be a null.</param>
      <param name="syncCallbacks">Callbacks that will receive notifications about change application events. Can be a null.</param>
      <param name="sourceDataRetriever">An object that can be used to retrieve item data from the source replica.</param>
      <param name="destinationDataRetriever">An object that can be used to retrieve item data from the destination replica.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationKnowledge" />, <paramref name="sourceDataRetriever" />, or <paramref name="destinationDataRetriever" />  is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The ID format schema of any of the specified knowledge objects does not match the ID format schema that was specified when this object was initialized.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">The change application was started but not ended on another set of changes.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.BeginFullEnumerationChangeApplication(Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.FilterInfo,Microsoft.Synchronization.SyncCallbacks,Microsoft.Synchronization.IChangeDataRetriever,Microsoft.Synchronization.IChangeDataRetriever)">
      <summary>Begins processing of a set of changes as part of a recovery synchronization.</summary>
      <param name="destinationKnowledge">The current knowledge of the destination replica.</param>
      <param name="destinationForgottenKnowledge">The current forgotten knowledge of the destination replica.</param>
      <param name="sourceForgottenDeleteKnowledge">The made-with knowledge of the change batch to be processed.</param>
      <param name="sourceForgottenDeleteForgottenKnowledge">The current forgotten knowledge of the source replica.</param>
      <param name="filterInfo">Information about filters used by the destination provider. Can be a null.</param>
      <param name="syncCallbacks">Callbacks that will receive notifications about change application events. Can be a null.</param>
      <param name="sourceDataRetriever">An object that can be used to retrieve item data from the source replica.</param>
      <param name="destinationDataRetriever">An object that can be used to retrieve item data from the destination replica.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The ID format schema of any of the specified knowledge objects does not match the ID format schema specified when this object was initialized.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">The change application was started but not ended on another set of changes.</exception>
      <exception cref="T:Microsoft.Synchronization.ItemListFilteredFullEnumerationNotSupportedException">The <paramref name="filterInfo" /> parameter specifies that item filtering is in use. Item filtering cannot be used by the destination provider during recovery synchronization.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.EndChangeApplication(Microsoft.Synchronization.SyncKnowledge)">
      <summary>Ends processing of a set of changes.</summary>
      <returns>Returns the updated destination knowledge, based on the changes that were applied or skipped.</returns>
      <param name="batchLearnedKnowledge">The learned knowledge of the change batch.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The ID format schema of the specified knowledge object does not match the ID format schema specified when this object was initialized.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Change application was not started.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.EndFullEnumerationChangeApplication(Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.SyncKnowledge@,Microsoft.Synchronization.ForgottenKnowledge@)">
      <summary>Ends processing of a set of changes as part of a recovery synchronization.</summary>
      <param name="batchLearnedKnowledge">The learned knowledge of the change batch.</param>
      <param name="batchLearnedForgottenKnowledge">The learned forgotten knowledge of the change batch.</param>
      <param name="destinationKnowledge">Returns the updated destination knowledge, based on the changes that were applied or skipped.</param>
      <param name="destinationForgottenKnowledge">Returns the updated destination forgotten knowledge, based on the changes that were applied or skipped.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The ID format schema of the specified knowledge object does not match the ID format schema specified when this object was initialized.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Change application was not started.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.GetChangeApplicationContext(Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.ItemChange)">
      <summary>Gets an object that represents the current change to be applied.</summary>
      <returns>Returns an object that can be used to process the change.</returns>
      <param name="sourceChange">A change received from the source provider. Can be a null when the change batch is part of a recovery synchronization.</param>
      <param name="destinationVersion">The version of <paramref name="sourceChange" /> in the destination replica. Can be a null when the destination replica does not have a version for <paramref name="sourceChange" />.</param>
      <exception cref="T:Microsoft.Synchronization.ActiveChangeApplicationContextException">A <see cref="T:Microsoft.Synchronization.ChangeApplicationContext" /> object is already active. The active <see cref="T:Microsoft.Synchronization.ChangeApplicationContext" /> object must be processed until its <see cref="P:Microsoft.Synchronization.ChangeApplicationContext.ChangeApplicationAction" /> property is set to <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.Finished" /> before another change can be processed.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeNeedsKnowledgeException">
        <paramref name="sourceChange" /> does not contain made-with knowledge.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeVersionNotInKnowledgeException">The update version or creation version of <paramref name="sourceChange" /> is not contained in its made-with knowledge.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeUnitCountMismatchException">
        <paramref name="sourceChange" /> and <paramref name="destinationVersion" /> contain differing numbers of change units.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The ID format schema of the specified knowledge object does not match the ID format schema specified when this object was initialized.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Change application was not started or <paramref name="sourceChange" /> has already been reported as successfully applied.</exception>
      <exception cref="T:Microsoft.Synchronization.ItemHasChangeUnitsException">
        <paramref name="sourceChange" /> or <paramref name="destinationVersion" /> contains change units and the other does not.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeNotExpectedException">
        <paramref name="sourceChange" /> and <paramref name="destinationVersion" /> refer to different item IDs.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.GetUpdatedDestinationKnowledge(Microsoft.Synchronization.SyncKnowledge@,Microsoft.Synchronization.ForgottenKnowledge@)">
      <summary>Gets the updated destination knowledge that contains all of the changes that have been applied so far.</summary>
      <param name="destinationKnowledge">Returns the updated destination knowledge that contains all of the changes that have been applied so far.</param>
      <param name="destinationForgottenKnowledge">Returns the updated destination forgotten knowledge that contains all of the changes that have been applied so far. Can be a null when the set of changes to be applied is not part of a recovery synchronization; otherwise, cannot be a null.</param>
      <exception cref="T:Microsoft.Synchronization.FullEnumerationExpectedException">The set of changes is part of a recovery synchronization but <see cref="M:Microsoft.Synchronization.ChangeApplicationServices.BeginChangeApplication(Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.FilterInfo,Microsoft.Synchronization.SyncCallbacks,Microsoft.Synchronization.IChangeDataRetriever,Microsoft.Synchronization.IChangeDataRetriever)" /> was used to start change application instead of <see cref="M:Microsoft.Synchronization.ChangeApplicationServices.BeginFullEnumerationChangeApplication(Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.FilterInfo,Microsoft.Synchronization.SyncCallbacks,Microsoft.Synchronization.IChangeDataRetriever,Microsoft.Synchronization.IChangeDataRetriever)" />.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Change application was not started.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.ReportChangeUnitChangeApplied(Microsoft.Synchronization.ChangeUnitChange)">
      <summary>Notifies the change application service that a change unit change has been successfully applied to the destination replica.</summary>
      <param name="changeUnitChange">The change unit change that was successfully applied to the destination replica.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.ActiveChangeApplicationContextException">A <see cref="T:Microsoft.Synchronization.ChangeApplicationContext" /> object is already active. The active <see cref="T:Microsoft.Synchronization.ChangeApplicationContext" /> object must be processed until its <see cref="P:Microsoft.Synchronization.ChangeApplicationContext.ChangeApplicationAction" /> property is set to <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.Finished" /> before another change can be processed.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeNeedsKnowledgeException">
        <paramref name="changeUnitChange" /> does not contain made-with knowledge.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The ID format schema of the knowledge object contained in <paramref name="changeUnitChange" /> does not match the ID format schema specified when this object was initialized.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Change application was not started or <paramref name="changeUnitChange" /> or its parent change has already been reported as successfully applied or conflicting.</exception>
      <exception cref="T:Microsoft.Synchronization.ForgottenKnowledgeNotContainedException">The learned knowledge for the change does not contain the learned forgotten knowledge.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.ReportItemChangeApplied(Microsoft.Synchronization.ItemChange)">
      <summary>Notifies the change application service that an item change has been successfully applied to the destination replica.</summary>
      <param name="itemChange">The item change that was successfully applied to the destination replica.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.ActiveChangeApplicationContextException">A <see cref="T:Microsoft.Synchronization.ChangeApplicationContext" /> object is already active. The active <see cref="T:Microsoft.Synchronization.ChangeApplicationContext" /> object must be processed until its <see cref="P:Microsoft.Synchronization.ChangeApplicationContext.ChangeApplicationAction" /> property is set to <see cref="F:Microsoft.Synchronization.ChangeApplicationAction.Finished" /> before another change can be processed.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeNeedsKnowledgeException">
        <paramref name="itemChange" /> does not contain made-with knowledge.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The ID format schema of the knowledge object contained in <paramref name="itemChange" /> does not match the ID format schema specified when this object was initialized.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Change application was not started or <paramref name="itemChange" /> has already been reported as successfully applied or conflicting.</exception>
      <exception cref="T:Microsoft.Synchronization.ForgottenKnowledgeNotContainedException">The learned knowledge for the change does not contain the learned forgotten knowledge.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.ReportRecoverableErrorOnChangeUnitChange(Microsoft.Synchronization.ChangeUnitChange,Microsoft.Synchronization.RecoverableErrorData)">
      <summary>Notifies the change application service that a recoverable error occurred when the destination provider tried to apply the change unit change.</summary>
      <param name="changeUnitChange">The change unit change that was successfully applied to the destination replica.</param>
      <param name="errorData">Additional information about the error.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeNeedsKnowledgeException">
        <paramref name="changeUnitChange" /> does not contain made-with knowledge.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The ID format schema of the knowledge object contained in <paramref name="changeUnitChange" /> does not match the ID format schema specified when this object was initialized.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Change application was not started or <paramref name="changeUnitChange" /> or its parent change has already been reported as successfully applied or conflicting.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.ReportRecoverableErrorOnItemChange(Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.RecoverableErrorData)">
      <summary>Notifies the change application service that a recoverable error occurred when the destination provider tried to apply the item change.</summary>
      <param name="itemChange">The item change that failed to apply to the destination replica.</param>
      <param name="errorData">Additional information about the error.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeNeedsKnowledgeException">
        <paramref name="itemChange" /> does not contain made-with knowledge.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The ID format schema of the knowledge object contained in <paramref name="itemChange" /> does not match the ID format schema specified when this object was initialized.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Change application was not started, or <paramref name="itemChange" /> has already been reported as successfully applied or conflicting, or any change unit contained in <paramref name="itemChange" /> has been reported as successfully applied or conflicting.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeApplicationServices.SetDestinationKnowledge(Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge)">
      <summary>Sets the destination knowledge that is used to calculate the updated destination knowledge as changes are applied.</summary>
      <param name="destinationKnowledge">The current destination knowledge. </param>
      <param name="destinationForgottenKnowledge">The current destination forgotten knowledge. Can be a null when the changes to apply are not part of a recovery synchronization; otherwise, cannot be a null.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Change application was not started or changes have already been applied for the current set of changes.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeBatch">
      <summary>Represents metadata for a set of changes. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatch.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatch" /> class that contains the specified ID format schema, the knowledge from the destination replica, and the forgotten knowledge of the source provider.</summary>
      <param name="idFormats">The ID format schema for the provider.</param>
      <param name="destinationKnowledge">The knowledge from the destination replica.</param>
      <param name="sourceForgottenKnowledge">The forgotten knowledge of the source replica.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" />, <paramref name="destinationKnowledge" />, or <paramref name="sourceForgottenKnowledge" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatch.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.FilterInfo)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatch" /> class that contains the specified ID format schema, knowledge from the destination replica, forgotten knowledge from the source replica, and the filter that is used to control which changes are included in the change batch.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="destinationKnowledge">The knowledge from the destination replica.</param>
      <param name="sourceForgottenKnowledge">The forgotten knowledge of the source replica.</param>
      <param name="filterInfo">The filter that is used to control which changes are included in the change batch.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" />, <paramref name="destinationKnowledge" />, <paramref name="sourceForgottenKnowledge" />, or <paramref name="filterInfo" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatch.AddLoggedConflict(Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SyncKnowledge)">
      <summary>Adds metadata that represents a conflict to the change batch.</summary>
      <param name="change">Item change metadata for the change that caused the conflict.</param>
      <param name="conflictKnowledge">The conflict knowledge that was saved when the conflict was logged.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="change" /> or <paramref name="conflictKnowledge" /> is a null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="change.CreationVersion" /> is a null—or— <paramref name="change.ChangeVersion" /> is 0 and <paramref name="change" /> has no unit changes.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatch.BeginUnorderedGroup">
      <summary>Opens an unordered group in the change batch. Item changes in this group can be in any order.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatch" /> has already been disposed.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">The change batch contains a group that was started but not ended.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeBatchIsReadOnlyException">The change batch has already been sent to a change applier or synchronization session. Changes cannot be added to the batch after it has been sent.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatch.Deserialize(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.ISyncFilterDeserializer,System.Byte[])">
      <summary>Static method that creates a change batch object and initializes it by using an ID format schema, a custom filter deserializer, and data from a byte array.</summary>
      <returns>The newly created change batch object that is initialized by using the serialized data that is contained in <paramref name="data" />.</returns>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="syncFilterDeserializer">An object that is used to deserialize the custom filters that are contained in the serialized filter key map data.</param>
      <param name="data">The serialized change batch data.</param>
      <exception cref="T:System.ArgumentNullException">i<paramref name="dFormats" />, <paramref name="syncFilterDeserializer" />, or <paramref name="data" /> is a null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A problem occurred during serialization.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatch.Deserialize(Microsoft.Synchronization.SyncIdFormatGroup,System.Byte[])">
      <summary>Static method that creates a change batch object and initializes it by using an ID format schema and data from a byte array.</summary>
      <returns>A change batch object that is initialized by using data from the byte array.</returns>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="data">The change batch data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="data" /> is a null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A problem occurred during serialization.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatch.EndUnorderedGroup(Microsoft.Synchronization.SyncKnowledge,System.Boolean)">
      <summary>Closes a previously opened unordered group in the change batch.</summary>
      <param name="madeWithKnowledge">The made-with knowledge for the changes that are contained in the group. Typically, this is the knowledge of the replica that made this group.</param>
      <param name="allChangeForKnowledgeIncluded">true when all the changes contained in <paramref name="madeWithKnowledge" /> are included in this change batch. Otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="madeWithKnowledge" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeBatchIsReadOnlyException">This <see cref="T:Microsoft.Synchronization.ChangeBatch" /> was serialized and has not been deserialized.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">No unordered group was started.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatch.GetLearnedKnowledgeWithPrerequisite(Microsoft.Synchronization.SyncKnowledge)">
      <summary>Gets the knowledge that the destination replica learns when the destination provider applies all the changes in this change batch, based on the prerequisite knowledge of the change batch.</summary>
      <returns>The knowledge that the destination replica learns when the destination provider applies all the changes in this change batch, based on the prerequisite knowledge of the change batch.</returns>
      <param name="destinationKnowledge">A knowledge fragment is added to the returned learned knowledge only if <paramref name="destinationKnowledge" /> contains the prerequisite knowledge for that fragment.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationKnowledge" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatch.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Puts change batch data into a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</summary>
      <param name="info">The object to receive the change batch data.</param>
      <param name="context">Serialization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeBatchBase">
      <summary>When overridden by a derived class, represents metadata for a set of changes.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.AddChange(Microsoft.Synchronization.ItemChange)">
      <summary>Adds a specified item change to the group that is currently open</summary>
      <param name="change">An item change to add to the group that is currently open.</param>
      <exception cref="T:Microsoft.Synchronization.ChangeBatchIsReadOnlyException">The change batch has already been sent to a change applier or synchronization session. Changes cannot be added to the batch after it has been sent.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="change" /> is a null.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
      <exception cref="T:Microsoft.InvalidOperationException">
        <paramref name="change.CreationVersion" /> is a null<paramref name="change.ChangeVersion" /> is a null and <paramref name="change.ChangeUnitChanges" /> is empty.—or— There is no current change group.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.AddChanges(System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ItemChange})">
      <summary>Adds a specified set of item changes to the group that currently open</summary>
      <param name="changes">A set of item changes to add to the group that is currently open.</param>
      <exception cref="T:Microsoft.Synchronization.ChangeBatchIsReadOnlyException">The change batch has already been sent to a change applier or synchronization session. Changes cannot be added to the batch after it has been sent.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="changes" /> is a null.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
      <exception cref="T:Microsoft.InvalidOperationException">One of the changes  in <paramref name="changes" /> contains a <paramref name="CreationVersion" /> that is a nullOne of the changes  in <paramref name="changes" /> contains a <paramref name="ChangeVersion" /> that is a null and its <paramref name="ChangeUnitChanges" /> is empty.—or— There is no current change group.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeBatchBase.BatchWorkEstimate">
      <summary>Gets or sets the total work estimate for the change batch.</summary>
      <returns>The total work estimate for the change batch. The default is 0.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has already been disposed.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.BeginOrderedGroup(Microsoft.Synchronization.SyncId)">
      <summary>Opens an ordered group in the change batch. This group is ordered by item ID.</summary>
      <param name="itemId">The closed lower bound of item IDs for this ordered group. To specify a lower bound of 0, use <see cref="P:Microsoft.Synchronization.SyncIdFormat.Zero" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemId" /> is a null.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatch" /> has already been disposed.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">The change batch contains a group that was started but not ended.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeBatchIsReadOnlyException">The change batch has already been sent to a change applier or synchronization session. Changes cannot be added to the batch after it has been sent.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeBatchBase.CompatibilityLevel">
      <summary>Gets or sets the version of Sync Framework components that can be used with this object.</summary>
      <returns>The version of Sync Framework components that can be used with this object.</returns>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">The property is set to a value that is less than the value of <see cref="P:Microsoft.Synchronization.SyncKnowledge.MinimumCompatibilityLevel" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has already been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is not a member of the <see cref="T:Microsoft.Synchronization.CompatibilityLevel" /> enumeration.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeBatchBase.DefaultCompatibilityLevel">
      <summary>Gets or sets the default compatibility level of all <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> objects.</summary>
      <returns>The default compatibility level of all <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> objects.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is not a member of the <see cref="T:Microsoft.Synchronization.CompatibilityLevel" /> enumeration.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.Dispose">
      <summary>Releases all resources used by the <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> object.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has already been disposed.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> object and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has already been disposed.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeBatchBase.DisposeAfterProcessing">
      <summary>Gets or sets a value that indicates whether the change batch object is disposed after processing finishes.</summary>
      <returns>A value that indicates whether the change batch object is disposed after processing finishes.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has already been disposed.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.EndOrderedGroup(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncKnowledge)">
      <summary>Closes a previously opened ordered group in the change batch.</summary>
      <param name="itemId">The closed upper bound of item IDs for this ordered group. To specify an upper bound of infinity, use <see cref="P:Microsoft.Synchronization.SyncIdFormat.Infinity" />.</param>
      <param name="madeWithKnowledge">The knowledge of the replica that made this group.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemId" /> or <paramref name="madeWithKnowledge" /> is a null.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">A change was encountered which required full enumeration, the current batch is the last batch, and the batch boundary is infinity.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeBatchBase.FilterKeyMap">
      <summary>Gets or set the filter key map that contains the filters tracked by the replica that originated this change batch.</summary>
      <returns>The filter key map that contains the filters tracked by the replica that originated this change batch.</returns>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">The change batch object already contains a filter key map, or a group has been started in the change batch.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.GetEnumerator">
      <summary>Gets an object that enumerates the item changes in this change batch. This method cannot be inherited.</summary>
      <returns>An object that enumerates the item changes in this change batch.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeBatchBase.IsEmpty">
      <summary>Gets a value that indicates whether the change batch contains any changes.</summary>
      <returns>True if the change batch does not contain any changes. Otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeBatchBase.IsLastBatch">
      <summary>Gets a value that indicates whether this is the last batch in the synchronization session.</summary>
      <returns>True if this is the last batch in the synchronization session. Otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeBatchBase.LearnedKnowledge">
      <summary>Gets the knowledge that the destination replica learns when the destination provider applies all the changes in this change batch.</summary>
      <returns>The knowledge that the destination replica learns when the destination provider applies all the changes in this change batch.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeBatchNeedsKnowledgeException">A group was begun but not ended on this <see cref="T:Microsoft.Synchronization.ChangeBatchBase" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeBatchBase.PrerequisiteKnowledge">
      <summary>Gets the minimum knowledge that a destination provider is required to have to process this change batch.</summary>
      <returns>The minimum knowledge that a destination provider is required to have to process this change batch.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeBatchBase.RemainingSessionWorkEstimate">
      <summary>Gets or sets the remaining work estimate for the synchronization session.</summary>
      <returns>The remaining work estimate for the synchronization session.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.Serialize">
      <summary>Serializes the change batch to an array of bytes.</summary>
      <returns>An array of bytes that contains the serialized change batch data.</returns>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">The change batch contains a group that was started but not ended.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidSerializationVersionException">The target serialization version does not support custom filters.</exception>
      <exception cref="T:Microsoft:Synchronization.InvalidOperationException">A group has been begun but not ended on this <see cref="T:Microsoft.Synchronization.ChangeBatchBase" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.SetFilterForgottenKnowledge(System.UInt32,Microsoft.Synchronization.SyncKnowledge)">
      <summary>Sets the filter forgotten knowledge for the specified filter.</summary>
      <param name="filterKey">The filter key of the filter that <paramref name="filterForgottenKnowledge" /> pertains to.</param>
      <param name="filterForgottenKnowledge">The filter forgotten knowledge of the filter identified by <paramref name="filterKey" />.</param>
      <exception cref="T:System.ArgumentException">The change batch does not contain a filter key map, or <paramref name="filterKey" /> is an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filterKey" /> is a null.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">A group has not been started in the change batch. This exception is also thrown when a filter forgotten knowledge has already been set for the filter specified by <paramref name="filterKey" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.SetLastBatch">
      <summary>Sets a value that indicates that this is the last batch in the synchronization session.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">The current change requires full enumeration, the range is already defined, and the batch boundary is not infinity.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeBatchBase.SourceForgottenKnowledge">
      <summary>Gets the forgotten knowledge of the source replica.</summary>
      <returns>The forgotten knowledge of the source replica.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.ChangeBatchBase" /> has been disposed.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an object that enumerates the item changes in this change batch.</summary>
      <returns>An object that enumerates the item changes in this change batch.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchBase.ThrowIfDisposed">
      <summary>Throws <see cref="T:System.ObjectDisposedException" /> if this object has been disposed.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeBatchIsReadOnlyException">
      <summary>The exception that is thrown when an item change or conflict is added to a <see cref="T:Microsoft.Synchronization.ChangeBatch" /> object that is read-only. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchIsReadOnlyException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchIsReadOnlyException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchIsReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchIsReadOnlyException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchIsReadOnlyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchIsReadOnlyException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchIsReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchIsReadOnlyException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeBatchNeedsFilterForgottenKnowledgeException">
      <summary>The exception that is thrown when a required filter forgotten knowledge is not set in the change batch.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchNeedsFilterForgottenKnowledgeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchNeedsFilterForgottenKnowledgeException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchNeedsFilterForgottenKnowledgeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchNeedsFilterForgottenKnowledgeException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchNeedsFilterForgottenKnowledgeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchNeedsFilterForgottenKnowledgeException" /> class contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchNeedsFilterForgottenKnowledgeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchNeedsFilterForgottenKnowledgeException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeBatchNeedsKnowledgeException">
      <summary>The exception that is thrown when a change batch object does not contain learned knowledge. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchNeedsKnowledgeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchNeedsKnowledgeException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchNeedsKnowledgeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchNeedsKnowledgeException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchNeedsKnowledgeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchNeedsKnowledgeException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeBatchNeedsKnowledgeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeBatchNeedsKnowledgeException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeCountMismatchException">
      <summary>The exception that is thrown by a change applier when the number of destination item versions does not match the number of source item changes.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeCountMismatchException.#ctor">
      <summary> Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeCountMismatchException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeCountMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeCountMismatchException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeCountMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeCountMismatchException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeCountMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeCountMismatchException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeDataAdapter">
      <summary>An abstract class that, when overridden in a derived class, converts data between a managed provider and an unmanaged provider.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeDataAdapter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeDataAdapter" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeDataAdapter.ConvertManagedToUnmanagedData(System.Object)">
      <summary>When overridden in a derived class, converts managed data to an unmanaged format.</summary>
      <returns>The data in the unmanaged format.</returns>
      <param name="managedData">The managed data to convert.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeDataAdapter.ConvertUnmanagedToManagedData(System.Object)">
      <summary>When overridden in a derived class, converts unmanaged data to a managed format.</summary>
      <returns>The data in the managed format.</returns>
      <param name="unmanagedData">The unmanaged data to convert.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeDeferredByProviderException">
      <summary>The exception that is thrown when a provider defers applying a change to the next synchronization session. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeDeferredByProviderException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeDeferredByProviderException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeDeferredByProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeDeferredByProviderException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeDeferredByProviderException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeDeferredByProviderException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeDeferredByProviderException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeDeferredByProviderException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeKind">
      <summary>Represents the type of change that is made to an item. </summary>
    </member>
    <member name="F:Microsoft.Synchronization.ChangeKind.Update">
      <summary>The change is an update.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ChangeKind.Deleted">
      <summary>The change is a delete.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ChangeKind.UnknownItem">
      <summary>The item to change is unknown to the replica.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ChangeKind.Ghost">
      <summary>The item has recently moved out of the filter.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeNeedsKnowledgeException">
      <summary>The exception that is thrown when an <see cref="T:Microsoft.Synchronization.ItemChange" /> object does not contain required knowledge.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeNeedsKnowledgeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeNeedsKnowledgeException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeNeedsKnowledgeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeNeedsKnowledgeException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeNeedsKnowledgeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeNeedsKnowledgeException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeNeedsKnowledgeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeNeedsKnowledgeException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeNotExpectedException">
      <summary>The exception that is thrown by a change applier when the order of destination item versions or change unit versions is not the same as the order of source item changes or change unit changes.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeNotExpectedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeNotExpectedException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeNotExpectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeNotExpectedException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeNotExpectedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeNotExpectedException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeNotExpectedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeNotExpectedException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeUnitChange">
      <summary>Represents a change to a change unit that is contained in an item. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeUnitChange.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncVersion)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeUnitChange" /> class. </summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="changeUnitId">The ID of the change unit.</param>
      <param name="changeUnitVersion">The version for the change unit change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="changeUnitVersion" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="changeUnitId.IsVariableLength" /> differs from <paramref name="idFormats.IsVariableLength" />,<paramref name="changeUnitId" /> is variable length and is longer than <paramref name="idFormats" />,<paramref name="changeUnitId" /> has an invalid length,—or—<paramref name="changeUnitId" /> is not variable length and is a different length than <paramref name="idFormats" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeUnitChange.ChangeUnitId">
      <summary>Gets the change unit ID.</summary>
      <returns>The change unit ID.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeUnitChange.ChangeUnitVersion">
      <summary>Gets the version for the change unit change.</summary>
      <returns>The version for the change unit change.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeUnitChange.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes the object data to a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that receives the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ChangeUnitChange.ParentChange">
      <summary>Gets or sets the item change that contains this change unit change.</summary>
      <returns>The item change that contains this change unit change.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeUnitCountMismatchException">
      <summary>The exception that is thrown by a change applier when the number of change units in a destination item version does not match the number of change units in the corresponding source item change.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeUnitCountMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeUnitCountMismatchException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeUnitCountMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeUnitCountMismatchException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeUnitCountMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeUnitCountMismatchException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeUnitCountMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeUnitCountMismatchException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeUnitListFilterInfo">
      <summary>Represents a filter that can be used to control which change units are included for items in a <see cref="T:Microsoft.Synchronization.ChangeBatch" /> object.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeUnitListFilterInfo.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,System.Collections.Generic.ICollection{Microsoft.Synchronization.SyncId},System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeUnitListFilterInfo" /> class that contains the specified ID format schema, the collection of change unit IDs that indicate which change units are included by this filter, and a value that indicates whether the filter applies to all items in the scope.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="changeUnitIds">The collection of change unit IDs that indicate which change units are included by this filter.</param>
      <param name="appliesToAllItems">true when the filter applies to all items in the scope. Otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="changeUnitIds" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="changeUnitIds" /> is empty.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeUnitListFilterInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeUnitListFilterInfo" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeUnitListFilterInfo.Deserialize(Microsoft.Synchronization.SyncIdFormatGroup,System.Byte[])">
      <summary>Creates a new <see cref="T:Microsoft.Synchronization.ChangeUnitListFilterInfo" /> object and initializes it by using serialized data.</summary>
      <returns>The newly created <see cref="T:Microsoft.Synchronization.ChangeUnitListFilterInfo" /> that was initialized by using serialized data.</returns>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="data">The serialized filter data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="data" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeUnitListFilterInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes the <see cref="T:Microsoft.Synchronization.ChangeUnitListFilterInfo" /> object data to the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that receives the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.ChangeVersionNotInKnowledgeException">
      <summary>The exception that is thrown by a change applier when the version of a source item change is not contained in the associated knowledge.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeVersionNotInKnowledgeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeVersionNotInKnowledgeException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeVersionNotInKnowledgeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeVersionNotInKnowledgeException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeVersionNotInKnowledgeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeVersionNotInKnowledgeException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ChangeVersionNotInKnowledgeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ChangeVersionNotInKnowledgeException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ClockVector">
      <summary>Represents a clock vector in a knowledge structure. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ClockVector" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.Add(Microsoft.Synchronization.IClockVectorElement)">
      <summary>Adds an element to the clock vector.</summary>
      <param name="item">The element to add to the clock vector.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> cannot be cast to an instance of <see cref="T:Microsoft.Synchronization.ClockVectorElement" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.Clear">
      <summary>Removes all items from the clock vector.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.Contains(Microsoft.Synchronization.IClockVectorElement)">
      <summary>Determines whether the clock vector contains the specified element.</summary>
      <returns>true if <paramref name="item" /> is contained in the clock vector; otherwise, false.</returns>
      <param name="item">The element to find in the clock vector.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> cannot be cast to an instance of <see cref="T:Microsoft.Synchronization.ClockVectorElement" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.CopyTo(Microsoft.Synchronization.IClockVectorElement[],System.Int32)">
      <summary>Copies the elements of the clock vector to <paramref name="array" />, starting at the index specified by <paramref name="arrayIndex" />.</summary>
      <param name="array">Clock vector elements are copied to this array.</param>
      <param name="arrayIndex">Copying starts at this index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than zero or would overflow <paramref name="array" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ClockVector.Count">
      <summary>Gets the number of elements that are contained in the clock vector.</summary>
      <returns>The number of elements that are contained in the clock vector.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.GetEnumerator">
      <summary>Returns an enumerator that iterates through the clock vector elements.</summary>
      <returns>An enumerator that iterates through the clock vector elements.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.IndexOf(Microsoft.Synchronization.IClockVectorElement)">
      <summary>Determines the index of a specific item in the clock vector element list.</summary>
      <returns>The index of <paramref name="item" /> in the clock vector element list.</returns>
      <param name="item">The element to find in the clock vector.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> cannot be cast to <see cref="T:Microsoft.Synchronization.ClockVectorElement" />. </exception>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.Insert(System.Int32,Microsoft.Synchronization.IClockVectorElement)">
      <summary>Inserts an element into the clock vector at the specified index.</summary>
      <param name="index">The value of <paramref name="item" /> is inserted at this index.</param>
      <param name="item">The element to insert into the clock vector.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> cannot be cast to <see cref="T:Microsoft.Synchronization.ClockVectorElement" />. </exception>
    </member>
    <member name="P:Microsoft.Synchronization.ClockVector.IsReadOnly">
      <summary>Gets a value that indicates whether the element list is read-only.</summary>
      <returns>true if the list is read only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ClockVector.Item(System.Int32)">
      <summary>Gets or sets the element in the clock vector that is indicated by the value of <paramref name="index" />.</summary>
      <returns>The element in the clock vector that is indicated by the value of <paramref name="index" />.</returns>
      <param name="index">The index of the element to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be cast to <see cref="T:Microsoft.Synchronization.ClockVectorElement" />. </exception>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.Remove(Microsoft.Synchronization.IClockVectorElement)">
      <summary>Removes the first occurrence of a specific element from the clock vector.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the clock vector; otherwise, false. This method also returns false when <paramref name="item" /> is not found.</returns>
      <param name="item">The element to remove from the clock vector.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> cannot be cast to <see cref="T:Microsoft.Synchronization.ClockVectorElement" />. </exception>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index.</summary>
      <param name="index">The index of the element to remove from the clock vector.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection of clock vector elements.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the clock vector element collection.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Returns a null.</summary>
      <returns>A null.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Reconstitutes the object from its XML representation.</summary>
      <param name="reader">An XML reader stream that contains the XML representation of the object.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> is a null or the tick count could not be read from a <see cref="T:Microsoft.Synchronization.ClockVectorElement" />   in <paramref name="reader" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts this object into its XML representation.</summary>
      <param name="writer">An XML writer stream to which the XML representation of the object will be written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVector.ToString">
      <summary>Returns a string that represents this object.</summary>
      <returns>The string that represents this object.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.ClockVectorElement">
      <summary>Represents a clock vector element of a knowledge structure. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVectorElement.#ctor(System.UInt32,System.UInt64)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ClockVectorElement" /> class that contains a specified replica key and tick count.</summary>
      <param name="replicaKey">The replica key for the replica that is associated with this clock vector element.</param>
      <param name="tickCount">The tick count that defines the upper bound on the range of tick counts that are contained in this clock vector element.</param>
    </member>
    <member name="P:Microsoft.Synchronization.ClockVectorElement.ReplicaKey">
      <summary>Gets or sets the replica key for the replica that is associated with this clock vector element.</summary>
      <returns>The replica key for the replica that is associated with this clock vector element.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVectorElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Returns a null.</summary>
      <returns>A null.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVectorElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Reconstitutes the object from its XML representation.</summary>
      <param name="reader">An XML reader stream that contains the XML representation of the object.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> is a null or the tick count could not be read from <paramref name="reader" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVectorElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts this object into its XML representation.</summary>
      <param name="writer">The XML representation of the object will be written to this writer stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ClockVectorElement.TickCount">
      <summary>Gets or sets the tick count that defines the upper bound on the range of tick counts that are contained in this clock vector element.</summary>
      <returns>The tick count that defines the upper bound on the range of tick counts that is contained in this clock vector element.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ClockVectorElement.ToString">
      <summary>Returns a string that represents this object.</summary>
      <returns>The string that represents this object.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.CollisionConflictResolutionPolicy">
      <summary>Represents the options for the collision conflict resolution policy to use for the synchronization session.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.CollisionConflictResolutionPolicy.ApplicationDefined">
      <summary>The change applier notifies the synchronization application of each collision conflict as it occurs, by using the <see cref="E:Microsoft.Synchronization.SyncCallbacks.ItemConstraint" /> event. The application examines the conflicting items and specifies the conflict resolution action by calling <see cref="Overload:Microsoft.Synchronization.ItemConstraintEventArgs.SetResolutionAction" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.CollisionConflictResolutionPolicy.DestinationWins">
      <summary>The change made on the destination replica always wins. Sync Framework specifies a conflict resolution action of <see cref="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.DestinationWins" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.CollisionConflictResolutionPolicy.SourceWins">
      <summary>The change made on the source replica always wins. Sync Framework specifies a conflict resolution action of <see cref="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.SourceWins" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.CollisionConflictResolutionPolicy.Merge">
      <summary>The data from the source item is combined with the destination item. Sync Framework specifies a conflict resolution action of <see cref="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.Merge" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.CollisionConflictResolutionPolicy.RenameSource">
      <summary>The change sent from the source provider is renamed so that it no longer collides with the conflicting item on the destination replica, and the source change is applied to the destination replica. Sync Framework  specifies a conflict resolution action of <see cref="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.RenameSource" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.CollisionConflictResolutionPolicy.RenameDestination">
      <summary>The conflicting item on the destination replica is renamed so that it no longer collides with the change sent from the source provider, and the source change is applied to the destination replica. Sync Framework specifies a conflict resolution action of <see cref="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.RenameDestination" />.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.CombinedFilterInfo">
      <summary>Represents information about a filter that is the combination of two or more filters.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.CombinedFilterInfo.#ctor(Microsoft.Synchronization.FilterInfo,Microsoft.Synchronization.FilterInfo,Microsoft.Synchronization.FilterCombinationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.CombinedFilterInfo" /> class that contains the specified filters and a value that indicates the way to combine them. </summary>
      <param name="firstFilterInfo">Information about one of the filters to combine.</param>
      <param name="secondFilterInfo">Information about the other filter to combine.</param>
      <param name="combinationType">Indicates the way to combine <paramref name="firstFilterInfo" /> and <paramref name="secondFilterInfo" />.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="combinationType" /> is not <see cref="F:Microsoft.Synchronization.FilterCombinationType.Intersection" />.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The ID format schema of <paramref name="firstFilterInfo" /> differs from the ID format schema of <paramref name="secondFilterInfo" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.CombinedFilterInfo.CombinationType">
      <summary>Gets a value that indicates the way the filters are combined.</summary>
      <returns>A value that indicates the way the filters are combined.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.CombinedFilterInfo.GetFilterInfo(System.UInt32)">
      <summary>Gets the filter information that is identified by the specified filter index.</summary>
      <returns>The filter information that is identified by <paramref name="filterIndex" />.</returns>
      <param name="filterIndex">An index into the list of filters that are combined by this filter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filterIndex" /> is not a valid value.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.CompatibilityLevel">
      <summary>Represents the version that components must be to operate with each other. </summary>
    </member>
    <member name="F:Microsoft.Synchronization.CompatibilityLevel.SyncFrameworkVersion1">
      <summary>Indicates a component is compatible with Sync Framework 1.0.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.CompatibilityLevel.WindowsSync">
      <summary>Indicates a component is compatible with the subset of components from Sync Framework 2.0 that is included in the Windows 7 operating system.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.CompatibilityLevel.SyncFrameworkVersion2">
      <summary>Indicates a component is compatible with Sync Framework 2.x.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.ConflictResolutionAction">
      <summary>Represents actions that are taken to resolve a specific conflict.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConflictResolutionAction.SkipChange">
      <summary>The conflict is neither resolved nor logged. It is ignored.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConflictResolutionAction.DestinationWins">
      <summary>The destination item is chosen as the resolution winner. No change is made to the destination item.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConflictResolutionAction.SourceWins">
      <summary>The source change is chosen as the resolution winner. The source change is applied to the destination. This change overwrites the destination item.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConflictResolutionAction.Merge">
      <summary>The source change is merged with the destination item.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConflictResolutionAction.SaveConflict">
      <summary>The conflict should be logged for later resolution.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.ConflictResolutionPolicy">
      <summary>Represents the options for the conflict resolution policy to use for the synchronization session. </summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConflictResolutionPolicy.ApplicationDefined">
      <summary>Delegate to the application to resolve conflicts. Setting this policy will cause <see cref="E:Microsoft.Synchronization.SyncCallbacks.ItemConflicting" /> to be fired for every conflict.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConflictResolutionPolicy.DestinationWins">
      <summary>The destination item is always chosen as the resolution winner. When a conflict occurs, no change will be made to the destination item.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConflictResolutionPolicy.SourceWins">
      <summary>The source change is always chosen as the resolution winner. When a conflict occurs, the source change is applied to the destination, overwriting the destination item.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.ConstraintConflictReason">
      <summary>Represents the reasons that a constraint conflict can occur.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConstraintConflictReason.Other">
      <summary>The item or change unit violates some other constraint of the destination replica. The provider can optionally specify the ID of the conflicting item as the conflicting item ID.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConstraintConflictReason.Collision">
      <summary>The item cannot be saved because it conflicts with another item in the store, such as an item that has the same name as an existing item. The provider must specify the ID of the destination item as the conflicting item ID.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConstraintConflictReason.NoParent">
      <summary>The item cannot be saved in the hierarchical data store because the item requires a parent item that does not exist in the store. The provider can optionally specify the ID of the missing parent as the conflicting item ID.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConstraintConflictReason.Identity">
      <summary>The source replica and the destination replica disagree about the identity of an item. For example, replica X resolves a collision conflict between items with IDs <paramref name="id1" /> and <paramref name="id2" /> by merging the items and assigning <paramref name="id1" /> to the merged item. Replica Y resolves a collision conflict between items with IDs <paramref name="id1" /> and <paramref name="id2" /> by renaming the item identified by <paramref name="id1" /> and keeping both items. Replica X sends the merged item identified by <paramref name="id1" /> and a merge tombstone that indicates that <paramref name="id2" /> has been merged into <paramref name="id1" />. The conflict on <paramref name="id1" /> is detected and resolved as a concurrency conflict. The conflict on <paramref name="id2" /> is detected and reported to the synchronization application as an identity conflict by specifying a conflict reason of <see cref="F:Microsoft.Synchronization.ConstraintConflictReason.Identity" />. The application determines whether to resolve the conflict by keeping the source change or the destination change. </summary>
    </member>
    <member name="T:Microsoft.Synchronization.ConstraintConflictResolutionAction">
      <summary>Represents actions that are taken to resolve a specific constraint conflict.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.SkipChange">
      <summary>Ignore the conflict and do not apply the change. The change applier does not pass the conflict data to the destination provider.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.DestinationWins">
      <summary>The change made on the destination replica always wins. The change applier passes the source change to the <see cref="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.SaveItemChange(Microsoft.Synchronization.SaveChangeAction,Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SaveChangeContext)" /> method and specifies a save action of <see cref="F:Microsoft.Synchronization.SaveChangeAction.DeleteAndStoreTombstone" />. The destination provider creates a tombstone for the source change. When the destination acts as the source in a later synchronization, it will enumerate a change that represents the deletion of the source item, and so remove it from the synchronization community.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.SourceWins">
      <summary>The change made on the source replica always wins. The change applier passes the change to the <see cref="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.SaveItemChange(Microsoft.Synchronization.SaveChangeAction,Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SaveChangeContext)" /> method and specifies a save action of <see cref="F:Microsoft.Synchronization.SaveChangeAction.DeleteConflictingAndSaveSourceItem" />. The source change is applied to the destination replica and the conflicting destination item is deleted from the destination replica.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.SaveConflict">
      <summary>Log the conflict and do not apply the change. The change applier passes the conflict data to the <see cref="M:Microsoft.Synchronization.INotifyingChangeApplierTarget2.SaveConstraintConflict(Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.ConstraintConflictReason,System.Object,Microsoft.Synchronization.SyncKnowledge,System.Boolean)" /> method, which saves the conflict in a conflict log. For more information on logging conflicts, see Logging and Managing Conflicts.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.Merge">
      <summary>The data from the source item is combined with the destination item. The change applier passes the source replica's change data to the <see cref="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.SaveItemChange(Microsoft.Synchronization.SaveChangeAction,Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SaveChangeContext)" /> method and specifies a save action of <see cref="F:Microsoft.Synchronization.SaveChangeAction.ChangeIdUpdateVersionAndMergeData" />. For details, see the Merging Conflicting Items section of Detecting and Resolving Constraint Conflicts.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.RenameSource">
      <summary>The change sent from the source provider is renamed so that it no longer collides with the conflicting item on the destination replica, and the source change is applied to the destination replica. The change applier passes the change to the <see cref="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.SaveItemChange(Microsoft.Synchronization.SaveChangeAction,Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SaveChangeContext)" /> method and specifies a save action of <see cref="F:Microsoft.Synchronization.SaveChangeAction.RenameSourceAndUpdateVersionAndData" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.RenameDestination">
      <summary>The conflicting item on the destination replica is renamed so that it no longer collides with the change sent from the source provider, and the source change is applied to the destination replica. The change applier passes the change to the <see cref="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.SaveItemChange(Microsoft.Synchronization.SaveChangeAction,Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SaveChangeContext)" /> method and specifies a save action of <see cref="F:Microsoft.Synchronization.SaveChangeAction.RenameDestinationAndUpdateVersionData" />.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.CreateFailuresMustBeForEntireItemException">
      <summary>The exception that is thrown by <see cref="T:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext" /> or <see cref="T:Microsoft.Synchronization.LoadChangeContext" /> when a recoverable error is recorded for a change unit change when the change represents an item creation.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.CreateFailuresMustBeForEntireItemException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.CreateFailuresMustBeForEntireItemException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.CreateFailuresMustBeForEntireItemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.CreateFailuresMustBeForEntireItemException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.CreateFailuresMustBeForEntireItemException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.CreateFailuresMustBeForEntireItemException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.CreateFailuresMustBeForEntireItemException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.CreateFailuresMustBeForEntireItemException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.CustomFilterInfo">
      <summary>Represents information about a custom filter.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.CustomFilterInfo.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.ISyncFilter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.CustomFilterInfo" /> class that contains the specified ID format schema and custom filter.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="syncFilter">A custom filter object.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.CustomFilterInfo.Filter">
      <summary>Gets the <see cref="T:Microsoft.Synchronization.ISyncFilter" /> interface that represents the custom filter.</summary>
      <returns>The <see cref="T:Microsoft.Synchronization.ISyncFilter" /> interface that represents the custom filter.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.CustomIdFormatRequiresIdGeneratorException">
      <summary>The exception that is thrown when a custom ID format is specified in the <see cref="P:Microsoft.Synchronization.SimpleProviders.SimpleSyncProvider.IdFormats" /> property of a provider, but the provider does not implement <see cref="T:Microsoft.Synchronization.SimpleProviders.ISimpleSyncProviderIdGenerator" />.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.CustomIdFormatRequiresIdGeneratorException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.CustomIdFormatRequiresIdGeneratorException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.CustomIdFormatRequiresIdGeneratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.CustomIdFormatRequiresIdGeneratorException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.CustomIdFormatRequiresIdGeneratorException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.CustomIdFormatRequiresIdGeneratorException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.CustomIdFormatRequiresIdGeneratorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.CustomIdFormatRequiresIdGeneratorException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.DuplicateItemException">
      <summary>The exception that is thrown when an attempt is made to add an entry to a replica key map, and either the replica ID or the replica key already exists in the map.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.DuplicateItemException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.DuplicateItemException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.DuplicateItemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.DuplicateItemException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.DuplicateItemException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.DuplicateItemException" /> class that contains a specified error message. </summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.DuplicateItemException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.DuplicateItemException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.DuplicateItemInMetadataStoreException">
      <summary>The exception that is thrown when a provider attempts to add an item that already exists to the metadata store.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.DuplicateItemInMetadataStoreException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.DuplicateItemInMetadataStoreException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.DuplicateItemInMetadataStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.DuplicateItemInMetadataStoreException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.DuplicateItemInMetadataStoreException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.DuplicateItemInMetadataStoreException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.DuplicateItemInMetadataStoreException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.DuplicateItemInMetadataStoreException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.FilterChange">
      <summary>Represents information about a change that causes an item to move in or out of a filter.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FilterChange.#ctor(System.Boolean,Microsoft.Synchronization.SyncVersion)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FilterChange" /> class that contains the specified value that indicates whether the item is in the filter, and the version of the change that caused the move. </summary>
      <param name="isMoveIn">true when the item is in the filter; otherwise, false.</param>
      <param name="moveVersion">The version of the change that caused the item to move in relation to the filter.</param>
    </member>
    <member name="P:Microsoft.Synchronization.FilterChange.IsMoveIn">
      <summary>Gets a value that indicates whether the item is in the filter.</summary>
      <returns>true when the item is in the filter; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FilterChange.MoveVersion">
      <summary>Gets the version of the change that caused the item to move in relation to the filter.</summary>
      <returns>The version of the change that caused the item to move in relation to the filter.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.FilterCombinationType">
      <summary>Represents the way that filters are combined.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.FilterCombinationType.Intersection">
      <summary>An item or change unit is included in the scope only if it passes all filters in the combination set.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.FilterInfo">
      <summary>When overridden in a derived class, represents information about the filter used to control the data that is included in a <see cref="T:Microsoft.Synchronization.ChangeBatch" /> object.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FilterInfo.Serialize">
      <summary>When overridden in a derived class, serializes the filter information to an array of bytes.</summary>
      <returns>A byte array that contains the filter information.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.FilteringType">
      <summary>Indicates the type of information that is included in a change batch during filtered synchronization.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.FilteringType.CurrentItemsOnly">
      <summary>The change batch includes data and metadata only for items that are currently in the filter.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.FilteringType.CurrentItemsAndVersionsForMovedOutItems">
      <summary>The change batch includes data and metadata for items that are currently in the filter, and metadata for items that have recently moved out of the filter.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.FilterKeyMap">
      <summary>Represents a mapping between filter keys and <see cref="T:Microsoft.Synchronization.ISyncFilter" /> objects.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FilterKeyMap.#ctor(Microsoft.Synchronization.SyncIdFormatGroup)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FilterKeyMap" /> class that contains the specified ID format schema. </summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FilterKeyMap.AddFilter(Microsoft.Synchronization.ISyncFilter)">
      <summary>Adds a filter to the map.</summary>
      <returns>The filter key of the newly added filter.</returns>
      <param name="syncFilter">The filter to add to the map.</param>
    </member>
    <member name="P:Microsoft.Synchronization.FilterKeyMap.Count">
      <summary>Gets the number of filters in the map.</summary>
      <returns>The number of filters in the map.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FilterKeyMap.Item(System.Int32)">
      <summary>Looks up the specified filter.</summary>
      <returns>The filter identified by <paramref name="index" />.</returns>
      <param name="index">The filter key of the filter to look up. This must be less than the value contained in <see cref="P:Microsoft.Synchronization.FilterKeyMap.Count" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid value.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.FilterRequestCallback">
      <summary>Represents the method that mediates filter negotiation between a destination provider and a source provider.</summary>
      <returns>True when the filter specified by <paramref name="filter" /> is supported by the source provider. Otherwise, false.</returns>
      <param name="filter">The filter that is specified by the destination provider. This filter is passed to the source provider to be used during change enumeration.</param>
    </member>
    <member name="T:Microsoft.Synchronization.FilterTrackingStatus">
      <summary>Represents information about whether a filter is tracked by a replica.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.FilterTrackingStatus.FilterTracked">
      <summary>The filter is tracked by the replica.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.FilterTrackingStatus.FilterNotTracked">
      <summary>The filter is not tracked by the replica.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.ForgottenKnowledge">
      <summary>Represents knowledge that has been forgotten because of tombstone cleanup.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ForgottenKnowledge.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ForgottenKnowledge.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncKnowledge)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> class that contains the specified ID format schema and synchronization knowledge.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="knowledge">Baseline knowledge, some of which will be forgotten.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formats" /> or <paramref name="knowledge" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ForgottenKnowledge.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> class by using serialized data.</summary>
      <param name="info">Serialized object data for the forgotten knowledge.</param>
      <param name="context">Contextual information about the stream source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Data could not be read from <paramref name="info" /> or the data format could not be determined.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ForgottenKnowledge.Clone">
      <summary>Creates a new <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> object and copies the forgotten knowledge into it.</summary>
      <returns>The newly created <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> object that contains the copied data.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ForgottenKnowledge.Deserialize(Microsoft.Synchronization.SyncIdFormatGroup,System.Byte[])">
      <summary>Deserializes a forgotten knowledge instance from the specified byte array. </summary>
      <returns>A new forgotten knowledge object that is filled with the deserialized data.</returns>
      <param name="idFormats">The ID format schema for the provider.</param>
      <param name="data">The serialized forgotten knowledge data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ForgottenKnowledge.ForgetTo(Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.SyncVersion)">
      <summary>Updates the forgotten knowledge to reflect that all versions less than or equal to the specified version might have been forgotten, and that corresponding tombstones might have been deleted.</summary>
      <param name="knowledge">The current knowledge of the replica that owns this forgotten knowledge object.</param>
      <param name="version"> The version of the tombstone that has been cleaned up.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="knowledge" /> or <paramref name="version" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">
        <paramref name="version" /> is less than the current minimum version.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ForgottenKnowledge.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes the forgotten knowledge to the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to receive the forgotten knowledge object data.</param>
      <param name="context">Contextual information about the stream.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.ForgottenKnowledgeNotContainedException">
      <summary>The exception that is thrown when a <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> object is not contained by its associated <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ForgottenKnowledgeNotContainedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ForgottenKnowledgeNotContainedException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ForgottenKnowledgeNotContainedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ForgottenKnowledgeNotContainedException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ForgottenKnowledgeNotContainedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ForgottenKnowledgeNotContainedException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ForgottenKnowledgeNotContainedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ForgottenKnowledgeNotContainedException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.FrameworkVersionMismatchException">
      <summary>The exception that is thrown when the Sync Framework version for the simple provider does not match the Sync Framework version of the associated metadata store.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FrameworkVersionMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FrameworkVersionMismatchException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FrameworkVersionMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FrameworkVersionMismatchException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FrameworkVersionMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FrameworkVersionMismatchException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FrameworkVersionMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FrameworkVersionMismatchException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.FullEnumerationAction">
      <summary>Represents the action to be taken by an application in response to <see cref="E:Microsoft.Synchronization.SyncCallbacks.FullEnumerationNeeded" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.FullEnumerationAction.Full">
      <summary>Perform a full enumeration.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.FullEnumerationAction.Partial">
      <summary>Perform a partial synchronization. Apply learned knowledge as single item exceptions.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.FullEnumerationAction.Abort">
      <summary>Cancel the synchronization session. All methods will throw exceptions as if they were canceled.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.FullEnumerationChangeBatch">
      <summary>Represents metadata for a set of changes for a full enumeration. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.FullEnumerationChangeBatch.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.SyncId)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FullEnumerationChangeBatch" /> class that contains the specified ID format schema, the knowledge from the destination provider, forgotten knowledge from the source provider, and the closed lower bound of the range of item IDs to enumerate.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="destinationKnowledge">The knowledge from the destination provider.</param>
      <param name="sourceForgottenKnowledge">The forgotten knowledge of the source provider.</param>
      <param name="fullEnumerationLowerBound">The closed lower bound of the range of item IDs to enumerate. This is the same lower bound as that passed by Sync Framework to <see cref="M:Microsoft.Synchronization.KnowledgeSyncProvider.GetFullEnumerationChangeBatch(System.UInt32,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncKnowledge,System.Object@)." /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" />, <paramref name="destinationKnowledge" />, <paramref name="sourceForgottenKnowledge" />, or <paramref name="fullEnumerationLowerBound" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FullEnumerationChangeBatch.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.FilterInfo)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FullEnumerationChangeBatch" /> class that contains the specified ID format schema, the knowledge from the destination provider, forgotten knowledge from the source provider, the closed lower bound of the range of item IDs to enumerate, and the filter that is used to control which changes are included in the change batch.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="destinationKnowledge">The knowledge from the destination provider.</param>
      <param name="sourceForgottenKnowledge">The forgotten knowledge of the source provider.</param>
      <param name="fullEnumerationLowerBound">The closed lower bound of the range of item IDs to enumerate. This is the same lower bound as that passed by Sync Framework to <see cref="M:Microsoft.Synchronization.KnowledgeSyncProvider.GetFullEnumerationChangeBatch(System.UInt32,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncKnowledge,System.Object@)." /></param>
      <param name="filterInfo">The filter that is used to control which changes are included in the change batch.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" />, <paramref name="destinationKnowledge" />, <paramref name="sourceForgottenKnowledge" />, <paramref name="fullEnumerationLowerBound" />, or <paramref name="filterInfo" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FullEnumerationChangeBatch.Deserialize(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.ISyncFilterDeserializer,System.Byte[])">
      <summary>Static method that creates a change batch object that is used for recovery synchronization, and initializes it by using an ID format schema, a custom filter deserializer, and data from a byte array.</summary>
      <returns>The newly created change batch object that is initialized by using the serialized data contained in <paramref name="data" />.</returns>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="syncFilterDeserializer">An object that is used to deserialize the custom filters that are contained in the serialized filter key map data.</param>
      <param name="data">The serialized change batch data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" />, <paramref name="syncFilterDeserializer" />, or <paramref name="data" /> is a null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">A problem occurred during serialization.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FullEnumerationChangeBatch.Deserialize(Microsoft.Synchronization.SyncIdFormatGroup,System.Byte[])">
      <summary>Creates a new <see cref="T:Microsoft.Synchronization.FullEnumerationChangeBatch" /> and initializes it by using serialized data.</summary>
      <returns>The newly created <see cref="T:Microsoft.Synchronization.FullEnumerationChangeBatch" /> that is initialized by using the serialized data.</returns>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="data">The serialized data that is used to initialize the change batch.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="data" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FullEnumerationChangeBatch.DestinationVersionEnumerationRangeLowerBound">
      <summary>Gets the closed lower bound on item IDs that require destination versions.</summary>
      <returns>The closed lower bound on item IDs that require destination versions.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.FullEnumerationChangeBatch" /> object has been disposed.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FullEnumerationChangeBatch.DestinationVersionEnumerationRangeUpperBound">
      <summary>Gets the closed upper bound on item IDs that require destination versions.</summary>
      <returns>The closed upper bound on item IDs that require destination versions.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.FullEnumerationChangeBatch" /> object has been disposed.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FullEnumerationChangeBatch.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes the object data to a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that receives the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FullEnumerationChangeBatch.LearnedForgottenKnowledge">
      <summary>Gets the forgotten knowledge that the destination replica learns when the destination provider applies all the changes in this change batch during recovery synchronization.</summary>
      <returns>The forgotten knowledge that the destination replica learns when the destination provider applies all the changes in this change batch during recovery synchronization.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.FullEnumerationChangeBatch" /> object has been disposed.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FullEnumerationChangeBatch.LearnedKnowledgeAfterFullEnumerationRecovery">
      <summary>Gets the knowledge the destination replica will learn after it applies all the changes in the full enumeration.</summary>
      <returns>The knowledge the destination replica will learn after it applies all the changes in the full enumeration.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.Synchronization.FullEnumerationChangeBatch" /> object has been disposed.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.FullEnumerationExpectedException">
      <summary>The exception that is thrown when the change batch to be processed by the change application service is part of a recovery synchronization, but the change application service is not in recovery synchronization mode.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FullEnumerationExpectedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FullEnumerationExpectedException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FullEnumerationExpectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FullEnumerationExpectedException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FullEnumerationExpectedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FullEnumerationExpectedException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FullEnumerationExpectedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FullEnumerationExpectedException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.FullEnumerationNeededEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Synchronization.SyncCallbacks.FullEnumerationNeeded" /> event.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FullEnumerationNeededEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FullEnumerationNeededEventArgs" /> class.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.FullEnumerationNeededEventArgs.Action">
      <summary>Gets or sets the chosen response by the event handler to the request from Sync Framework for a full enumeration synchronization.</summary>
      <returns>The chosen response by the event handler to the request from Sync Framework for a full enumeration synchronization.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is not a valid <see cref="E:Microsoft.Synchronization.FullEnumerationAction" /> member.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.IChangeDataRetriever">
      <summary>Represents the mechanism by which the destination provider retrieves item data from the source provider.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.IChangeDataRetriever.IdFormats">
      <summary>Gets the ID format schema of the provider.</summary>
      <returns>The ID format schema of the provider.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.IChangeDataRetriever.LoadChangeData(Microsoft.Synchronization.LoadChangeContext)">
      <summary>When overridden in a derived class, this method retrieves item data for a change.</summary>
      <returns>The item data for the change.</returns>
      <param name="loadChangeContext">Metadata that describes the change for which data should be retrieved.</param>
    </member>
    <member name="T:Microsoft.Synchronization.IChangeDataRetrieverAdapter">
      <summary>When overridden, adapts a change data retriever between a managed and unmanaged representation.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.IChangeDataRetrieverAdapter.ConvertManagedToUnmanaged(System.Object)">
      <summary>When overridden in a derived class, converts a managed data retriever to an unmanaged representation.</summary>
      <returns>The data retriever, converted to an unmanaged representation.</returns>
      <param name="managedRetriever">The managed data retriever to convert.</param>
    </member>
    <member name="M:Microsoft.Synchronization.IChangeDataRetrieverAdapter.ConvertUnmanagedToManaged(System.Object)">
      <summary>When overridden in a derived class, converts an unmanaged data retriever to a managed representation.</summary>
      <returns>The data retriever, converted to a managed representation.</returns>
      <param name="unmanagedRetriever">The unmanaged data retriever to convert.</param>
    </member>
    <member name="T:Microsoft.Synchronization.IChangeDataRetrieverAdapter2">
      <summary>When overridden, provides additional functionality to an <see cref="T:Microsoft.Synchronization.IChangeDataRetrieverAdapter" /> class.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.IChangeDataRetrieverAdapter2.ChangeDataAdapter">
      <summary>When overridden in a derived class, gets an object that converts data between a managed provider and an unmanaged provider.</summary>
      <returns>An object that converts data between a managed provider and an unmanaged provider.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.IClockVector">
      <summary>Represents a clock vector that defines the changes that are contained in a knowledge structure.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.IClockVectorElement">
      <summary>When overridden, represents an element of a clock vector that is contained in a knowledge structure.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.IClockVectorElement.ReplicaKey">
      <summary>When overridden in a derived class, gets or sets the replica key for the replica that is tracked by this clock vector element.</summary>
      <returns>The replica key for the replica that is tracked by this clock vector element.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.IClockVectorElement.TickCount">
      <summary>When overridden in a derived class, gets or sets the tick count that defines the upper bound on the range of tick counts that are contained in this clock vector element.</summary>
      <returns>The tick count that defines the upper bound on the range of tick counts that are contained in this clock vector element.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.IConflictLogAccess">
      <summary>When implemented by a derived class, represents access to a conflict log so that a change applier can manage conflicts in the log.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.IConflictLogAccess.DeleteConflicts(System.Collections.Generic.IEnumerable{Microsoft.Synchronization.LoggedConflict})">
      <summary>When overridden in a derived class, removes the specified conflicts from the log.</summary>
      <param name="loggedConflictsToBeDeleted">The list of conflicts to be deleted from the log.</param>
    </member>
    <member name="M:Microsoft.Synchronization.IConflictLogAccess.GetAllConflicts">
      <summary>When overridden in a derived class, gets a list that contains all of the conflicts in the log.</summary>
      <returns>A list that contains all of the conflicts in the log.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.IConflictLogAccess.GetConflictsByConflictingItemId(System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ItemChange})">
      <summary>When overridden in a derived class, gets a list that contains either all of the conflicts in the log, or only the conflicts that conflict with at least one of the items in the specified list of requested items.</summary>
      <returns>A list that contains either all of the conflicts in the log, or only the conflicts that conflict with at least one of the items in the specified list of requested items.</returns>
      <param name="conflictingItems">Each conflict in the returned list conflicts with one of the items specified in this list.</param>
    </member>
    <member name="M:Microsoft.Synchronization.IConflictLogAccess.GetItemConflicts(System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ItemChange})">
      <summary>When overridden in a derived class, gets a list that contains either all of the conflicts in the log, or only the conflicts that are identified by the specified list of requested items.</summary>
      <returns>A list that contains either all of the conflicts in the log, or only the conflicts that are identified by the specified list of requested items.</returns>
      <param name="requestedItems">Each conflict in the returned list of conflicts is identified by one of the items specified in this list.</param>
    </member>
    <member name="T:Microsoft.Synchronization.IConflictLogWriter">
      <summary>When implemented by a derived class, represents a writer that saves conflicts to a conflict log.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.IConflictLogWriter.SaveConflict(Microsoft.Synchronization.ItemChange,System.Object,Microsoft.Synchronization.SyncKnowledge)">
      <summary>When overridden in a derived class, saves information about a change that caused a concurrency conflict.</summary>
      <param name="conflictingChange">The item metadata for the conflicting change.</param>
      <param name="conflictingChangeData">The item data for the conflicting change.</param>
      <param name="conflictingChangeKnowledge">The knowledge to be learned if this change is applied. This must be saved with the change.</param>
    </member>
    <member name="M:Microsoft.Synchronization.IConflictLogWriter.SaveConstraintConflict(Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.ConstraintConflictReason,System.Object,Microsoft.Synchronization.SyncKnowledge,System.Boolean)">
      <summary>When overridden in a derived class, saves information about a change that caused a constraint conflict.</summary>
      <param name="conflictingChange">The item metadata for the conflicting change from the source provider.</param>
      <param name="conflictingItemId">The item ID of the item in the destination replica that conflicts with the item specified by <paramref name="conflictingChange" />.</param>
      <param name="reason">The reason the conflict occurred.</param>
      <param name="conflictingChangeData">The item data for the conflicting change.</param>
      <param name="conflictingChangeKnowledge">The knowledge to be learned if this change is applied. This must be saved with the change.</param>
      <param name="temporary">true if this is a temporary conflict. Otherwise, false.</param>
    </member>
    <member name="T:Microsoft.Synchronization.IFilteredReplicaNotifyingChangeApplierTarget">
      <summary>When overridden by a derived class, represents an object that can provide information about a filtered replica to a notifying change applier.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.IFilteredReplicaNotifyingChangeApplierTarget.GetNewMoveInItems(Microsoft.Synchronization.SyncKnowledge)">
      <summary>Gets a list of item IDs that identify the items that are in the filter and are not contained in the specified knowledge.</summary>
      <returns>A list of item IDs that identify the items that are in the filter and are not contained in <paramref name="baseKnowledge" />.</returns>
      <param name="baseKnowledge">The returned list of item IDs identifies items that are in the filter and are not contained in this knowledge.</param>
    </member>
    <member name="T:Microsoft.Synchronization.IFilterTrackingNotifyingChangeApplierTarget">
      <summary>When overridden by a derived class, represents an object that can provide information, about a replica that tracks filters, to a notifying change applier.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.IFilterTrackingNotifyingChangeApplierTarget.FilterKeyMap">
      <summary>When overridden in a derived class, gets the filter key map of the replica.</summary>
      <returns>The filter key map of the replica.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.IFilterTrackingNotifyingChangeApplierTarget.GetFilterForgottenKnowledge(System.UInt32)">
      <summary>When overridden in a derived class, gets the specified filter forgotten knowledge of the replica.</summary>
      <returns>The filter forgotten knowledge that is associated with the filter identified by <paramref name="filterIndex" />. This value can be a null when the filter forgotten knowledge is the same as the forgotten knowledge of the replica.</returns>
      <param name="filterIndex">The filter key of the filter that is associated with the filter forgotten knowledge to look up.</param>
    </member>
    <member name="M:Microsoft.Synchronization.IFilterTrackingNotifyingChangeApplierTarget.SaveKnowledgeWithFilterForgottenKnowledge(Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.ForgottenKnowledge[])">
      <summary>When overridden in a derived class, saves knowledge, forgotten knowledge, and a list of filter forgotten knowledge objects.</summary>
      <param name="syncKnowledge">The updated knowledge to be saved.</param>
      <param name="forgottenKnowledge">The forgotten knowledge to be saved. If this parameter is a null, existing forgotten knowledge remains unchanged and should not be replaced.</param>
      <param name="filterForgottenKnowledge">A list of filter forgotten knowledge objects to be saved. This list is ordered by the filter keys in the filter key map.</param>
    </member>
    <member name="T:Microsoft.Synchronization.IFilterTrackingProvider">
      <summary>When overridden by a derived class, represents a synchronization provider that synchronizes data to and from a replica that tracks filters.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.IFilterTrackingProvider.SpecifyTrackedFilters(Microsoft.Synchronization.RequestTrackedFilterCallback)">
      <summary>When overridden in a derived class, specifies the filters that are tracked by the destination replica.</summary>
      <param name="filterTrackingRequestCallback">A delegate that can be called to specify the filters that are tracked by the destination replica.</param>
    </member>
    <member name="M:Microsoft.Synchronization.IFilterTrackingProvider.TryAddTrackedFilter(Microsoft.Synchronization.ISyncFilter)">
      <summary>When overridden in a derived class, informs the source provider which filters are tracked by the destination replica.</summary>
      <returns>true when the source provider tracks the filter specified by <paramref name="filter" />. Otherwise, false.</returns>
      <param name="filter">A filter that is tracked by the destination replica.</param>
    </member>
    <member name="T:Microsoft.Synchronization.IncompleteReplicaKeyMapException">
      <summary>The exception that is thrown by <see cref="T:Microsoft.Synchronization.KnowledgeBuilder" /> when <see cref="P:Microsoft.Synchronization.KnowledgeBuilder.ReplicaKeyMap" /> is found to be incomplete in some way.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.IncompleteReplicaKeyMapException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.IncompleteReplicaKeyMapException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.IncompleteReplicaKeyMapException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.IncompleteReplicaKeyMapException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.IncompleteReplicaKeyMapException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.IncompleteReplicaKeyMapException" /> class that contains a specified error message. </summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.IncompleteReplicaKeyMapException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.IncompleteReplicaKeyMapException" /> that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.INotifyingChangeApplierTarget">
      <summary>Represents an object that can save item changes to a replica.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.GetDataRetriever">
      <summary>Gets an object that can be used to retrieve item data from a replica.</summary>
      <returns>An object that can be used to retrieve item data from a replica.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.GetNextTickCount">
      <summary>When overridden in a derived class, increments the tick count and returns the new tick count.</summary>
      <returns>The newly incremented tick count.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.INotifyingChangeApplierTarget.IdFormats">
      <summary>When overridden in a derived class, gets the ID format schema for the provider.</summary>
      <returns>The ID format schema for the provider.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.SaveChangeWithChangeUnits(Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SaveChangeWithChangeUnitsContext)">
      <summary>When overridden in a derived class, saves an item change that contains unit change changes to the item store.</summary>
      <param name="change">The item change to apply.</param>
      <param name="context">Information about the change to be applied.</param>
    </member>
    <member name="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.SaveConflict(Microsoft.Synchronization.ItemChange,System.Object,Microsoft.Synchronization.SyncKnowledge)">
      <summary>When overridden in a derived class, saves information about a change that caused a conflict.</summary>
      <param name="conflictingChange">The item metadata for the conflicting change.</param>
      <param name="conflictingChangeData">The item data for the conflicting change.</param>
      <param name="conflictingChangeKnowledge">The knowledge to be learned if this change is applied. This must be saved with the change.</param>
    </member>
    <member name="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.SaveItemChange(Microsoft.Synchronization.SaveChangeAction,Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SaveChangeContext)">
      <summary>When overridden in a derived class, saves an item change to the item store.</summary>
      <param name="saveChangeAction">The action to be performed for the change.</param>
      <param name="change">The item change to save.</param>
      <param name="context">Information about the change to be applied.</param>
    </member>
    <member name="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.StoreKnowledgeForScope(Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge)">
      <summary>When overridden in a derived class, stores the knowledge for the current scope.</summary>
      <param name="knowledge">The updated knowledge to be saved.</param>
      <param name="forgottenKnowledge">The forgotten knowledge to be saved.</param>
    </member>
    <member name="M:Microsoft.Synchronization.INotifyingChangeApplierTarget.TryGetDestinationVersion(Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.ItemChange@)">
      <summary>Gets the version of an item stored in the destination replica.</summary>
      <returns>true if the item was found in the destination replica; otherwise, false. </returns>
      <param name="sourceChange">The item change that is sent by the source provider.</param>
      <param name="destinationVersion">Returns an item change that contains the version of the item in the destination replica.</param>
    </member>
    <member name="T:Microsoft.Synchronization.INotifyingChangeApplierTarget2">
      <summary>When implemented by a derived class, represents additional methods on an object that can save item changes to a replica.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.INotifyingChangeApplierTarget2.SaveConstraintConflict(Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.ConstraintConflictReason,System.Object,Microsoft.Synchronization.SyncKnowledge,System.Boolean)">
      <summary>When overridden in a derived class, saves information about items that are involved in a constraint conflict.</summary>
      <param name="conflictingChange">The item metadata for the conflicting change from the source provider.</param>
      <param name="conflictingItemId">The item ID of the item in the destination replica that conflicts with the item specified by <paramref name="conflictingChange" />.</param>
      <param name="reason">The reason the conflict occurred.</param>
      <param name="conflictingChangeData">The item data for the conflicting change.</param>
      <param name="conflictingChangeKnowledge">The knowledge to be learned if this change is applied. This must be saved with the change.</param>
      <param name="temporary">true if this is a temporary conflict. Otherwise, false.</param>
    </member>
    <member name="T:Microsoft.Synchronization.InvalidFeedException">
      <summary>The exception that is thrown when a FeedSync feed is invalid.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidFeedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidFeedException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidFeedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidFeedException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidFeedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidFeedException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidFeedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidFeedException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.InvalidKnowledgeMarkerException">
      <summary>The exception that is thrown when a specified knowledge marker is not the kind of marker contained in a knowledge object.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidKnowledgeMarkerException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidKnowledgeMarkerException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidKnowledgeMarkerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidKnowledgeMarkerException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidKnowledgeMarkerException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidKnowledgeMarkerException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidKnowledgeMarkerException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidKnowledgeMarkerException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">
      <summary>The exception that is thrown when a component is passed a knowledge version that it does not support.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidKnowledgeVersionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidKnowledgeVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidKnowledgeVersionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidKnowledgeVersionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.InvalidOrderException">
      <summary>The exception that is thrown when an attempt is made to create a clock vector that contains clock vector elements that are not correctly ordered.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidOrderException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidOrderException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidOrderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidOrderException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidOrderException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidOrderException" /> class that contains a specified error message. </summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidOrderException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidOrderException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.InvalidReplicaKeyException">
      <summary>The exception that is thrown when a clock vector is added to a <see cref="T:Microsoft.Synchronization.KnowledgeBuilder" /> object, but the clock vector contains an element that contains a replica key that is not found in <see cref="P:Microsoft.Synchronization.KnowledgeBuilder.ReplicaKeyMap" />.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidReplicaKeyException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidReplicaKeyException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidReplicaKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidReplicaKeyException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidReplicaKeyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidReplicaKeyException" /> class that contains a specified error message. </summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidReplicaKeyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidReplicaKeyException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.InvalidSerializationVersionException">
      <summary>The exception that is thrown when an object is serialized, and the object contains elements that are incompatible with the specified serialization version.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidSerializationVersionException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidSerializationVersionException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidSerializationVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidSerializationVersionException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidSerializationVersionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidSerializationVersionException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidSerializationVersionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidSerializationVersionException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The message that states the error.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.InvalidSyncTimeException">
      <summary>The exception that is thrown when a <see cref="T:Microsoft.Synchronization.FeedSync.FeedClockVectorElement" /> object is created by using an invalid <see cref="P:Microsoft.Synchronization.FeedSync.FeedClockVectorElement.SyncTime" /> value. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidSyncTimeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidSyncTimeException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidSyncTimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidSyncTimeException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidSyncTimeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidSyncTimeException" /> class that contains a specified error message. </summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.InvalidSyncTimeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.InvalidSyncTimeException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.IRequestFilteredSync">
      <summary>When implemented by a derived class, represents a destination provider that can specify a filter to be used by the source provider during change enumeration.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.IRequestFilteredSync.SpecifyFilter(Microsoft.Synchronization.FilterRequestCallback)">
      <summary>When overridden in a derived class, negotiates which filter is used by the source provider during change enumeration.</summary>
      <param name="filterRequest">The delegate that is used by the destination provider to request that a filter be used by the source provider during change enumeration.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ISupportFilteredSync">
      <summary>When implemented by a derived class, represents a source provider that supports filtered change enumeration and that can negotiate the type of filter used.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ISupportFilteredSync.TryAddFilter(System.Object,Microsoft.Synchronization.FilteringType)">
      <summary>When overridden in a derived class, sets the filter that is used for change enumeration by the source provider.</summary>
      <returns>True when the filter specified by <paramref name="filter" /> is supported. Otherwise, false.</returns>
      <param name="filter">The filter that is used for change enumeration by the source provider.</param>
      <param name="filteringType">Indicates the type of information that is included in a change batch during filtered synchronization.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ISupportLastWriteTime">
      <summary>When overridden, retrieves the date and time that an item or change unit was most recently changed.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ISupportLastWriteTime.GetChangeUnitChangeTime(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId)">
      <summary>When overridden in a derived class, gets the date and time that the specified change unit was last changed.</summary>
      <returns>The date and time that the specified change unit was last changed.</returns>
      <param name="itemId">The ID of the item that contains the change unit to look up.</param>
      <param name="changeUnitId">The ID of the change unit to look up.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ISupportLastWriteTime.GetItemChangeTime(Microsoft.Synchronization.SyncId)">
      <summary>When overridden in a derived class, gets the date and time that the specified item was last changed.</summary>
      <returns>The date and time that the specified item was last changed.</returns>
      <param name="itemId">The ID of the item to look up.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ISyncFilter">
      <summary>When overridden by a derived class, represents a custom filter.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ISyncFilter.IsIdentical(Microsoft.Synchronization.ISyncFilter)">
      <summary>When overridden in a derived class, indicates whether the specified filter is the same as this filter.</summary>
      <returns>true when <paramref name="otherFilter" /> is the same as this filter. Otherwise, false.</returns>
      <param name="otherFilter">A filter to compare with this filter.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ISyncFilter.Serialize">
      <summary>When overridden by a derived class, serializes the filter to an array of bytes.</summary>
      <returns>The filter data serialized to an array of bytes.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.ISyncFilterDeserializer">
      <summary>When overridden by a derived class, deserializes custom filter information.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ISyncFilterDeserializer.Deserialize(System.Byte[])">
      <summary>When overridden in a derived class, creates an <see cref="T:Microsoft.Synchronization.ISyncFilter" /> object and initializes it by using serialized data.</summary>
      <returns>The newly created <see cref="T:Microsoft.Synchronization.ISyncFilter" /> object that is initialized by using the serialized data that is contained in <paramref name="data" />.</returns>
      <param name="data">The serialized filter data.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ItemChange">
      <summary>Represent a change to an item. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChange.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.ChangeKind,Microsoft.Synchronization.SyncVersion,Microsoft.Synchronization.SyncVersion)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemChange" /> class that contains the specified ID format schema, replica ID, item ID, change kind, creation version, and change version.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="replicaId">The ID of the replica that originated this change.</param>
      <param name="itemId">The ID of the item that was changed.</param>
      <param name="changeKind">The type of change that was made to the item.</param>
      <param name="creationVersion">The creation version of the item.</param>
      <param name="changeVersion">The change version of the item.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="changeVersion" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChange.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.ChangeKind,Microsoft.Synchronization.SyncVersion,System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ChangeUnitChange})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemChange" /> class that contains the specified ID format schema, replica ID, item ID, change kind, creation version, and change unit collection.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="replicaId">The ID of the replica that originated this change.</param>
      <param name="itemId">The ID of the item that was changed.</param>
      <param name="changeKind">The type of change that was made to the item.</param>
      <param name="creationVersion">The creation version of the item.</param>
      <param name="changeUnitChanges">The collection of changes to change units that are contained in the item.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="changeUnitChanges" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="changeUnitChanges" /> is not empty and <paramref name="changeKind" /> is <see cref="F:Microsoft.Synchronization.ChangeKind.Deleted" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChange.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncVersion,Microsoft.Synchronization.SyncVersion)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemChange" /> class that represents a merge tombstone, by using the specified ID format schema, replica ID, item ID, winning item ID, creation version, and change version.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="replicaId">The ID of the replica that originated this change.</param>
      <param name="itemId">The ID of the item before the merge occurred. This is also called the losing ID.</param>
      <param name="winnerId">The ID of the item after the merge occurred. This is also called the winning ID.</param>
      <param name="creationVersion">The creation version of the item identified by <paramref name="itemId" />.</param>
      <param name="changeVersion">The version of the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" />, <paramref name="changeVersion" />, or <paramref name="winnerId" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="replicaId" /> or <paramref name="itemId" /> or <paramref name="winnerId" /> is not of the format specified by <paramref name="idFormats" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChange.AddChangeUnitChange(Microsoft.Synchronization.ChangeUnitChange)">
      <summary>Adds a change unit change to this object.</summary>
      <param name="changeUnitChange">The change unit change to add to this object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="changeUnitChange" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="changeUnitChange" /> has a parent change.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.ItemChange" /> is a deletion, represents an item that no longer exists, or <paramref name="changeUnitChange" /> represents an unexpected change unit..</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChange.AddFilterChange(System.UInt32,Microsoft.Synchronization.FilterChange)">
      <summary>Adds information that indicates whether this change causes the item to move in or out of a specified filter.</summary>
      <param name="filterKey">The key of the filter that the item is moving into or out of.</param>
      <param name="filterChange">Information about the change in relation to the filter specified by <paramref name="filterKey" />.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filterKey" /> is an invalid value.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Filter change information already exists for <paramref name="filterKey" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.AllChangeUnitsPresent">
      <summary>Gets a value that indicates whether all change units are present in this change.</summary>
      <returns>true when all change units are present. Otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.ChangeKind">
      <summary>Gets the kind of change that is represented by this object.</summary>
      <returns>The kind of change that is represented by this object.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.ChangeUnitChanges">
      <summary>Gets the collection of change unit changes that are contained in the item change.</summary>
      <returns>The collection of change unit changes that are contained in the item change. If there are no change unit changes, an empty collection is returned.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.ChangeVersion">
      <summary>Gets the change version that is associated with this change.</summary>
      <returns>The change version that is associated with this change. If this object contains change units, a null is returned.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.CreationVersion">
      <summary>Gets the creation version that is associated with the changed item.</summary>
      <returns>The creation version that is associated with the changed item.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChange.GetFilterChange(System.UInt32,Microsoft.Synchronization.FilterTrackingStatus@,Microsoft.Synchronization.FilterChange@)">
      <summary>Gets information that indicates whether this change causes the item to move into or out of a specified filter.</summary>
      <param name="filterKey">The key of the filter to look up.</param>
      <param name="filterTrackingStatus">Returns a value that indicates whether the provider that sent this change is tracking the specified filter.</param>
      <param name="filterChange">Returns information that indicates whether this change causes the item to move into or out of the specified filter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filterKey" /> is an invalid value.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChange.GetLearnedKnowledgeWithPrerequisite(Microsoft.Synchronization.SyncKnowledge)">
      <summary>Gets the knowledge that the destination replica learns when the destination provider applies this change, based on the prerequisite knowledge that is associated with the change.</summary>
      <returns>The knowledge that the destination replica learns when the destination provider applies this change, based on the prerequisite knowledge that is associated with the change.</returns>
      <param name="destinationKnowledge">Knowledge of a change unit that is contained in this change is not added to the returned learned knowledge when <paramref name="destinationKnowledge" /> contains the prerequisite knowledge for the change unit.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:System.InvalidOperationException">The object contains data that is not valid.</exception>
      <exception cref="T:Microsoft.Synchronization.ChangeNeedsKnowledgeException">This object does not contain prerequisite knowledge.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChange.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes the <see cref="T:Microsoft.Synchronization.ItemChange" /> object data to the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object. This method cannot be inherited. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that receives the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.IsMergeTombstone">
      <summary>Gets a value that indicates whether this change is a merge tombstone.</summary>
      <returns>true when this change is a merge tombstone; otherwise, false. </returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.ItemId">
      <summary>Gets the ID of the changed item.</summary>
      <returns>The ID of the changed item.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.LearnedKnowledge">
      <summary>Gets the knowledge that a replica will learn when this change is applied to its item store.</summary>
      <returns>The knowledge that a replica will learn when this change is applied to its item store.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Microsoft.Synchronization.ItemChange.LearnedKnowledge" /> is in an invalid state. See Remarks.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.MadeWithKnowledge">
      <summary>Gets the made-with knowledge for this change.</summary>
      <returns>The made-with knowledge for this change.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.MergeTombstoneWinnerId">
      <summary>Gets the item ID that is used to identify the merged item in the synchronization community.</summary>
      <returns>The item ID that is used to identify the merged item in the synchronization community.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChange.OnDeserialization(System.Object)">
      <summary>Called after this object has been created and initialized as a result of deserialization. This method cannot be inherited.</summary>
      <param name="sender">The object that initiated the callback.</param>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.ReplicaId">
      <summary>Gets the ID of the replica that enumerated this change.</summary>
      <returns>The ID of the replica that enumerated this change.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChange.SetAllChangeUnitsPresent">
      <summary>Sets a value that indicates that all change units are present in this change.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChange.WorkEstimate">
      <summary>Gets or sets the work estimate for this change.</summary>
      <returns>The work estimate for this change.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.ItemChangeSkippedEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Synchronization.SyncCallbacks.ItemChangeSkipped" /> event. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChangeSkippedEventArgs.GetRecoverableErrorDataForChangeUnit(Microsoft.Synchronization.ChangeUnitChange)">
      <summary>Gets additional data about the recoverable error that caused the change unit change to be skipped.</summary>
      <returns>Additional data about the recoverable error that caused the change unit change to be skipped. Can be a null.</returns>
      <param name="changeUnitChange">The change unit change that was skipped.</param>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChangeSkippedEventArgs.ItemChange">
      <summary>Gets the item change that was skipped.</summary>
      <returns>The item change that was skipped.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChangeSkippedEventArgs.ItemRecoverableErrorData">
      <summary>Gets additional data about the recoverable error that caused the item to be skipped.</summary>
      <returns>Additional data about the recoverable error that caused the item to be skipped.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChangeSkippedEventArgs.ReportingProvider">
      <summary>Gets the relative position of the provider that skipped the item change.</summary>
      <returns>The relative position of the provider that skipped the item change.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChangeSkippedEventArgs.Stage">
      <summary>Gets the stage in the synchronization session when the item change was skipped.</summary>
      <returns>The stage in the synchronization session when the item change was skipped.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.ItemChangeUnitOverride">
      <summary>Represents a change unit and an associated clock vector that differs from the scope clock vector of the parent knowledge object. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChangeUnitOverride.#ctor(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.IClockVector)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemChangeUnitOverride" /> class that contains the specified item ID, change unit ID, and clock vector.</summary>
      <param name="itemId">The ID of the item that owns the change unit to override.</param>
      <param name="changeUnitId">The ID of the change unit to override.</param>
      <param name="clockVector">The associated clock vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemId" /> or <paramref name="changeUnitId" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChangeUnitOverride.ChangeUnitId">
      <summary>Gets the change unit ID.</summary>
      <returns>The change unit ID.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChangeUnitOverride.ItemId">
      <summary>Gets the item ID for the item that contains this change unit.</summary>
      <returns>The item ID for the item that contains this change unit.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChangeUnitOverride.ToString">
      <summary>Returns a string that represents this object.</summary>
      <returns>The string that represents this object.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.ItemChangingEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Synchronization.SyncCallbacks.ItemChanging" /> event.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemChangingEventArgs.#ctor(Microsoft.Synchronization.ItemChange)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemChangingEventArgs" /> class.  </summary>
      <param name="item">Metadata for the item change that is about to be applied.</param>
    </member>
    <member name="P:Microsoft.Synchronization.ItemChangingEventArgs.Item">
      <summary>Gets the metadata for the item change.</summary>
      <returns>The metadata for the item change.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.ItemConflictingEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Synchronization.SyncCallbacks.ItemConflicting" /> event.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConflictingEventArgs.DestinationChange">
      <summary>Gets the change item of the destination replica. </summary>
      <returns>The change item of the destination replica.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConflictingEventArgs.DestinationChangeData">
      <summary>Gets an object that can be used to retrieve item data for the change item from the destination replica.</summary>
      <returns>An object that can be used to retrieve item data for the change item from the destination replica.</returns>
      <exception cref="T:Microsoft.Synchronization.LoadConflictDataException">An error occurred while attempting to construct a load change context.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemConflictingEventArgs.GetResolutionAction">
      <summary>Gets the conflict resolution action.</summary>
      <returns>The conflict resolution action.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ItemConflictingEventArgs.GetResolutionAction(Microsoft.Synchronization.ChangeUnitChange)">
      <summary>Gets the conflict resolution action for the specified change unit change.</summary>
      <returns>The conflict resolution action for the specified change unit change.</returns>
      <param name="changeUnitChange">The change unit change that is associated with the returned conflict resolution action.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="changeUnitChange" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="changeUnitChange" /> is not valid.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">The source change has no <see cref="T:Microsoft.Synchronization.ChangeUnitChange" /> objects.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemConflictingEventArgs.SetResolutionAction(Microsoft.Synchronization.ChangeUnitChange,Microsoft.Synchronization.ConflictResolutionAction)">
      <summary>Sets the conflict resolution action for the specified change unit change.</summary>
      <param name="changeUnitChange">The change unit to associate with the conflict resolution action.</param>
      <param name="resolutionAction">The conflict resolution action.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemConflictingEventArgs.SetResolutionAction(Microsoft.Synchronization.ConflictResolutionAction)">
      <summary>Sets the conflict resolution action. </summary>
      <param name="resolutionAction">The conflict resolution action.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolutionAction" /> is not a valid value.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">The source change has no <see cref="T:Microsoft.Synchronization.ChangeUnitChange" /> objects.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConflictingEventArgs.SourceChange">
      <summary>Gets the change item of the source replica.</summary>
      <returns>The change item of the source replica.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConflictingEventArgs.SourceChangeData">
      <summary>Gets an object that can be used to retrieve item data for the change item from the source replica.</summary>
      <returns>An object that can be used to retrieve item data for the change item from the source replica.</returns>
      <exception cref="T:Microsoft.Synchronization.LoadConflictDataException">An error occurred while attempting to construct a load change context.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.ItemConstraintEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Synchronization.SyncCallbacks.ItemConstraint" /> event.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConstraintEventArgs.ConstraintConflictReason">
      <summary>Gets the reason that the conflict occurred.</summary>
      <returns>The reason that the conflict occurred.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConstraintEventArgs.DestinationChange">
      <summary>Gets the change metadata from the destination provider.</summary>
      <returns>The change metadata from the destination provider.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConstraintEventArgs.DestinationChangeData">
      <summary>Gets an object that either contains or can be used to retrieve item data for the change item from the destination replica.</summary>
      <returns>An object that either contains or can be used to retrieve item data for the change item from the destination replica.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConstraintEventArgs.DestinationOriginalChangeData">
      <summary>Gets an object that either contains or can be used to retrieve item data for the item in the destination replica that originally caused the conflict.</summary>
      <returns>An object that either contains or can be used to retrieve item data for the item in the destination replica that originally caused the conflict.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ItemConstraintEventArgs.GetResolutionAction">
      <summary>Gets the conflict resolution action for the conflict.</summary>
      <returns>The conflict resolution action for the conflict.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ItemConstraintEventArgs.GetResolutionAction(Microsoft.Synchronization.ChangeUnitChange)">
      <summary>Gets the conflict resolution action for the conflicting change unit change.</summary>
      <returns>The conflict resolution action for the conflicting change unit change.</returns>
      <param name="changeUnitChange">The change unit for which to retrieve the conflict resolution action.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="changeUnitChange" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="changeUnitChange" /> is not valid.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">The change does not contain change units.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConstraintEventArgs.IsTemporary">
      <summary>Gets a value that indicates whether the conflict is temporary.</summary>
      <returns>true when the conflict is temporary. Otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConstraintEventArgs.OriginalDestinationChange">
      <summary>Gets the change metadata from the destination provider for the item that originally caused the conflict.</summary>
      <returns>The change metadata from the destination provider for the item that originally caused the conflict.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ItemConstraintEventArgs.SetResolutionAction(Microsoft.Synchronization.ChangeUnitChange,Microsoft.Synchronization.ConstraintConflictResolutionAction)">
      <summary>Sets a conflict resolution action for the conflicting change unit change.</summary>
      <param name="changeUnitChange">The change unit for which to set the conflict resolution action.</param>
      <param name="resolutionAction">The conflict resolution action to set for <paramref name="changeUnitChange" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="changeUnitChange" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="changeUnitChange" /> is not valid.</exception>
      <exception cref="T:System.ArgumentException">The conflict reason is not <see cref="F:Microsoft.Synchronization.ConstraintConflictReason.Other" />, or <paramref name="resolutionAction" /> is set to a value other than <see cref="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.SkipChange" /> or <see cref="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.SaveConflict" />.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">The conflict contains no change units, or the change unit specified by <paramref name="changeUnitChange" /> cannot be found.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemConstraintEventArgs.SetResolutionAction(Microsoft.Synchronization.ConstraintConflictResolutionAction)">
      <summary>Sets a conflict resolution action for the conflict.</summary>
      <param name="resolutionAction">The conflict resolution action to set for the conflict.</param>
      <exception cref="T:System.ArgumentException">The conflict is not a collision conflict and <paramref name="resolutionAction" /> is set to a value other than <see cref="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.SkipChange" /> or <see cref="F:Microsoft.Synchronization.ConstraintConflictResolutionAction.SaveConflict" />, or when the conflict is a collision conflict and no conflict item ID has been specified.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConstraintEventArgs.SourceChange">
      <summary>Gets the change metadata from the source provider.</summary>
      <returns>The change metadata from the source provider.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemConstraintEventArgs.SourceChangeData">
      <summary>Gets an object that either contains or can be used to retrieve item data for the change item from the source replica.</summary>
      <returns>An object that either contains or can be used to retrieve item data for the change item from the source replica.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.ItemDataModifiedConcurrentlyException">
      <summary>The exception that is thrown by a synchronization provider when item data changes unexpectedly.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemDataModifiedConcurrentlyException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemDataModifiedConcurrentlyException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemDataModifiedConcurrentlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemDataModifiedConcurrentlyException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemDataModifiedConcurrentlyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemDataModifiedConcurrentlyException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemDataModifiedConcurrentlyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemDataModifiedConcurrentlyException" /> class.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ItemHasChangeUnitsException">
      <summary>The exception that is thrown when an attempt is made to get or set the <see cref="P:Microsoft.Synchronization.ItemChange.ChangeVersion" /> property on an <see cref="T:Microsoft.Synchronization.ItemChange" /> object that contains change units.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasChangeUnitsException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasChangeUnitsException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasChangeUnitsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasChangeUnitsException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasChangeUnitsException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasChangeUnitsException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasChangeUnitsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasChangeUnitsException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ItemHasNoChangeUnitsException">
      <summary>The exception that is thrown when a method is called that requires an item to have change units, but the item does not have change units.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoChangeUnitsException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoChangeUnitsException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoChangeUnitsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoChangeUnitsException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoChangeUnitsException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoChangeUnitsException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoChangeUnitsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoChangeUnitsException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ItemHasNoDataException">
      <summary>The exception that is thrown when a provider tries to load data for an item that does not exist.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoDataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoDataException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoDataException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoDataException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoDataException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ItemHasNoVersionDataException">
      <summary>The exception that is thrown when an <see cref="T:Microsoft.Synchronization.ItemChange" /> object does not have the version data that is requested.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoVersionDataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoVersionDataException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoVersionDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoVersionDataException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoVersionDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoVersionDataException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemHasNoVersionDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemHasNoVersionDataException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ItemListFilteredFullEnumerationNotSupportedException">
      <summary>The exception that is thrown by the change application service when the destination provider is using an item filter, and the change batch to be processed is part of a recovery synchronization.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemListFilteredFullEnumerationNotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemListFilteredFullEnumerationNotSupportedException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemListFilteredFullEnumerationNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemListFilteredFullEnumerationNotSupportedException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemListFilteredFullEnumerationNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemListFilteredFullEnumerationNotSupportedException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemListFilteredFullEnumerationNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemListFilteredFullEnumerationNotSupportedException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ItemListFilterInfo">
      <summary>Represents information about the filter that is used to control which item changes are included in a <see cref="T:Microsoft.Synchronization.ChangeBatch" /> object.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemListFilterInfo.#ctor(Microsoft.Synchronization.SyncIdFormatGroup)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemListFilterInfo" /> class that contains the specified ID format schema.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemListFilterInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemListFilterInfo" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
      <exception cref="T:System.SerializationException">A problem occurred while trying to get the serialization format or serialization data.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemListFilterInfo.Deserialize(Microsoft.Synchronization.SyncIdFormatGroup,System.Byte[])">
      <summary>Creates a new <see cref="T:Microsoft.Synchronization.ItemListFilterInfo" /> object and initializes it by using serialized data.</summary>
      <returns>The newly created <see cref="T:Microsoft.Synchronization.ItemListFilterInfo" /> object initialized by using the serialized data.</returns>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="data">The serialized filter data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="data" /> is a null.</exception>
      <exception cref="T:System.SerializationException">A problem occurred while trying to get the serialization format or serialization data.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ItemListFilterInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes the <see cref="T:Microsoft.Synchronization.ItemListFilterInfo" /> object data to the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that receives the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.ItemMustExistException">
      <summary>The exception that is thrown when a provider reports that an item does not exist, although the creation version of the item is contained in the knowledge from that provider.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemMustExistException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemMustExistException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemMustExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemMustExistException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemMustExistException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemMustExistException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemMustExistException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemMustExistException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ItemNotFoundInMetadataStoreException">
      <summary>The exception that is thrown when a simple provider attempts to access an item that does not have an entry in the metadata store.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemNotFoundInMetadataStoreException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemNotFoundInMetadataStoreException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemNotFoundInMetadataStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemNotFoundInMetadataStoreException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemNotFoundInMetadataStoreException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemNotFoundInMetadataStoreException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemNotFoundInMetadataStoreException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemNotFoundInMetadataStoreException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ItemNotInFeedMetadataException">
      <summary>The exception that is thrown when an attempt is made to load item data from a FeedSync feed when the item does not exist in the feed.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemNotInFeedMetadataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemNotInFeedMetadataException" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemNotInFeedMetadataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemNotInFeedMetadataException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemNotInFeedMetadataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemNotInFeedMetadataException" /> class that contains a specified error message. </summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ItemNotInFeedMetadataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemNotInFeedMetadataException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ItemOverride">
      <summary>Represents an item and an associated clock vector that differs from the scope clock vector of the parent knowledge object. This class cannot be inherited. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemOverride.#ctor(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.IClockVector)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemOverride" /> class that contains the specified item ID and clock vector.</summary>
      <param name="itemId">The ID of the item to override.</param>
      <param name="clockVector">The associated clock vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemId" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ItemOverride.ItemId">
      <summary>Gets the item ID.</summary>
      <returns>The item ID.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ItemOverride.ToString">
      <summary>Returns a string that represents this object.</summary>
      <returns>The string that represents this object.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.ItemRangeOverride">
      <summary>Represents an item ID range and an associated clock vector that differs from the scope clock vector of the parent knowledge object. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ItemRangeOverride.#ctor(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.IClockVector)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ItemRangeOverride" /> class that contains the specified item ID range bounds and clock vector.</summary>
      <param name="closedLowerBound">The lower bound of the range of item IDs to override.</param>
      <param name="closedUpperBound">The upper bound of the range of item IDs to override.</param>
      <param name="clockVector">The associated clock vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="closedLowerBound" /> or <paramref name="closedUpperBound" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ItemRangeOverride.ClosedLowerBound">
      <summary>Gets the lower bound of the range of item IDs to override.</summary>
      <returns>The lower bound of the range of item IDs to override.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.ItemRangeOverride.ClosedUpperBound">
      <summary>Gets the upper bound of the range of item IDs to override.</summary>
      <returns>The upper bound of the range of item IDs to override.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ItemRangeOverride.ToString">
      <summary>Returns a string that represents this object.</summary>
      <returns>The string that represents this object.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.KnowledgeBuilder">
      <summary>Reconstructs a <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object from its constituent parts.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeBuilder.#ctor(System.UInt32,Microsoft.Synchronization.SyncIdFormatGroup)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.KnowledgeBuilder" /> class that contains the specified knowledge version and the ID format schema of the provider.</summary>
      <param name="expectedKnowledgeVersion">The version of the knowledge to be built.</param>
      <param name="idFormats">The ID format schema of the provider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">
        <paramref name="expectedKnowledgeVersion" /> is not supported.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeBuilder.BuildForgottenKnowledge">
      <summary>Builds a <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> object from the parts that are provided by the other builder methods.</summary>
      <returns>The newly built <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> object.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeBuilder.BuildSyncKnowledge">
      <summary>Builds a <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object from the parts that are provided by the other builder methods.</summary>
      <returns>The newly built <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeBuilder.ItemChangeUnitOverrides">
      <summary>Gets the list of <see cref="T:Microsoft.Synchronization.ItemChangeUnitOverride" /> objects that are used to build the knowledge.</summary>
      <returns>The list of <see cref="T:Microsoft.Synchronization.ItemChangeUnitOverride" /> objects that are used to build the knowledge.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeBuilder.ItemOverrides">
      <summary>Gets the list of <see cref="T:Microsoft.Synchronization.ItemOverride" /> objects that are used to build the knowledge.</summary>
      <returns>The list of <see cref="T:Microsoft.Synchronization.ItemOverride" /> objects that are used to build the knowledge.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeBuilder.ItemRangeOverrides">
      <summary>Gets the list of <see cref="T:Microsoft.Synchronization.ItemRangeOverride" /> objects that are used to build the knowledge.</summary>
      <returns>The list of <see cref="T:Microsoft.Synchronization.ItemRangeOverride" /> objects that are used to build the knowledge.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeBuilder.ReplicaKeyMap">
      <summary>Gets the replica key map that is used to build the knowledge.</summary>
      <returns>The replica key map that is used to build the knowledge.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeBuilder.ScopeClockVector">
      <summary>Gets or sets the clock vector that is used to build the knowledge.</summary>
      <returns>The clock vector that is used to build the knowledge.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.KnowledgeCookie">
      <summary>Represents a lightweight, read-only representation of a knowledge object that can be used for fast comparisons.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.KnowledgeCookieComparisonResult">
      <summary>Represents the possible results when a knowledge cookie is compared with a knowledge object by using <see cref="M:Microsoft.Synchronization.SyncKnowledge.Compare(Microsoft.Synchronization.KnowledgeCookie)" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.KnowledgeCookieComparisonResult.CookieKnowledgeEqual">
      <summary>The knowledge cookie is equal to the specified knowledge.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.KnowledgeCookieComparisonResult.CookieKnowledgeIsContained">
      <summary>The knowledge cookie is contained by the specified knowledge.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.KnowledgeCookieComparisonResult.CookieKnowledgeContains">
      <summary>The knowledge cookie contains the specified knowledge.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.KnowledgeCookieComparisonResult.NotComparable">
      <summary>The knowledge cookie cannot be compared to the specified knowledge.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.KnowledgeDecreasedUnexpectedlyException">
      <summary>The exception that is thrown when synchronization knowledge decreases unexpectedly.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeDecreasedUnexpectedlyException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.KnowledgeDecreasedUnexpectedlyException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeDecreasedUnexpectedlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.KnowledgeDecreasedUnexpectedlyException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeDecreasedUnexpectedlyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.KnowledgeDecreasedUnexpectedlyException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeDecreasedUnexpectedlyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.KnowledgeDecreasedUnexpectedlyException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.KnowledgeFragmentBuilder">
      <summary>Reconstructs a <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object from its constituent parts, in the format that is compatible with <see cref="F:Microsoft.Synchronization.CompatibilityLevel.WindowsSync" /> or later.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeFragmentBuilder.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.ReplicaKeyMap)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.KnowledgeFragmentBuilder" /> class that contains the specified ID format schema and replica key map.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="replicaKeyMap">The replica key map that is used to build the knowledge.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="replicaKeyMap" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeFragmentBuilder.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncId)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.KnowledgeFragmentBuilder" /> class that contains the specified ID format schema, and a replica key map that contains only the specified local replica ID.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="localReplicaId">The replica key map contained in this object contains only this replica ID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="localReplicaId" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeFragmentBuilder.BuildForgottenKnowledge">
      <summary>Builds a <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> object from the parts that are provided by the other builder methods.</summary>
      <returns>The newly built <see cref="T:Microsoft.Synchronization.ForgottenKnowledge" /> object.</returns>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">This object was already used to build a knowledge object, no replica key map exists, or no scope range set exists.</exception>
      <exception cref="T:Microsoft.Synchronization.IncompleteReplicaKeyMapException">The replica key map that is contained in this object is incomplete.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeFragmentBuilder.BuildSyncKnowledge">
      <summary>Builds a <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object from the parts that are provided by the other builder methods.</summary>
      <returns>The newly built <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object.</returns>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">This object was already used to build a knowledge object, no replica key map exists, or no scope range set exists.</exception>
      <exception cref="T:Microsoft.Synchronization.IncompleteReplicaKeyMapException">The replica key map that is contained in this object is incomplete.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeFragmentBuilder.ColumnRangeSets">
      <summary>Gets the list of <see cref="T:Microsoft.Synchronization.RangeSet" /> objects that refer to a specific set of change units.</summary>
      <returns>The list of <see cref="T:Microsoft.Synchronization.RangeSet" /> objects that refer to a specific set of change units.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeFragmentBuilder.ReplicaKeyMap">
      <summary>Gets the replica key map that is used to build the knowledge.</summary>
      <returns>The replica key map that is used to build the knowledge.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeFragmentBuilder.ScopeRangeSet">
      <summary>Gets the <see cref="T:Microsoft.Synchronization.RangeSet" /> object that refers to all change units that do not have an entry in the <see cref="P:Microsoft.Synchronization.KnowledgeFragmentBuilder.ColumnRangeSets" /> property.</summary>
      <returns>The <see cref="T:Microsoft.Synchronization.RangeSet" /> object that refers to all change units that do not have an entry in the <see cref="P:Microsoft.Synchronization.KnowledgeFragmentBuilder.ColumnRangeSets" /> property.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.KnowledgeFragmentInspector">
      <summary>Takes a snapshot of a <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object that is in the format that is compatible with <see cref="F:Microsoft.Synchronization.CompatibilityLevel.WindowsSync" /> or later, and provides methods for inspecting the details of the knowledge.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeFragmentInspector.#ctor(Microsoft.Synchronization.SyncKnowledge)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.KnowledgeFragmentInspector" /> class that contains the specified knowledge object.</summary>
      <param name="knowledge">The knowledge object to inspect.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="knowledge" /> is not valid.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeFragmentInspector.ColumnRangeSets">
      <summary>Gets the list of <see cref="T:Microsoft.Synchronization.RangeSet" /> objects that refer to a specific set of change units.</summary>
      <returns>The list of <see cref="T:Microsoft.Synchronization.RangeSet" /> objects that refer to a specific set of change units.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeFragmentInspector.GetMarkers(Microsoft.Synchronization.MarkerType)">
      <summary>Gets a list of item IDs that are marked with the specified marker type.</summary>
      <returns>A list of item IDs that are marked with the specified marker type.</returns>
      <param name="markerType">The item IDs that are returned are marked with this marker type.</param>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeFragmentInspector.ScopeRangeSet">
      <summary>Gets the <see cref="T:Microsoft.Synchronization.RangeSet" /> object that refers to all change units that do not have an entry in the <see cref="P:Microsoft.Synchronization.KnowledgeFragmentInspector.ColumnRangeSets" /> property.</summary>
      <returns>Gets the <see cref="T:Microsoft.Synchronization.RangeSet" /> object that refers to all change units that do not have an entry in the <see cref="P:Microsoft.Synchronization.KnowledgeFragmentInspector.ColumnRangeSets" /> property.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.KnowledgeInspector">
      <summary>Takes a snapshot of a <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object and provides methods for inspecting the details of the knowledge.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeInspector.#ctor(System.UInt32,Microsoft.Synchronization.SyncKnowledge)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.KnowledgeInspector" /> class that contains the specified knowledge version and knowledge object.</summary>
      <param name="expectedKnowledgeVersion">The version of the knowledge object.</param>
      <param name="knowledge">The knowledge object to inspect.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="knowledge" /> is a null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="knowledge" /> is not initialized.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">
        <paramref name="expectedKnowledgeVersion" /> or <paramref name="knowledge.MinimumCompatibilityLevel" /> is not <see cref="F:Microsoft.Synchronization.CompatibilityLevel.SyncFrameworkVersion1" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeInspector.ItemChangeUnitOverrides">
      <summary>Gets the collection of <see cref="T:Microsoft.Synchronization.ItemChangeUnitOverride" /> objects that are contained in the knowledge.</summary>
      <returns>The collection of <see cref="T:Microsoft.Synchronization.ItemChangeUnitOverride" /> objects that are contained in the knowledge.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeInspector.ItemOverrides">
      <summary>Gets the collection of <see cref="T:Microsoft.Synchronization.ItemOverride" /> objects that are contained in the knowledge.</summary>
      <returns>The collection of <see cref="T:Microsoft.Synchronization.ItemOverride" /> objects that are contained in the knowledge.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeInspector.ItemRangeOverrides">
      <summary>Gets the collection of <see cref="T:Microsoft.Synchronization.ItemRangeOverride" /> objects that are contained in the knowledge.</summary>
      <returns>The collection of <see cref="T:Microsoft.Synchronization.ItemRangeOverride" /> objects that are contained in the knowledge.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeInspector.ReplicaKeyMap">
      <summary>Gets the replica key map that is contained in the knowledge.</summary>
      <returns>The replica key map that is contained in the knowledge.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeInspector.ScopeClockVector">
      <summary>Gets the clock vector that is contained in the knowledge.</summary>
      <returns>The clock vector that is contained in the knowledge.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.KnowledgeSyncProvider">
      <summary>When overridden by a derived class, represents a synchronization provider that uses knowledge to perform synchronization.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeSyncProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.KnowledgeSyncProvider" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeSyncProvider.BeginSession(Microsoft.Synchronization.SyncProviderPosition,Microsoft.Synchronization.SyncSessionContext)">
      <summary>When overridden in a derived class, notifies the provider that it is joining a synchronization session.</summary>
      <param name="position">The position of this provider, relative to the other provider in the session.</param>
      <param name="syncSessionContext">The current status of the corresponding session.</param>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeSyncProvider.Configuration">
      <summary>Gets the configuration settings for the provider.</summary>
      <returns>The configuration settings for the provider.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeSyncProvider.DestinationCallbacks">
      <summary>Gets an object that a synchronization application can use to register to receive notification of events that occur during synchronization.</summary>
      <returns>An object that a synchronization application can use to register to receive notification of events that occur during synchronization.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeSyncProvider.EndSession(Microsoft.Synchronization.SyncSessionContext)">
      <summary>When overridden in a derived class, notifies the provider that a synchronization session to which it was enlisted has completed.</summary>
      <param name="syncSessionContext">The current status of the corresponding session.</param>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeSyncProvider.GetChangeBatch(System.UInt32,Microsoft.Synchronization.SyncKnowledge,System.Object@)">
      <summary>When overridden in a derived class, gets a change batch that contains item metadata for items that are not contained in the specified knowledge from the destination provider.</summary>
      <returns>A change batch that contains item metadata for items that are not contained in the specified knowledge from the destination provider. Cannot be a null.</returns>
      <param name="batchSize">The number of changes to include in the change batch.</param>
      <param name="destinationKnowledge">The knowledge from the destination provider. This knowledge must be mapped by calling <see cref="M:Microsoft.Synchronization.SyncKnowledge.MapRemoteKnowledgeToLocal(Microsoft.Synchronization.SyncKnowledge)" /> on the source knowledge before it can be used for change enumeration.</param>
      <param name="changeDataRetriever">Returns an object that can be used to retrieve change data. It can be an <see cref="T:Microsoft.Synchronization.IChangeDataRetriever" /> object or a provider-specific object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeSyncProvider.GetFullEnumerationChangeBatch(System.UInt32,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncKnowledge,System.Object@)">
      <summary>When overridden in a derived class, gets a change batch that contains item metadata for items that have IDs greater than the specified lower bound, as part of a full enumeration.</summary>
      <returns>A change batch that contains item metadata for items that have IDs greater than the specified lower bound, as part of a full enumeration.</returns>
      <param name="batchSize">The number of changes to include in the change batch.</param>
      <param name="lowerEnumerationBound">The lower bound for item IDs. This method returns changes that have IDs greater than or equal to this ID value.</param>
      <param name="knowledgeForDataRetrieval">If an item change is contained in this knowledge object, data for that item already exists on the destination replica.</param>
      <param name="changeDataRetriever">Returns an object that can be used to retrieve change data. It can be an <see cref="T:Microsoft.Synchronization.IChangeDataRetriever" /> object or a be provider-specific object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeSyncProvider.GetSyncBatchParameters(System.UInt32@,Microsoft.Synchronization.SyncKnowledge@)">
      <summary>When overridden in a derived class, gets the number of item changes that will be included in change batches, and the current knowledge for the synchronization scope.</summary>
      <param name="batchSize">The number of item changes that will be included in change batches returned by this object.</param>
      <param name="knowledge">The current knowledge for the synchronization scope, or a newly created knowledge object if no current knowledge exists.</param>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeSyncProvider.IdFormats">
      <summary>When overridden in a derived class, gets the ID format schema of the provider. </summary>
      <returns>The ID format schema of the provider.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeSyncProvider.ProcessChangeBatch(Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.ChangeBatch,System.Object,Microsoft.Synchronization.SyncCallbacks,Microsoft.Synchronization.SyncSessionStatistics)">
      <summary>When overridden in a derived class, processes a set of changes by detecting conflicts and applying changes to the item store.</summary>
      <param name="resolutionPolicy">The conflict resolution policy to use when this method applies changes.</param>
      <param name="sourceChanges">A batch of changes from the source provider to be applied locally.</param>
      <param name="changeDataRetriever">An object that can be used to retrieve change data. It can be an <see cref="T:Microsoft.Synchronization.IChangeDataRetriever" /> object or a provider-specific object.</param>
      <param name="syncCallbacks">An object that receives event notifications during change application.</param>
      <param name="sessionStatistics">Tracks change statistics. For a provider that uses custom change application, this object must be updated with the results of the change application.</param>
    </member>
    <member name="M:Microsoft.Synchronization.KnowledgeSyncProvider.ProcessFullEnumerationChangeBatch(Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.FullEnumerationChangeBatch,System.Object,Microsoft.Synchronization.SyncCallbacks,Microsoft.Synchronization.SyncSessionStatistics)">
      <summary>When overridden in a derived class, processes a set of changes for a full enumeration by applying changes to the item store.</summary>
      <param name="resolutionPolicy">The conflict resolution policy to use when this method applies changes.</param>
      <param name="sourceChanges">A batch of changes from the source provider to be applied locally.</param>
      <param name="changeDataRetriever">An object that can be used to retrieve change data. It can be an <see cref="T:Microsoft.Synchronization.IChangeDataRetriever" /> object or a provider-specific object.</param>
      <param name="syncCallbacks">An object that receives event notifications during change application.</param>
      <param name="sessionStatistics">Tracks change statistics. For a provider that uses custom change application, this object must be updated with the results of the change application.</param>
    </member>
    <member name="T:Microsoft.Synchronization.KnowledgeSyncProviderConfiguration">
      <summary>Represents configuration information for a <see cref="T:Microsoft.Synchronization.KnowledgeSyncProvider" /> object.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeSyncProviderConfiguration.CollisionConflictResolutionPolicy">
      <summary>Gets or sets the collision constraint conflict resolution policy to be used for the synchronization session when this synchronization provider is the destination provider.</summary>
      <returns>The collision constraint conflict resolution policy. The default is <see cref="F:Microsoft.Synchronization.CollisionConflictResolutionPolicy.ApplicationDefined" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is not a member of the  <see cref="T:Microsoft.Synchronization.CollisionConflictResolutionPolicy" /> enumeration.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.KnowledgeSyncProviderConfiguration.ConflictResolutionPolicy">
      <summary>Gets or sets the concurrency conflict resolution policy to be used for the synchronization session when this synchronization provider is the destination provider.</summary>
      <returns>The concurrency conflict resolution policy. The default is <see cref="F:Microsoft.Synchronization.ConflictResolutionPolicy.ApplicationDefined" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is not a member of the  <see cref="T:Microsoft.Synchronization.ConflictResolutionPolicy" /> enumeration.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.LoadChangeContext">
      <summary>When overridden by a derived class, represents information about a change to be loaded from the item store.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.LoadChangeContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.LoadChangeContext" /> class. </summary>
    </member>
    <member name="P:Microsoft.Synchronization.LoadChangeContext.ItemChange">
      <summary>When overridden in a derived class, gets the change item for which the change data should be retrieved from the item store.</summary>
      <returns>The change item for which the change data should be retrieved from the item store.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.LoadChangeContext.RecordRecoverableErrorForChangeUnit(Microsoft.Synchronization.ChangeUnitChange,Microsoft.Synchronization.RecoverableErrorData)">
      <summary>When overridden in a derived class, indicates that a recoverable error occurred when data for the specified change unit was loaded from the item store.</summary>
      <param name="changeUnitChange">The change unit change that caused the error.</param>
      <param name="errorData">Additional information about the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.LoadChangeContext.RecordRecoverableErrorForItem(Microsoft.Synchronization.RecoverableErrorData)">
      <summary>When overridden in a derived class, indicates that a recoverable error occurred when data for this item was loaded from the item store.</summary>
      <param name="errorData">Additional information about the error.</param>
    </member>
    <member name="T:Microsoft.Synchronization.LoadConflictDataException">
      <summary>The exception that is thrown when the requested conflict data could not be loaded. This occurs when a recoverable error is set while data is being loaded, or if data conversion fails.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.LoadConflictDataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.LoadConflictDataException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.LoadConflictDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.LoadConflictDataException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.LoadConflictDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.LoadConflictDataException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.LoadConflictDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.LoadConflictDataException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.LoggedConflict">
      <summary>Represents metadata and data for a conflict that can be logged.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.LoggedConflict.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.ConstraintConflictReason,System.Object,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.SyncKnowledge,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.LoggedConflict" /> class that represents a constraint conflict, by using the specified ID format schema, item change metadata, conflicting item ID, constraint conflict reason, item data, conflict knowledge, made-with knowledge, and value that indicates whether the conflict is temporary.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="itemChange">The item metadata for the conflicting change from the source provider.</param>
      <param name="conflictingItemId">The item ID of the item in the destination replica that conflicts with the item specified by <paramref name="itemChange" />. Can be a null.</param>
      <param name="conflictReason">The reason the conflict occurred.</param>
      <param name="data">The item data for <paramref name="itemChange" />.</param>
      <param name="conflictKnowledge">The knowledge to be learned if this change is applied.</param>
      <param name="madeWithKnowledge">The made-with knowledge for this change. The made-with knowledge for a change is typically the knowledge that the replica had when this change was made.</param>
      <param name="temporary">true when this conflict is temporary. Otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" />, <paramref name="itemChange" />, <paramref name="data" />, or <paramref name="conflictKnowledge" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="conflictingItemId" /> is not of the format specified by <paramref name="idFormats" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.LoggedConflict.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.ItemChange,System.Object,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.SyncKnowledge)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.LoggedConflict" /> class that represents a concurrency conflict, by using the specified ID format schema, item change metadata, item data, conflict knowledge, and made-with knowledge.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="itemChange">The item metadata for the conflicting change from the source provider.</param>
      <param name="data">The item data for <paramref name="itemChange" />.</param>
      <param name="conflictKnowledge">The knowledge to be learned if this change is applied.</param>
      <param name="madeWithKnowledge">The made-with knowledge for this change. The made-with knowledge for a change is typically the knowledge that the replica had when this change was made.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" />, <paramref name="itemChange" />, <paramref name="data" />, or <paramref name="conflictKnowledge" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.ChangeData">
      <summary>Gets an object that either contains or can be used to retrieve item data.</summary>
      <returns>An object that either contains or can be used to retrieve item data.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.ChangeKind">
      <summary>Gets the type of change that caused the conflict.</summary>
      <returns>The type of change that caused the conflict.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.ChangeVersion">
      <summary>Gets the version that is associated with the change that caused the conflict.</summary>
      <returns>The version that is associated with the change that caused the conflict.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.ConflictingChangeUnits">
      <summary>Gets the change unit IDs of change units in the destination replica that conflict with change units in this item.</summary>
      <returns>The change unit IDs of change units in the destination replica that conflict with change units in this item.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.ConflictingItemId">
      <summary>Gets the item ID of the item in the destination replica that conflicts with this item, when this conflict is a constraint conflict.</summary>
      <returns>The item ID of the item in the destination replica that conflicts with this item, when this conflict is a constraint conflict.</returns>
      <exception cref="T:System.InvalidOperationException">This conflict is not a constraint conflict.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.ConflictKnowledge">
      <summary>Gets the knowledge to be learned if this change is applied.</summary>
      <returns>The knowledge to be learned if this change is applied.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.ConflictReason">
      <summary>Gets the reason the conflict occurred, when this conflict is a constraint conflict.</summary>
      <returns>The reason the conflict occurred, when this conflict is a constraint conflict.</returns>
      <exception cref="T:System.InvalidOperationException">This conflict is not a constraint conflict.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.CreationVersion">
      <summary>Gets the creation version of the source item.</summary>
      <returns>The creation version of the source item.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.IsConstraint">
      <summary>Gets a value that indicates whether this conflict is a constraint conflict.</summary>
      <returns>true when this conflict is a constraint conflict; otherwise, false. </returns>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.IsMergeTombstone">
      <summary>Gets a value that indicates whether the change that caused this conflict is a merge tombstone.</summary>
      <returns>true when the change that caused this conflict is a merge tombstone; otherwise, false. </returns>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.IsTemporary">
      <summary>Gets a value that indicates whether this conflict is temporary.</summary>
      <returns>true when this conflict is temporary. Otherwise, false. </returns>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.ItemId">
      <summary>Gets the ID of the source item that caused the conflict.</summary>
      <returns>The ID of the source item that caused the conflict.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.MergeTombstoneWinnerId">
      <summary>Gets the item ID that is used to identify the merged item in the synchronization community, when this conflict is on a merge tombstone.</summary>
      <returns>The item ID that is used to identify the merged item in the synchronization community, when this conflict is on a merge tombstone.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.LoggedConflict.ReplicaId">
      <summary>Gets the ID of the replica that originated the change that caused the conflict.</summary>
      <returns>The ID of the replica that originated the change that caused the conflict.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.MarkerType">
      <summary>Represents the type of markers contained in a <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.MarkerType.AllChangeUnitsRequired">
      <summary>Items marked with this marker type require that information for all change units in the item be added to the knowledge object.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.MarkerType.AllChangeUnitsPresent">
      <summary>Items marked with this marker type contain information for all change units in the item.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.MemoryConflictLog">
      <summary>Represents a conflict log that exists in memory.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.MemoryConflictLog.#ctor(Microsoft.Synchronization.SyncIdFormatGroup)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.MemoryConflictLog" /> class by using the specified ID format schema.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.MemoryConflictLog.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.IConflictLogAccess)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.MemoryConflictLog" /> class by using the specified ID format schema and conflict log reader.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="conflictLogReader">The conflict log reader that represents the conflict log of the provider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.MemoryConflictLog.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.IConflictLogAccess,Microsoft.Synchronization.IConflictLogWriter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.MemoryConflictLog" /> class by using the specified ID format schema, conflict log reader, and conflict log writer.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="conflictLogAccess">The conflict log reader that represents the conflict log of the provider.</param>
      <param name="conflictLogWriter">The conflict log writer that represents the conflict log of the provider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.MemoryConflictLog.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.IConflictLogWriter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.MemoryConflictLog" /> class by using the specified ID format schema and conflict log writer.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="conflictLogWriter">The conflict log writer that represents the conflict log of the provider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.MemoryConflictLog.DeleteConflicts(System.Collections.Generic.IEnumerable{Microsoft.Synchronization.LoggedConflict})">
      <summary>Removes the specified conflicts from the log.</summary>
      <param name="loggedConflictsToBeDeleted">The list of conflicts to be deleted from the log.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loggedConflictsToBeDeleted" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.MemoryConflictLog.GetAllConflicts">
      <summary>Gets a list that contains all of the conflicts in the log.</summary>
      <returns>A list that contains all of the conflicts in the log.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.MemoryConflictLog.GetConflictsByConflictingItemId(System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ItemChange})">
      <summary>Gets a list that contains either all of the conflicts in the log, or only the conflicts that conflict with at least one of the items in the specified list of requested items.</summary>
      <returns>A list that contains either all of the conflicts in the log, or only the conflicts that conflict with at least one of the items in the specified list of requested items.</returns>
      <param name="conflictingItems">Each conflict in the returned list conflicts with one of the items specified in this list.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conflictingItems" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.MemoryConflictLog.GetItemConflicts(System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ItemChange})">
      <summary>Gets a list that contains either all of the conflicts in the log, or only the conflicts that are identified by the specified list of requested items.</summary>
      <returns>A list that contains either all of the conflicts in the log, or only the conflicts that are identified by the specified list of requested items.</returns>
      <param name="requestedItems">Each conflict in the returned list of conflicts is identified by one of the items specified in this list.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedItems" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.MemoryConflictLog.InMemoryConflictLogKnowledge">
      <summary>Gets a knowledge object that contains a union of all the conflict knowledge objects that are contained in the conflict log.</summary>
      <returns>A knowledge object that contains a union of all the conflict knowledge objects that are contained in the conflict log.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.MemoryConflictLog.Persist">
      <summary>Writes the contents of the conflict log to the conflict log writer specified in the constructor.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.MemoryConflictLog.SaveConflict(Microsoft.Synchronization.ItemChange,System.Object,Microsoft.Synchronization.SyncKnowledge)">
      <summary>Saves information about a change that caused a concurrency conflict.</summary>
      <param name="conflictingChange">The item metadata for the conflicting change.</param>
      <param name="conflictingChangeData">The item data for the conflicting change.</param>
      <param name="conflictingChangeKnowledge">The knowledge to be learned if this change is applied. This must be saved with the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conflictingChange" /> or <paramref name="conflictingChangeKnowledge" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.MemoryConflictLog.SaveConstraintConflict(Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.ConstraintConflictReason,System.Object,Microsoft.Synchronization.SyncKnowledge,System.Boolean)">
      <summary>Saves information about a change that caused a constraint conflict.</summary>
      <param name="conflictingChange">The item metadata for the conflicting change from the source provider.</param>
      <param name="conflictingItemId">The item ID of the item in the destination replica that conflicts with the item specified by <paramref name="conflictingChange" />.</param>
      <param name="reason">The reason the conflict occurred.</param>
      <param name="conflictingChangeData">The item data for the conflicting change.</param>
      <param name="conflictingChangeKnowledge">The knowledge to be learned if this change is applied. This must be saved with the change.</param>
      <param name="temporary">true if this is a temporary conflict. Otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conflictingChange" /> or <paramref name="conflictingChangeKnowledge" /> is a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.MetadataStoreVersion2RequiredException">
      <summary>The exception that is thrown when a provider attempts to access a metadata store that was created in Sync Framework 1.0.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.MetadataStoreVersion2RequiredException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.MetadataStoreVersion2RequiredException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.MetadataStoreVersion2RequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.MetadataStoreVersion2RequiredException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.MetadataStoreVersion2RequiredException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.MetadataStoreVersion2RequiredException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.MetadataStoreVersion2RequiredException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.MetadataStoreVersion2RequiredException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.NegativeRangeException">
      <summary>The exception that is thrown by <see cref="M:Microsoft.Synchronization.KnowledgeBuilder.BuildSyncKnowledge" /> when an <see cref="T:Microsoft.Synchronization.ItemRangeOverride" /> object that is used to build the knowledge contains a <see cref="P:Microsoft.Synchronization.Override.ClockVector" /> property that does not contain <see cref="P:Microsoft.Synchronization.KnowledgeBuilder.ScopeClockVector" />.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.NegativeRangeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.NegativeRangeException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.NegativeRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.NegativeRangeException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.NegativeRangeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.NegativeRangeException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.NegativeRangeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.NegativeRangeException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.NewItemMustContainAllFieldsException">
      <summary>The exception that is thrown when required fields, such as an item ID, are not set for an item that is being created.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.NewItemMustContainAllFieldsException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.NewItemMustContainAllFieldsException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.NewItemMustContainAllFieldsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.NewItemMustContainAllFieldsException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.NewItemMustContainAllFieldsException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.NewItemMustContainAllFieldsException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.NewItemMustContainAllFieldsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.NewItemMustContainAllFieldsException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.NotifyingChangeApplier">
      <summary>Represents a change applier that examines a set of changes from a source provider, detects conflicts with items in the destination replica, and makes calls to a registered change applier target to save changes or save conflicts as appropriate.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplier.#ctor(Microsoft.Synchronization.SyncIdFormatGroup)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.NotifyingChangeApplier" /> class that contains the specified ID format schema.</summary>
      <param name="idFormats">The ID format schema for the provider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplier.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.NotifyingChangeApplier" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplier.ApplyChanges(Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.ChangeBatch,Microsoft.Synchronization.IChangeDataRetriever,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.INotifyingChangeApplierTarget,Microsoft.Synchronization.SyncSessionContext,Microsoft.Synchronization.SyncCallbacks)">
      <summary>Performs conflict detection, conflict handling, and change application for a batch of changes.</summary>
      <param name="resolutionPolicy">The policy to use for resolving conflicts.</param>
      <param name="sourceChanges">The batch of changes from the source provider.</param>
      <param name="changeDataRetriever">An object that can be used to retrieve item data from the source replica.</param>
      <param name="destinationKnowledge">The knowledge of the destination replica.</param>
      <param name="destinationForgottenKnowledge">The forgotten knowledge of the destination replica.</param>
      <param name="changeApplierTarget">The object that will be called to save changes and conflicts.</param>
      <param name="syncSessionState">State information about the current session. </param>
      <param name="syncCallback">Callbacks that will receive notifications about change application events.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceChanges" />, <paramref name="changeDataRetriever" />, <paramref name="destinationKnowledge" />, <paramref name="changeApplierTarget" />, or <paramref name="syncCallback" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolutionPolicy" /> is not member of the <see cref="T:Microsoft.Synchronization.ConflictResolutionPolicy" /> enumeration.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="sourceChanges" /> has some forgotten knowledge which is in a different format than that of <paramref name="destinationKnowledge" />—or— <paramref name="destinationForgottenKnowledge" /> was given and has a different format than that of <paramref name="destinationKnowledge" /></exception>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplier.ApplyChanges(Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.ChangeBatch,Microsoft.Synchronization.IChangeDataRetriever,System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ItemChange},Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.INotifyingChangeApplierTarget,Microsoft.Synchronization.SyncSessionContext,Microsoft.Synchronization.SyncCallbacks)">
      <summary>Performs conflict detection, conflict handling, and change application for a batch of changes.</summary>
      <param name="resolutionPolicy">The policy to use for resolving conflicts.</param>
      <param name="sourceChanges">The batch of changes from the source provider.</param>
      <param name="changeDataRetriever">An object that can be used to retrieve item data from the source replica.</param>
      <param name="destinationVersions">A batch of changes that contains the versions of items that are stored in the destination replica. These items correspond to the items in <paramref name="sourceChanges" />.</param>
      <param name="destinationKnowledge">The knowledge of the destination replica.</param>
      <param name="destinationForgottenKnowledge">The forgotten knowledge of the destination replica.</param>
      <param name="changeApplierTarget">The object that will be called to save changes and conflicts.</param>
      <param name="syncSessionState">State information about the current session. </param>
      <param name="syncCallback">Callbacks that will receive notifications about change application events.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceChanges" />, <paramref name="changeDataRetriever" />, <paramref name="destinationKnowledge" />, <paramref name="changeApplierTarget" />, or <paramref name="syncCallback" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolutionPolicy" /> is not member of the <see cref="T:Microsoft.Synchronization.ConflictResolutionPolicy" /> enumeration.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="sourceChanges" /> has some forgotten knowledge which is in a different format than that of <paramref name="destinationKnowledge" />—or— <paramref name="destinationForgottenKnowledge" /> was given and has a different format than that of <paramref name="destinationKnowledge" /></exception>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplier.ApplyChanges(Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.CollisionConflictResolutionPolicy,Microsoft.Synchronization.ChangeBatch,Microsoft.Synchronization.IChangeDataRetriever,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.INotifyingChangeApplierTarget,Microsoft.Synchronization.IConflictLogAccess,Microsoft.Synchronization.SyncSessionContext,Microsoft.Synchronization.SyncCallbacks)">
      <summary>Performs conflict detection, concurrency conflict handling, constraint conflict handling, change application, and conflict log management for a batch of changes.</summary>
      <param name="resolutionPolicy">The policy to use for resolving conflicts.</param>
      <param name="collisionConflictResolutionPolicy">The policy to use for resolving collision constraint conflicts.</param>
      <param name="sourceChanges">The batch of changes from the source provider.</param>
      <param name="changeDataRetriever">An object that can be used to retrieve item data from the source replica.</param>
      <param name="destinationKnowledge">The knowledge of the destination replica.</param>
      <param name="destinationForgottenKnowledge">The forgotten knowledge of the destination replica.</param>
      <param name="changeApplierTarget">The object that will be called to save changes and conflicts.</param>
      <param name="conflictLogAccess">The conflict log where deferred conflicts and temporary conflicts are stored.</param>
      <param name="syncSessionState">State information about the current session. </param>
      <param name="syncCallback">Callbacks that will receive notifications about change application events.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceChanges" />, <paramref name="changeDataRetriever" />, <paramref name="destinationKnowledge" />, <paramref name="changeApplierTarget" />, or <paramref name="syncCallback" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolutionPolicy" /> is not member of the <see cref="T:Microsoft.Synchronization.ConflictResolutionPolicy" /> enumeration—or—<paramref name="collisionResolutionPolicy" /> is not a member of the <see cref="T:Microsoft.Synchronization.CollisionConflictResolutionPolicy" /> enumeration.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="sourceChanges" /> has some forgotten knowledge which is in a different format than that of <paramref name="destinationKnowledge" />—or— <paramref name="destinationForgottenKnowledge" /> was given and has a different format than that of <paramref name="destinationKnowledge" /></exception>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplier.ApplyChanges(Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.CollisionConflictResolutionPolicy,Microsoft.Synchronization.ChangeBatch,Microsoft.Synchronization.IChangeDataRetriever,System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ItemChange},Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.INotifyingChangeApplierTarget,Microsoft.Synchronization.IConflictLogAccess,Microsoft.Synchronization.SyncSessionContext,Microsoft.Synchronization.SyncCallbacks)">
      <summary>Performs conflict detection, concurrency conflict handling, constraint conflict handling, change application, and conflict log management for a batch of changes.</summary>
      <param name="resolutionPolicy">The policy to use for resolving conflicts.</param>
      <param name="collisionConflictResolutionPolicy">The policy to use for resolving collision constraint conflicts.</param>
      <param name="sourceChanges">The batch of changes from the source provider.</param>
      <param name="changeDataRetriever">An object that can be used to retrieve item data from the source replica.</param>
      <param name="destinationVersions">A batch of changes that contains the versions of items that are stored in the destination replica. These items correspond to the items in <paramref name="sourceChanges" />.</param>
      <param name="destinationKnowledge">The knowledge of the destination replica.</param>
      <param name="destinationForgottenKnowledge">The forgotten knowledge of the destination replica.</param>
      <param name="changeApplierTarget">The object that will be called to save changes and conflicts.</param>
      <param name="conflictLogAccess">The conflict log where deferred conflicts and temporary conflicts are stored.</param>
      <param name="syncSessionState">State information about the current session. </param>
      <param name="syncCallback">Callbacks that will receive notifications about change application events.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceChanges" />, <paramref name="changeDataRetriever" />, <paramref name="destinationKnowledge" />, <paramref name="changeApplierTarget" />, or <paramref name="syncCallback" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolutionPolicy" /> is not member of the <see cref="T:Microsoft.Synchronization.ConflictResolutionPolicy" /> enumeration—or—<paramref name="collisionResolutionPolicy" /> is not a member of the <see cref="T:Microsoft.Synchronization.CollisionConflictResolutionPolicy" /> enumeration.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="sourceChanges" /> has some forgotten knowledge which is in a different format than that of <paramref name="destinationKnowledge" />—or— <paramref name="destinationForgottenKnowledge" /> was given and has a different format than that of <paramref name="destinationKnowledge" /></exception>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplier.ApplyFullEnumerationChanges(Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.CollisionConflictResolutionPolicy,Microsoft.Synchronization.FullEnumerationChangeBatch,Microsoft.Synchronization.IChangeDataRetriever,System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ItemChange},Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.INotifyingChangeApplierTarget,Microsoft.Synchronization.IConflictLogAccess,Microsoft.Synchronization.SyncSessionContext,Microsoft.Synchronization.SyncCallbacks)">
      <summary>Performs conflict detection, concurrency conflict handling, constraint conflict handling, change application, and conflict log management for a batch of changes, as part of a recovery synchronization.</summary>
      <param name="resolutionPolicy">The policy to use for resolving conflicts.</param>
      <param name="collisionConflictResolutionPolicy">The policy to use for resolving collision constraint conflicts.</param>
      <param name="sourceChanges">The batch of changes from the source provider.</param>
      <param name="changeDataRetriever">An object that can be used to retrieve item data from the source replica.</param>
      <param name="destinationVersions">A batch of changes that contains the versions of items that are stored in the destination replica. These items correspond to the items in <paramref name="sourceChanges" />.</param>
      <param name="destinationKnowledge">The knowledge of the destination replica.</param>
      <param name="destinationForgottenKnowledge">The forgotten knowledge of the destination replica.</param>
      <param name="changeApplierTarget">The object that will be called to save changes and conflicts.</param>
      <param name="conflictLogAccess">The conflict log where deferred conflicts and temporary conflicts are stored.</param>
      <param name="syncSessionState">State information about the current session. </param>
      <param name="syncCallback">Callbacks that will receive notifications about change application events.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceChanges" />, <paramref name="changeDataRetriever" />, <paramref name="destinationKnowledge" />, <paramref name="changeApplierTarget" />, or <paramref name="syncCallback" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolutionPolicy" /> is not member of the <see cref="T:Microsoft.Synchronization.ConflictResolutionPolicy" /> enumeration—or—<paramref name="collisionResolutionPolicy" /> is not a member of the <see cref="T:Microsoft.Synchronization.CollisionConflictResolutionPolicy" /> enumeration.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="sourceChanges" /> has some forgotten knowledge which is in a different format than that of <paramref name="destinationKnowledge" />—or— <paramref name="destinationForgottenKnowledge" /> was given and has a different format than that of <paramref name="destinationKnowledge" /></exception>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplier.ApplyFullEnumerationChanges(Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.FullEnumerationChangeBatch,Microsoft.Synchronization.IChangeDataRetriever,System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ItemChange},Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.ForgottenKnowledge,Microsoft.Synchronization.INotifyingChangeApplierTarget,Microsoft.Synchronization.SyncSessionContext,Microsoft.Synchronization.SyncCallbacks)">
      <summary>Performs conflict detection, conflict handling, and change application for a batch of changes as part of a recovery synchronization.</summary>
      <param name="resolutionPolicy">The policy to use for resolving conflicts.</param>
      <param name="sourceChanges">The batch of changes from the source provider.</param>
      <param name="changeDataRetriever">An object that can be used to retrieve item data from the source replica.</param>
      <param name="destinationVersions">A batch of changes that contains the versions of items that are stored in the destination replica. These items correspond to the items in <paramref name="sourceChanges" />.</param>
      <param name="destinationKnowledge">The knowledge of the destination replica.</param>
      <param name="destinationForgottenKnowledge">The forgotten knowledge of the destination replica.</param>
      <param name="changeApplierTarget">The object that will be called to save changes and conflicts.</param>
      <param name="syncSessionState">State information about the current session. </param>
      <param name="syncCallback">Callbacks that will receive notifications about change application events.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceChanges" />, <paramref name="changeDataRetriever" />, <paramref name="destinationKnowledge" />, <paramref name="changeApplierTarget" />, <paramref name="syncCallback" />, or <paramref name="destinationVersions" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolutionPolicy" /> is not member of the <see cref="T:Microsoft.Synchronization.ConflictResolutionPolicy" /> enumeration.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="sourceChanges" /> has some forgotten knowledge which is in a different format than that of <paramref name="destinationKnowledge" />—or— <paramref name="destinationForgottenKnowledge" /> was given and has a different format than that of <paramref name="destinationKnowledge" /></exception>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplier.GetChangeApplierInfo">
      <summary>Serializes the change applier data into a byte array.</summary>
      <returns>The byte array that contains the serialized change applier data.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplier.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes this change applier to the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that receives the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplier.LoadChangeApplierInfo(System.Byte[])">
      <summary>Loads change applier data from a byte array that contains serialized data from another change applier.</summary>
      <param name="changeApplierInfo">Change applier data that is obtained by calling <see cref="M:Microsoft.Synchronization.NotifyingChangeApplier.LoadChangeApplierInfo(System.Byte[])" /> on another change applier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="changeApplierInfo" /> is a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.NotifyingChangeApplierIChangeDataRetrieverAdapter">
      <summary>Represents an adapter that can convert between a managed <see cref="T:Microsoft.Synchronization.IChangeDataRetriever" /> and an unmanaged ISynchronousDataRetriever.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplierIChangeDataRetrieverAdapter.#ctor(Microsoft.Synchronization.ChangeDataAdapter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.NotifyingChangeApplierIChangeDataRetrieverAdapter" /> class that contains the specified change data adapter.</summary>
      <param name="changeDataAdapter">A change data adapter that can convert change data between its managed and unmanaged representations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="changeDataAdapter" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.NotifyingChangeApplierIChangeDataRetrieverAdapter.ChangeDataAdapter">
      <summary>Gets an object that converts change data between its managed and unmanaged representations.</summary>
      <returns>An object that converts change data between its managed and unmanaged representations.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplierIChangeDataRetrieverAdapter.ConvertManagedToUnmanaged(System.Object)">
      <summary>Converts a managed <see cref="T:Microsoft.Synchronization.IChangeDataRetriever" /> to an unmanaged ISynchronousDataRetriever. </summary>
      <returns>The unmanaged ISynchronousDataRetriever object.</returns>
      <param name="managedRetriever">The managed <see cref="T:Microsoft.Synchronization.IChangeDataRetriever" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="managedRetriever" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="managedRetriever" /> is not an <see cref="T:Microsoft.System.IChangeDataRetriever" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.NotifyingChangeApplierIChangeDataRetrieverAdapter.ConvertUnmanagedToManaged(System.Object)">
      <summary>Converts an unmanaged ISynchronousDataRetriever to a managed <see cref="T:Microsoft.Synchronization.IChangeDataRetriever" />.</summary>
      <returns>The managed <see cref="T:Microsoft.Synchronization.IChangeDataRetriever" /> object.</returns>
      <param name="unmanagedRetriever">The unmanaged 3a85a836-6626-41f8-bce7-de49e1c015c0 ISynchronousDataRetriever  object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unmanagedRetriever" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unmanagedRetriever" /> is neither an <see cref="T:Microsoft.System.ISynchronousDataRetriever" /> nor an <see cref="T:Microsoft.System.IAsynchronousDataRetriever" />.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.ObjectNeedsStateException">
      <summary>The exception that is thrown when a <see cref="T:Microsoft.Synchronization.SyncSessionContext" /> object is required and none is specified.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ObjectNeedsStateException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ObjectNeedsStateException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ObjectNeedsStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ObjectNeedsStateException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ObjectNeedsStateException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ObjectNeedsStateException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ObjectNeedsStateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ObjectNeedsStateException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.OptimisticConcurrencyException">
      <summary>The exception that is thrown when a metadata store update fails because of a concurrent update.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.OptimisticConcurrencyException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.OptimisticConcurrencyException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.OptimisticConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.OptimisticConcurrencyException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.OptimisticConcurrencyException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.OptimisticConcurrencyException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.Override">
      <summary>When overridden by a derived class, represents a synchronization entity and an associated clock vector that differs from the scope clock vector of the parent knowledge object.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.Override.#ctor(Microsoft.Synchronization.IClockVector)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.Override" /> class that contains the specified clock vector.</summary>
      <param name="clockVector">The clock vector that is associated with this override.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clockVector" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.Override.ClockVector">
      <summary>Gets or sets the clock vector that is associated with this override.</summary>
      <returns>The clock vector that is associated with this override.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.ProviderVersionMismatchException">
      <summary>The exception that is thrown when the version of the simple provider returned by <see cref="M:Microsoft.Synchronization.SimpleProviders.SimpleSyncProvider.GetProviderVersion" /> does not match the provider version of the associated metadata store returned by <see cref="M:Microsoft.Synchronization.MetadataStorage.ReplicaMetadata.GetProviderVersion" />.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ProviderVersionMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ProviderVersionMismatchException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ProviderVersionMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ProviderVersionMismatchException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ProviderVersionMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ProviderVersionMismatchException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ProviderVersionMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ProviderVersionMismatchException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.Range">
      <summary>Represents a range of item IDs, and the clock vector that defines what is known about the items in the range.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.Range.#ctor(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.IClockVector)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.Range" /> class that contains the specified closed lower bound item ID and a clock vector that defines what is known about the items in the range.</summary>
      <param name="itemId">The closed lower bound on the item IDs in the range.</param>
      <param name="clockVector">A clock vector that defines what is known about the items in the range.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.Range.ClockVector">
      <summary>Gets the clock vector that defines what is known about the items in the range.</summary>
      <returns>The clock vector that defines what is known about the items in the range.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.Range.ItemId">
      <summary>Gets the closed lower bound of item IDs in this range.</summary>
      <returns>The closed lower bound of item IDs in this range.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.RangeOutOfOrderException">
      <summary>The exception that is thrown when a range of items is not in the expected order, or when a range override is specified incorrectly.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.RangeOutOfOrderException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RangeOutOfOrderException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.RangeOutOfOrderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RangeOutOfOrderException" /> class by using serialized data. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.RangeOutOfOrderException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RangeOutOfOrderException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.RangeOutOfOrderException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RangeOutOfOrderException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.RangeSet">
      <summary>Represents a set of <see cref="T:Microsoft.Synchronization.Range" /> objects, each of which contains knowledge about a set of change units within a range of items.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.RangeSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RangeSet" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.RangeSet.AppendRange(Microsoft.Synchronization.Range)">
      <summary>Adds the specified <see cref="T:Microsoft.Synchronization.Range" /> object to the end of the list.</summary>
      <param name="range">The <see cref="T:Microsoft.Synchronization.Range" /> object to add to the end of the list.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.RangeOutOfOrderException">The closed lower bound contained in <paramref name="range" /> is less than the closed lower bound specified in the previous range in the list.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.RangeSet.GetEnumerator">
      <summary>Gets an object that can be used to enumerate the list of <see cref="T:Microsoft.Synchronization.Range" /> objects.</summary>
      <returns>An object that can be used to enumerate the list of <see cref="T:Microsoft.Synchronization.Range" /> objects.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.RangeSet.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gets an object that can be used to enumerate the list of <see cref="T:Microsoft.Synchronization.Range" /> objects.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the range set collection.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.RecoverableErrorData">
      <summary>Represents information about a recoverable error. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.RecoverableErrorData.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RecoverableErrorData" /> class that contains the specified exception that caused the error.</summary>
      <param name="exception">The exception that caused the error.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.RecoverableErrorData.#ctor(System.Exception,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RecoverableErrorData" /> class that contains the specified exception that caused the error, the display name of the item that caused the error, and a description of the error.</summary>
      <param name="exception">The exception that caused the error.</param>
      <param name="itemDisplayName">The display name of the item that caused the error.</param>
      <param name="errorDescription">The description of the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.RecoverableErrorData.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RecoverableErrorData" /> class that contains the specified HRESULT that is associated with the error.</summary>
      <param name="hresult">The HRESULT that is associated with the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.RecoverableErrorData.#ctor(System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RecoverableErrorData" /> class that contains the specified HRESULT that is associated with the error, the display name of the item that caused the error, and a description of the error.</summary>
      <param name="hresult">The HRESULT that is associated with the error.</param>
      <param name="itemDisplayName">The display name of the item that caused the error.</param>
      <param name="errorDescription">The description of the error.</param>
    </member>
    <member name="P:Microsoft.Synchronization.RecoverableErrorData.ErrorDescription">
      <summary>Gets the description of the error.</summary>
      <returns>The description of the error.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.RecoverableErrorData.HResult">
      <summary>Gets the HRESULT that is associated with the error. An HRESULT is a coded numerical value that is assigned to a specific exception.</summary>
      <returns>The HRESULT that is associated with the error.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.RecoverableErrorData.ItemDisplayName">
      <summary>Gets the display name of the item that caused the error.</summary>
      <returns>The display name of the item that caused the error.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.RecoverableErrorMustFailEntireItemException">
      <summary>The exception that is thrown when a recoverable error is set at the change unit level rather than at the item level.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.RecoverableErrorMustFailEntireItemException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RecoverableErrorMustFailEntireItemException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.RecoverableErrorMustFailEntireItemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RecoverableErrorMustFailEntireItemException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.RecoverableErrorMustFailEntireItemException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RecoverableErrorMustFailEntireItemException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.RecoverableErrorMustFailEntireItemException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.RecoverableErrorMustFailEntireItemException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.ReplicaKeyMap">
      <summary>Represents a mapping between replica keys and replica IDs.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaKeyMap.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncId)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ReplicaKeyMap" /> class by using the specified ID format schema and associated replica ID.</summary>
      <param name="idFormat">The ID format schema of the provider.</param>
      <param name="replicaId">The ID of the replica associated with this map.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormat" /> or <paramref name="replicaId" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaKeyMap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ReplicaKeyMap" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
      <exception cref="T:System.Runtime.SerializationException">Data or format information could not be retrieved from <paramref name="info" />.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The format of info differs from that of this <see cref="T:Microsoft.Synchronization.ReplicaKeyMap" /> object.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.ReplicaKeyMap.Count">
      <summary>Gets the number of replica key and ID pairs that are contained in the replica key map.</summary>
      <returns>The number of replica key and ID pairs that are contained in the replica key map.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaKeyMap.Deserialize(Microsoft.Synchronization.SyncIdFormatGroup,System.Byte[])">
      <summary>Creates a new <see cref="T:Microsoft.Synchronization.ReplicaKeyMap" /> object and initializes it by using serialized data.</summary>
      <returns>The newly created <see cref="T:Microsoft.Synchronization.ReplicaKeyMap" /> object that is initialized by using the serialized data.</returns>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="data">The serialized object data that is used to initialize the new map object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="data" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">Some formats in <paramref name="idFormats" /> differ from that of this <see cref="T:Microsoft.Synchronization.ReplicaKeyMap" /> object.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaKeyMap.FindOrAddReplicaKey(Microsoft.Synchronization.SyncId)">
      <summary>Adds entries to or finds entries in the replica key map.</summary>
      <returns>The key of the replica in the map. If an entry for <paramref name="replicaId" /> does not exist in the map, an entry is created and a new key is assigned to it.</returns>
      <param name="replicaId">The ID of the replica to add or find.</param>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="replicaId" /> is not of the format that the provider specified.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaKeyMap.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes the replica key map data to a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that receives the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaKeyMap.LookupReplicaId(System.UInt32)">
      <summary>Gets the replica ID that corresponds to the specified replica key.</summary>
      <returns>The replica ID that corresponds to the specified replica key.</returns>
      <param name="replicaKey">The replica key to look up.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaKeyMap.LookupReplicaKey(Microsoft.Synchronization.SyncId)">
      <summary>Gets the replica key that corresponds to the specified replica ID.</summary>
      <returns>The replica key that corresponds to the specified replica ID.</returns>
      <param name="replicaId">The replica ID to look up.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaKeyMap.Serialize">
      <summary>Serializes the replica key map data to a byte array.</summary>
      <returns>The byte array containing the serialized data from the replica key map.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.ReplicaNotFoundException">
      <summary>The exception that is thrown when a specified replica cannot be found in a <see cref="T:Microsoft.Synchronization.ReplicaKeyMap" /> object.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ReplicaNotFoundException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ReplicaNotFoundException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ReplicaNotFoundException" /> class that contains a specified error message. </summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.ReplicaNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.ReplicaNotFoundException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.RequestTrackedFilterCallback">
      <summary>Informs the source provider of a filter that is tracked by the destination replica.</summary>
      <returns>true when the source provider tracks <paramref name="filter" />. Otherwise, false.</returns>
      <param name="filter">A filter that is tracked by the destination replica.</param>
    </member>
    <member name="T:Microsoft.Synchronization.SaveChangeAction">
      <summary>Represents the type of action that is indicated by a change.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.Create">
      <summary>The item is new and is created in the destination item store.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.UpdateVersionOnly">
      <summary>Item data is not changed in the destination item store. The version is overwritten in the destination metadata. It also occurs when the item from the destination provider is selected as the winner of a conflict.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.UpdateVersionAndData">
      <summary>Item data is applied to the destination item store. Existing data is overwritten. The version provided overwrites the existing version in the destination metadata. This action corresponds to an item creation, item update, or change unit update in the source replica. It also occurs when the item from the source provider is selected as the winner of a conflict.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.UpdateVersionAndMergeData">
      <summary>Item data applied to the destination item store. Existing item data is merged with the updated item data by using some provider-specific method. The version overwrites the existing version in the destination metadata. This action occurs when the conflict resolution action is <see cref="F:Microsoft.Synchronization.ConflictResolutionAction.Merge" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.DeleteAndStoreTombstone">
      <summary>The item is deleted from the destination item store. A tombstone is saved in the destination metadata. This action corresponds to an item that has been deleted from the source replica.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.DeleteAndRemoveTombstone">
      <summary>The item is deleted from the destination item store. A tombstone is not retained in the destination metadata. This action is invoked during forgotten knowledge recovery and corresponds to item deletes where the source replica has cleaned up the tombstone.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.RenameSourceAndUpdateVersionAndData">
      <summary>The change sent from the source provider is renamed so that it no longer collides with the conflicting item on the destination replica, and the source change is applied to the destination replica.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.RenameDestinationAndUpdateVersionData">
      <summary>The conflicting item on the destination replica is renamed so that it no longer collides with the change sent from the source provider, and the source change is applied to the destination replica.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.DeleteConflictingAndSaveSourceItem">
      <summary>The source change is applied to the destination replica and the conflicting destination item is deleted from the destination replica.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.StoreMergeTombstone">
      <summary>Store a merge tombstone in the destination metadata. Consider a merge action that specifies <paramref name="id1" /> as the losing item ID and <paramref name="id2" /> as the winning item ID. The merge tombstone contains <paramref name="id1" /> as the losing item ID and <paramref name="id2" /> as the winning item ID. If a merge tombstone already exists in the destination replica that contains <paramref name="id1" /> as the losing item ID and another item ID, <paramref name="id3" />, as the winning item ID, perform the following steps.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.ChangeIdUpdateVersionAndMergeData">
      <summary>The data from the source item is combined with the destination item. Store a merge tombstone for the losing item ID, by following the same steps outlined for <see cref="F:Microsoft.Synchronization.SaveChangeAction.StoreMergeTombstone" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.ChangeIdUpdateVersionAndSaveData">
      <summary>Store a merge tombstone for the losing item ID, by following the same steps outlined for <see cref="F:Microsoft.Synchronization.SaveChangeAction.StoreMergeTombstone" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.ChangeIdUpdateVersionAndDeleteAndStoreTombstone">
      <summary>Store a merge tombstone for the losing item ID, by following the same steps outlined for <see cref="F:Microsoft.Synchronization.SaveChangeAction.StoreMergeTombstone" />. Delete the item identified by the winning item ID, and store a tombstone for it.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.ChangeIdUpdateVersionOnly">
      <summary>Store a merge tombstone for the losing item ID, by following the same steps outlined for <see cref="F:Microsoft.Synchronization.SaveChangeAction.StoreMergeTombstone" />. Apply only metadata for the winning item change.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.CreateGhost">
      <summary>Create a ghost for the item. A ghost is an item that contains both a value that indicates whether it was in the filter recently, and a move-out version. A move-out version indicates the version of the change that moved the item out of the filter.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.MarkItemAsGhost">
      <summary>Change the active item to a ghost. To do this, store a value that indicates that the item was in the filter recently, store the version of this change as the move-out version for the item, and remove the item data from the item store.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.UnmarkItemAsGhost">
      <summary>Activate the ghost item. To do this, remove the move-out version from the metadata, and store the item data in the item store.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.UpdateGhost">
      <summary>Update the version for a ghost item. This is an update to the current version of the item, not the move-out version.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.DeleteGhostAndStoreTombstone">
      <summary>Change a ghost item to a tombstone. This indicates that the item has been deleted. To do this, store a value that indicates the item has been deleted.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SaveChangeAction.DeleteGhostWithoutTombstone">
      <summary>Remove the ghost item from the metadata store and do not store a tombstone for the item.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.SaveChangeContext">
      <summary>Represents information about a change to be saved to the item store.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.SaveChangeContext.ChangeData">
      <summary>Gets the item data from the source provider.</summary>
      <returns>The item data from the source provider. Is a null when no data is available, such as when the change is <see cref="F:Microsoft.Synchronization.SaveChangeAction.DeleteAndRemoveTombstone" /> or <see cref="F:Microsoft.Synchronization.SaveChangeAction.DeleteAndStoreTombstone" />.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SaveChangeContext.ConflictingItemId">
      <summary>Gets the item ID of the item in the destination replica that conflicts with the item to be applied when the change to be applied is the resolution of a constraint conflict.</summary>
      <returns>The item ID of the item in the destination replica that conflicts with the item to be applied when the change to be applied is the resolution of a constraint conflict.</returns>
      <exception cref="T:System.NullReferenceException">The conflicting item ID does not exist.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SaveChangeContext.DestinationVersionSuppliedForChange">
      <summary>Gets an <see cref="T:Microsoft.Synchronization.ItemChange" /> object that contains the original version that the destination provider supplied to the change applier.</summary>
      <returns>An <see cref="T:Microsoft.Synchronization.ItemChange" /> object that contains the original version that the destination provider supplied to the change applier.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeContext.GetUpdatedDestinationKnowledge(Microsoft.Synchronization.SyncKnowledge@,Microsoft.Synchronization.ForgottenKnowledge@)">
      <summary>Gets updated knowledge and forgotten knowledge objects that represent the state of the destination knowledge after this change is applied. </summary>
      <param name="knowledge">The updated knowledge for the destination.</param>
      <param name="forgottenKnowledge">The updated forgotten knowledge for the destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeContext.GetUpdatedFilterForgottenKnowledge(System.UInt32)">
      <summary>Gets the updated filter forgotten knowledge for the specified filter.</summary>
      <returns>The filter forgotten knowledge for the specified filter.</returns>
      <param name="filterIndex">The index that identifies the filter in the filter key map of the destination replica.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filterIndex" /> is an invalid value.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeContext.RecordConstraintConflictForItem(Microsoft.Synchronization.ConstraintConflictReason)">
      <summary>Reports that a constraint conflict occurred when the destination provider tried to apply the change to the destination replica.</summary>
      <param name="reason">The reason the conflict occurred.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reason" /> is <see cref="F:Microsoft.Synchronization.ConstraintConflictReason.Collision" />. In this case, a conflicting item ID must be specified by using <see cref="M:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.RecordConstraintConflictForItem(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.ConstraintConflictReason)." /></exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">A constraint conflict or recoverable error has already been set on this object.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeContext.RecordConstraintConflictForItem(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.ConstraintConflictReason)">
      <summary>Reports that a constraint conflict occurred when the destination provider tried to apply the change to the destination replica, and specifies the item ID of the destination item that is in conflict.</summary>
      <param name="conflictingItemId">The item ID of the destination item that conflicts with the change to be applied.</param>
      <param name="reason">The reason the conflict occurred.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conflictingItemId" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">A constraint conflict or recoverable error has already been set on this object.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeContext.RecordRecoverableErrorForItem(Microsoft.Synchronization.RecoverableErrorData)">
      <summary>Indicates that a recoverable error occurred when data for this item was saved to the item store.</summary>
      <param name="errorData">Additional information about the error.</param>
    </member>
    <member name="P:Microsoft.Synchronization.SaveChangeContext.WinnerChange">
      <summary>Gets the metadata of the item to be applied when the change to be applied is the resolution of a constraint conflict.</summary>
      <returns>The metadata of the item to be applied when the change to be applied is the resolution of a constraint conflict.</returns>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Winner change metadata does not exist in this object.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext">
      <summary>Represents information about a change to be saved to the item store when the change contains change units.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.ChangeData">
      <summary>Gets the item data from the source provider.</summary>
      <returns>The item data from the source provider. Is a null when no data is available, such as when the change is <see cref="F:Microsoft.Synchronization.SaveChangeAction.DeleteAndRemoveTombstone" /> or <see cref="F:Microsoft.Synchronization.SaveChangeAction.DeleteAndStoreTombstone" />.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.ConflictingItemId">
      <summary>Gets the item ID of the item in the destination replica that conflicts with the item to be applied when the change to be applied is the resolution of a constraint conflict.</summary>
      <returns>The item ID of the item in the destination replica that conflicts with the item to be applied when the change to be applied is the resolution of a constraint conflict.</returns>
      <exception cref="T:System.NullReferenceException">The conflicting item ID does not exist.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.DestinationVersionSuppliedForChange">
      <summary>Gets an <see cref="T:Microsoft.Synchronization.ItemChange" /> object that contains the original version that the destination provider supplied to the change applier.</summary>
      <returns>An <see cref="T:Microsoft.Synchronization.ItemChange" /> object that contains the original version that the destination provider supplied to the change applier.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.GetActionForChangeUnit(Microsoft.Synchronization.ChangeUnitChange)">
      <summary>Gets the action to use when the specified change unit change is being saved.</summary>
      <returns>The action to use when the specified change unit change is being saved.</returns>
      <param name="changeUnitChange">The change unit change to be saved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="changeUnitChange" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="changeUnitChange" /> is not valid.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.GetUpdatedDestinationKnowledge(Microsoft.Synchronization.SyncKnowledge@,Microsoft.Synchronization.ForgottenKnowledge@)">
      <summary>Gets updated knowledge and forgotten knowledge objects that represent the state of the destination knowledge after this change unit change is applied.</summary>
      <param name="knowledge">Returns the updated knowledge for the destination.</param>
      <param name="forgottenKnowledge">Returns the updated forgotten knowledge for the destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.GetUpdatedFilterForgottenKnowledge(System.UInt32)">
      <summary>Gets the updated filter forgotten knowledge for the specified filter.</summary>
      <returns>The filter forgotten knowledge for the specified filter.</returns>
      <param name="filterIndex">The index that identifies the filter in the filter key map of the destination replica.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filterIndex" /> is not a valid value.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.RecordConstraintConflictForChangeUnit(Microsoft.Synchronization.ChangeUnitChange)">
      <summary>Reports that a constraint conflict occurred when the destination provider tried to apply the change to the destination replica, for a change that contains change units.</summary>
      <param name="changeUnitChange">The change unit on the destination replica that conflicts with the change unit to be applied.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="changeUnitChange" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="changeUnitChange" /> is not found in the change to be applied.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">A constraint conflict or recoverable error has already been set on this object.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.RecordConstraintConflictForItem(Microsoft.Synchronization.ConstraintConflictReason)">
      <summary>Reports that a constraint conflict occurred when the destination provider tried to apply the change to the destination replica.</summary>
      <param name="reason">The reason the conflict occurred.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reason" /> is <see cref="F:Microsoft.Synchronization.ConstraintConflictReason.Collision" />. In this case, a conflicting item ID must be specified by using <see cref="M:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.RecordConstraintConflictForItem(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.ConstraintConflictReason)." /></exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">A constraint conflict or recoverable error has already been set on this object.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.RecordConstraintConflictForItem(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.ConstraintConflictReason)">
      <summary>Reports that a constraint conflict occurred when the destination provider tried to apply the change to the destination replica, and specifies the item ID of the destination item that is in conflict.</summary>
      <param name="conflictingItemId">The item ID of the destination item that conflicts with the change to be applied.</param>
      <param name="reason">The reason the conflict occurred.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conflictingItemId" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">A constraint conflict or recoverable error has already been set on this object.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.RecordRecoverableErrorForChangeUnit(Microsoft.Synchronization.ChangeUnitChange,Microsoft.Synchronization.RecoverableErrorData)">
      <summary>Indicates that a recoverable error occurred when data for this change unit was saved to the item store.</summary>
      <param name="changeUnitChange">The change unit change that caused the error.</param>
      <param name="errorData">Additional information about the error.</param>
      <exception cref="T:Microsoft.Synchronization.CreateFailuresMustBeForEntireItemException">The save action that is contained in the <see cref="T:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext" /> object is <see cref="F:Microsoft.Synchronization.SaveChangeAction.Create" />. In this situation, creation of the entire item must fail.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.RecordRecoverableErrorForItem(Microsoft.Synchronization.RecoverableErrorData)">
      <summary>Indicates that a recoverable error occurred when data for this item was saved to the item store.</summary>
      <param name="errorData">Additional information about the error.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="errorData" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SaveChangeWithChangeUnitsContext.WinnerChange">
      <summary>Gets the metadata of the item to be applied when the change to be applied is the resolution of a constraint conflict.</summary>
      <returns>The metadata of the item to be applied when the change to be applied is the resolution of a constraint conflict.</returns>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Winner change metadata does not exist in this object.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.SessionProgressStage">
      <summary>Represents the stages of a synchronization session.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SessionProgressStage.ChangeDetection">
      <summary>Changes are being detected on the source replica.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SessionProgressStage.ChangeEnumeration">
      <summary>Changes from the source replica are being enumerated.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SessionProgressStage.ChangeApplication">
      <summary>Changes are being applied to the destination replica.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.SimpleProviderInvalidOperationException">
      <summary>The exception that is thrown when a provider performs an operation that is not valid, such as trying to add the same schema more than once. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.SimpleProviderInvalidOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SimpleProviderInvalidOperationException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SimpleProviderInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SimpleProviderInvalidOperationException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SimpleProviderInvalidOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SimpleProviderInvalidOperationException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SimpleProviderInvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SimpleProviderInvalidOperationException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.SimpleProvidersException">
      <summary>The base class for all exceptions that are thrown by simple providers.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SimpleProvidersException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SimpleProvidersException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SimpleProvidersException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SimpleProvidersException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SimpleProvidersException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SimpleProvidersException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SimpleProvidersException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SimpleProvidersException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.SyncAbortedException">
      <summary>The exception that is thrown when the synchronization session is canceled.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncAbortedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncAbortedException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncAbortedException" /> class by using serialized data. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncAbortedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncAbortedException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncAbortedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncAbortedException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.SyncCallbacks">
      <summary>Represents application callbacks that are used to dispatch a synchronization event.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncCallbacks.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncCallbacks" /> class.</summary>
    </member>
    <member name="E:Microsoft.Synchronization.SyncCallbacks.FullEnumerationNeeded">
      <summary>Occurs when the forgotten knowledge from the source provider is not contained in the current knowledge of the destination provider.</summary>
    </member>
    <member name="E:Microsoft.Synchronization.SyncCallbacks.ItemChangeSkipped">
      <summary>Occurs when a synchronization provider sets a recoverable error while an item is being loaded or saved.</summary>
    </member>
    <member name="E:Microsoft.Synchronization.SyncCallbacks.ItemChanging">
      <summary>Occurs before a change is applied.</summary>
    </member>
    <member name="E:Microsoft.Synchronization.SyncCallbacks.ItemConflicting">
      <summary>Occurs when a conflict is detected when the conflict resolution policy is set to <see cref="F:Microsoft.Synchronization.ConflictResolutionPolicy.ApplicationDefined" />.</summary>
    </member>
    <member name="E:Microsoft.Synchronization.SyncCallbacks.ItemConstraint">
      <summary>Occurs when a constraint conflict is reported, for collision conflicts when the collision conflict resolution policy is set to <see cref="F:Microsoft.Synchronization.CollisionConflictResolutionPolicy.ApplicationDefined" />, and for all non-collision constraint conflicts.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncCallbacks.OnFullEnumerationNeeded(Microsoft.Synchronization.FullEnumerationNeededEventArgs)">
      <summary>Dispatches the <see cref="E:Microsoft.Synchronization.SyncCallbacks.FullEnumerationNeeded" /> event. This event occurs when the forgotten knowledge from the source provider is not contained in the current knowledge of the destination provider.</summary>
      <param name="args">A <see cref="T:Microsoft.Synchronization.FullEnumerationNeededEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncCallbacks.OnItemChanging(Microsoft.Synchronization.ItemChangingEventArgs)">
      <summary>Dispatches the <see cref="E:Microsoft.Synchronization.SyncCallbacks.ItemChanging" /> event. This event occurs before a change is applied.</summary>
      <param name="args">An <see cref="T:Microsoft.Synchronization.ItemChangingEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncCallbacks.OnItemConflicting(Microsoft.Synchronization.ItemConflictingEventArgs)">
      <summary>Dispatches the <see cref="E:Microsoft.Synchronization.SyncCallbacks.ItemConflicting" /> event. This event occurs when a conflict is detected when the conflict resolution policy is set to <see cref="F:Microsoft.Synchronization.ConflictResolutionPolicy.ApplicationDefined" />.</summary>
      <param name="args">An <see cref="T:Microsoft.Synchronization.ItemConflictingEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncCallbacks.OnItemConstraint(Microsoft.Synchronization.ItemConstraintEventArgs)">
      <summary>Dispatches the <see cref="E:Microsoft.Synchronization.SyncCallbacks.ItemConstraint" /> event. This event occurs when a constraint conflict is reported, for collision conflicts when the collision conflict resolution policy is set to <see cref="F:Microsoft.Synchronization.CollisionConflictResolutionPolicy.ApplicationDefined" />, and for all non-collision constraint conflicts.</summary>
      <param name="args">A <see cref="T:Microsoft.Synchronization.ItemConstraintEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncCallbacks.OnProgressChanged(Microsoft.Synchronization.SyncStagedProgressEventArgs)">
      <summary>Dispatches the <see cref="E:Microsoft.Synchronization.SyncCallbacks.ProgressChanged" /> event. This event occurs periodically during the synchronization session to report progress.</summary>
      <param name="args">A <see cref="T:Microsoft.Synchronization.SyncStagedProgressEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncCallbacks.OnRecoverableError(Microsoft.Synchronization.ItemChangeSkippedEventArgs)">
      <summary>Dispatches the <see cref="E:Microsoft.Synchronization.SyncCallbacks.ItemChangeSkipped" /> event. This event occurs when a synchronization provider sets a recoverable error during loading or saving of an item.</summary>
      <param name="args">A <see cref="T:Microsoft.Synchronization.ItemChangeSkippedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="E:Microsoft.Synchronization.SyncCallbacks.ProgressChanged">
      <summary>Occurs periodically during the synchronization session to report progress.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.SyncConstraintConflictNotAllowedException">
      <summary>The exception that is thrown when a constraint conflict is encountered in a synchronization session but conflicts are not allowed.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncConstraintConflictNotAllowedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncConstraintConflictNotAllowedException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncConstraintConflictNotAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncConstraintConflictNotAllowedException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncConstraintConflictNotAllowedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncConstraintConflictNotAllowedException" /> class that contains the specified error message.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncConstraintConflictNotAllowedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncConstraintConflictNotAllowedException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.SyncDataConverter">
      <summary>When implemented, converts data between two providers that synchronize the same type of data, such as contacts information, but transfer that data in a different format.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncDataConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncDataConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncDataConverter.ConvertDataFromProviderFormat(Microsoft.Synchronization.LoadChangeContext,System.Object)">
      <summary>When overridden in a derived class, converts data from a provider’s transfer format to the required output format. The output format can be another provider's transfer format or an intermediate format that is used by a synchronization community.</summary>
      <returns>An object that represents the converted data.</returns>
      <param name="context">A <see cref="T:Microsoft.Synchronization.LoadChangeContext" /> object that represents information about a change to be loaded from the item store. This object can be used to set a recoverable error for a change if an issue occurs during data conversion.</param>
      <param name="itemData">An object that represents the data to be converted.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncDataConverter.ConvertDataToProviderFormat(Microsoft.Synchronization.LoadChangeContext,System.Object)">
      <summary>When overridden in a derived class, converts data from an external format to a provider’s transfer format. The external format can be another provider's transfer format or an intermediate format that is used by a synchronization community.</summary>
      <returns>An object that represents the converted data.</returns>
      <param name="context">A <see cref="T:Microsoft.Synchronization.LoadChangeContext" /> object that represents information about a change to be loaded from the item store. This object can be used to set a recoverable error for a change if an issue occurs during data conversion.</param>
      <param name="itemData">An object that represents the data to be converted.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncDataConverter.TryConvertDataRetrieverFromProviderFormat(System.Object,System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ItemChange},System.Object@)">
      <summary>When overridden in a derived class, converts the data retriever from the associated provider’s format to the required data retriever format.</summary>
      <returns>true if the data retriever conversion succeeded; otherwise false.</returns>
      <param name="dataRetrieverIn">An object that represents the data retriever to be converted.</param>
      <param name="itemChanges">An <see cref="T:Microsoft.Synchronization.ItemChange" /> object that represents a set of item changes.</param>
      <param name="dataRetrieverOut">An object that represents the converted data retriever.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncDataConverter.TryConvertDataRetrieverToProviderFormat(System.Object,System.Collections.Generic.IEnumerable{Microsoft.Synchronization.ItemChange},System.Object@)">
      <summary>When overridden in a derived class, converts the data retriever from an external format to the associated provider’s data retriever format.</summary>
      <returns>true if the data retriever conversion succeeded. Otherwise, false.</returns>
      <param name="dataRetrieverIn">An object that represents the data retriever to be converted.</param>
      <param name="itemChanges">An <see cref="T:Microsoft.Synchronization.ItemChange" /> object that represents a set of item changes.</param>
      <param name="dataRetrieverOut">An object that represents the converted data retriever.cases</param>
    </member>
    <member name="T:Microsoft.Synchronization.SyncDirectionOrder">
      <summary>Indicates the direction of synchronization. For two-way synchronizations this also includes the order in which the synchronizations are performed.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncDirectionOrder.UploadAndDownload">
      <summary>Upload followed by download.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncDirectionOrder.DownloadAndUpload">
      <summary>Download followed by upload.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncDirectionOrder.Upload">
      <summary>Upload only.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncDirectionOrder.Download">
      <summary>Download only.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.SyncException">
      <summary>The exception that is thrown when an error occurs during synchronization.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="P:Microsoft.Synchronization.SyncException.ErrorNumber">
      <summary>Gets or sets an error number for the exception.</summary>
      <returns>Returns an error number for the exception. This member is obsolete and always returns a null.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncException.SyncSource">
      <summary>Gets or sets the name of the component that threw the exception.</summary>
      <returns>Returns the name of the component that threw the exception. This member is obsolete and always returns a null.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncException.SyncStage">
      <summary>Gets or sets a <see cref="T:Microsoft.Synchronization.SyncStage" /> enumeration value that represents the stage of synchronization during which the error occurred.</summary>
      <returns>Returns a <see cref="T:Microsoft.Synchronization.SyncStage" /> enumeration value that represents the stage of synchronization during which the error occurred. This member is obsolete and always returns a null.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.SyncGlobalId">
      <summary>Represents an identifier for an item that is unique throughout the synchronization community.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncGlobalId" /> class by using serialized data.</summary>
      <param name="data">Serialized global ID data.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="data" /> is not 24 bytes long.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.#ctor(System.UInt64,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncGlobalId" /> class that contains the specified prefix and GUID.</summary>
      <param name="prefix">A prefix, typically used for ordering items.</param>
      <param name="uniqueId">A unique GUID.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uniqueId" /> is empty.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.CompareTo(System.Object)">
      <summary>Compares this object with another <see cref="T:Microsoft.Synchronization.SyncGlobalId" /> object.</summary>
      <returns>A 32-bit signed integer that indicates the relative order of the objects that are being compared. The return value has the following meanings.ValueMeaningLess than 0 This object is less than <paramref name="obj" />.0This object is equal to <paramref name="obj" />.Greater than 0This object is greater than <paramref name="obj" />. </returns>
      <param name="obj">A <see cref="T:Microsoft.Synchronization.SyncGlobalId" /> object to compare with this object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.Equals(Microsoft.Synchronization.SyncGlobalId)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Synchronization.SyncGlobalId" /> object is equal to this object.</summary>
      <returns>true if <paramref name="other" /> is equal to this object; otherwise, false.</returns>
      <param name="other">The <see cref="T:Microsoft.Synchronization.SyncGlobalId" /> object to compare with this object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Synchronization.SyncGlobalId" /> object is equal to this object.</summary>
      <returns>true if <paramref name="obj" /> is equal to this object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:Microsoft.Synchronization.SyncGlobalId" /> to compare to this object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.GetBytes">
      <summary>Serializes the global ID value to an array of bytes.</summary>
      <returns>The global ID value as an array of bytes.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.GetHashCode">
      <summary>Computes a hash code that is suitable for use in hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.op_Equality(Microsoft.Synchronization.SyncGlobalId,Microsoft.Synchronization.SyncGlobalId)">
      <summary>Determines whether the two specified <see cref="T:Microsoft.Synchronization.SyncGlobalId" /> objects are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="idX">The first global ID to compare.</param>
      <param name="idY">The second global ID to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.op_GreaterThan(Microsoft.Synchronization.SyncGlobalId,Microsoft.Synchronization.SyncGlobalId)">
      <summary>Determines whether <paramref name="idX" /> is greater than <paramref name="idY" />.</summary>
      <returns>true if <paramref name="idX" /> is greater than <paramref name="idY" />; otherwise, false. </returns>
      <param name="idX">The first global ID to compare.</param>
      <param name="idY">The second global ID to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.op_Inequality(Microsoft.Synchronization.SyncGlobalId,Microsoft.Synchronization.SyncGlobalId)">
      <summary>Determines whether the two specified <see cref="T:Microsoft.Synchronization.SyncGlobalId" /> objects are not equal.</summary>
      <returns>true if the objects are not equal; otherwise, false. </returns>
      <param name="idX">The first global ID to compare.</param>
      <param name="idY">The second global ID to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.op_LessThan(Microsoft.Synchronization.SyncGlobalId,Microsoft.Synchronization.SyncGlobalId)">
      <summary>Determines whether <paramref name="idX" /> is less than <paramref name="idY" />.</summary>
      <returns>true if <paramref name="idX" /> is less than <paramref name="idY" />; otherwise, false.</returns>
      <param name="idX">The first global ID to compare.</param>
      <param name="idY">The second global ID to compare.</param>
    </member>
    <member name="P:Microsoft.Synchronization.SyncGlobalId.Prefix">
      <summary>Gets the prefix component of the global ID.</summary>
      <returns>The prefix component of the global ID.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncGlobalId.ToString">
      <summary>Returns a string that represents the global ID.</summary>
      <returns>A string that represents the global ID.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncGlobalId.UniqueId">
      <summary>Gets the GUID component of the global ID.</summary>
      <returns>The GUID component of the global ID. </returns>
    </member>
    <member name="T:Microsoft.Synchronization.SyncId">
      <summary>Represents an identifier for an item, change unit, or replica.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.#ctor(Microsoft.Synchronization.SyncGlobalId)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncId" /> class that contains the specified global ID.</summary>
      <param name="id">The global ID to use as the sync ID.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.#ctor(System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncId" /> class that contains the specified ID.</summary>
      <param name="id">The sync ID.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.#ctor(System.Byte[],System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncId" /> class that contains the specified raw ID and a value that indicates whether the ID is fixed length or variable length.</summary>
      <param name="rawId">The raw ID data.</param>
      <param name="isVariableLength">true if this is a variable length ID; otherwise, false.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="rawId" /> has an invalid length or is too short or too long for the value of <paramref name="isVariableLength" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawId" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.#ctor(System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncId" /> class that contains the specified GUID.</summary>
      <param name="id">The GUID to use as the sync ID.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> is empty.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncId" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
      <exception cref="T:System.Runtime.SerializationException">Data could not be read from <paramref name="info" />, or it could not be determined whether <paramref name="info" /> is variable length.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncId" /> class that contains the specified ID.</summary>
      <param name="id">The string to use as the sync ID.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> is an empty string or is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.CompareTo(System.Object)">
      <summary>Compares this object with another <see cref="T:Microsoft.Synchronization.SyncId" /> object.</summary>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:ValueMeaningLess than 0 This object is less than <paramref name="obj" />.0This object is equal to <paramref name="obj" />.Greater than 0This object is greater than <paramref name="obj" />. </returns>
      <param name="obj">A <see cref="T:Microsoft.Synchronization.SyncId" /> object to compare with this object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> could not be cast to <see cref="T:Microsoft.Synchronization.SyncId" />, or either one of <paramref name="id" /> or this <see cref="T:Microsoft.Synchronization.SyncId" /> object is variable length and the other is not.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.Equals(Microsoft.Synchronization.SyncId)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Synchronization.SyncId" /> object is equal to this object.</summary>
      <returns>true if <paramref name="other" /> is equal to this object; otherwise, false.</returns>
      <param name="other">The <see cref="T:Microsoft.Synchronization.SyncId" /> to compare with this object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Synchronization.SyncId" /> object is equal to this object.</summary>
      <returns>true if <paramref name="obj" /> is equal to this object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:Microsoft.Synchronization.SyncId" /> to compare with this object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.GetByteId">
      <summary>Gets a 1-byte sync ID.</summary>
      <returns>The sync ID if it is a fixed-length ID of length 1; otherwise, throws <see cref="T:System.InvalidOperationException" />.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncId" /> object is variable length or represents a multiple byte id.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.GetGuidId">
      <summary>Gets a GUID sync ID.</summary>
      <returns>The sync ID if it is a fixed-length GUID; otherwise, throws <see cref="T:System.InvalidOperationException" />.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncId" /> is variable length, or it represents an id longer or shorter than 16 bytes.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.GetHashCode">
      <summary>Computes a hash code suitable for use in hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes the object data to the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to receive the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.GetStringId">
      <summary>Gets a string sync ID.</summary>
      <returns>The sync ID if it is a variable-length string; otherwise, throws <see cref="T:System.InvalidOperationException" />.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncId" /> object is not variable length.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.GetSyncGlobalId">
      <summary>Gets a <see cref="T:Microsoft.Synchronization.SyncGlobalId" /> sync ID.</summary>
      <returns>The sync ID if it is a fixed-length <see cref="T:Microsoft.Synchronization.SyncGlobalId" />; otherwise, throws <see cref="T:System.InvalidOperationException" />.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncId" /> object is variable length or represents an id longer or shorter than 24 bytes.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncId.IsVariableLength">
      <summary>Gets a value that indicates whether the ID is variable length.</summary>
      <returns>true if the ID is variable length; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.op_Equality(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId)">
      <summary>Determines whether the two specified <see cref="T:Microsoft.Synchronization.SyncId" /> objects are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="idX">The first sync ID to compare.</param>
      <param name="idY">The second sync ID to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.op_GreaterThan(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId)">
      <summary>Determines whether <paramref name="idX" /> is greater than <paramref name="idY" />.</summary>
      <returns>true if <paramref name="idX" /> is greater than <paramref name="idY" />; otherwise, false.</returns>
      <param name="idX">The first sync ID to compare.</param>
      <param name="idY">The second sync ID to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.op_Inequality(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId)">
      <summary>Determines whether the two specified <see cref="T:Microsoft.Synchronization.SyncId" /> objects are not equal.</summary>
      <returns>true if the objects are not equal; otherwise, false.</returns>
      <param name="idX">The first sync ID to compare.</param>
      <param name="idY">The second sync ID to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.op_LessThan(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId)">
      <summary>Determines whether <paramref name="idX" /> is less than <paramref name="idY" />.</summary>
      <returns>true if <paramref name="idX" /> is less than <paramref name="idY" />; otherwise, false.</returns>
      <param name="idX">The first sync ID to compare.</param>
      <param name="idY">The second sync ID to compare.</param>
    </member>
    <member name="P:Microsoft.Synchronization.SyncId.RawId">
      <summary>Gets the raw ID data in a byte array.</summary>
      <returns>The raw ID data in a byte array. </returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncId.ToString">
      <summary>Returns a string that represents the sync ID.</summary>
      <returns>A string that represents the sync ID.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.SyncIdFormat">
      <summary>Represents the format of a synchronization entity ID. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.Clone">
      <summary>Clones the ID format and returns a new object that is in the same state as the current one.</summary>
      <returns>The newly cloned ID format object.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.CompareTo(System.Object)">
      <summary>Compares the current object with another <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object.</summary>
      <returns>A 32-bit signed integer that indicates the relative order of the objects that are being compared. The return value has the following meanings.ValueMeaningLess than 0 This instance is less than <paramref name="obj" />.0This instance is equal to <paramref name="obj" />.Greater than 0This instance is greater than <paramref name="obj" />. </returns>
      <param name="obj">A <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object to compare with this object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="format" /> could not be cast to <see cref="T:Microsoft.Synchronization.SyncIdFormat" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.Equals(Microsoft.Synchronization.SyncIdFormat)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object is the same as the current object.</summary>
      <returns>true if <paramref name="other" /> is the same as the current object; otherwise, false.</returns>
      <param name="other">The <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> to compare with the current object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object is the same as the current object.</summary>
      <returns>true if <paramref name="obj" /> is the same as the current object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> to compare with the current object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.GetHashCode">
      <summary>Computes a hash code that is suitable for use in hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncIdFormat.Infinity">
      <summary>Gets an infinite value for an ID.</summary>
      <returns>An infinite value for an ID.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncIdFormat.IsVariableLength">
      <summary>Gets or sets a value that indicates whether the ID is variable length.</summary>
      <returns>true if the ID is variable length; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncIdFormat.Length">
      <summary>Gets or sets the maximum length of a variable-length ID, or the actual length of a fixed-length ID.</summary>
      <returns>The maximum length of a variable-length ID, or the actual length of a fixed-length ID.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.op_Equality(Microsoft.Synchronization.SyncIdFormat,Microsoft.Synchronization.SyncIdFormat)">
      <summary>Determines whether the two specified <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> objects are the same.</summary>
      <returns>true if the objects are the same as; otherwise, false. </returns>
      <param name="format1">The first <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object to compare.</param>
      <param name="format2">The second <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.op_GreaterThan(Microsoft.Synchronization.SyncIdFormat,Microsoft.Synchronization.SyncIdFormat)">
      <summary>Determines whether <paramref name="format1" /> is greater than <paramref name="format2" />. </summary>
      <returns>true if <paramref name="format1" /> is greater than <paramref name="format2" />; otherwise, false.</returns>
      <param name="format1">The first <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object to compare.</param>
      <param name="format2">The second <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.op_Inequality(Microsoft.Synchronization.SyncIdFormat,Microsoft.Synchronization.SyncIdFormat)">
      <summary>Determines whether the two specified <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> objects are not the same.</summary>
      <returns>true if the objects are not the same; otherwise, false.</returns>
      <param name="format1">The first <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object to compare.</param>
      <param name="format2">The second <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.op_LessThan(Microsoft.Synchronization.SyncIdFormat,Microsoft.Synchronization.SyncIdFormat)">
      <summary>Determines whether <paramref name="format1" /> is less than <paramref name="format2" />.</summary>
      <returns>true if <paramref name="format1 " />is less than <paramref name="format2" />; otherwise, false.</returns>
      <param name="format1">The first <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object to compare.</param>
      <param name="format2">The second <see cref="T:Microsoft.Synchronization.SyncIdFormat" /> object to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Returns a null.</summary>
      <returns>A null.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Reconstitutes the object from its XML representation.</summary>
      <param name="reader">An XML reader stream that contains the XML representation of the object.</param>
      <exception cref="T:System.Xml.XmlException">The length of <paramref name="reader" /> could not be determined, or whether <paramref name="reader" /> is variable-length could not be determined.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormat.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts this object into its XML representation.</summary>
      <param name="writer">The XML representation of the object is written to this XML writer stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncIdFormat.Zero">
      <summary>Gets a 0 value for an ID.</summary>
      <returns>A 0 value for an ID.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.SyncIdFormatGroup">
      <summary>Represents the format schema for the group of IDs that are used to identify entities in a synchronization session. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> class that contains default values.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.SyncIdFormatGroup.ChangeUnitIdFormat">
      <summary>Gets the ID format for change unit IDs.</summary>
      <returns>The ID format for change unit IDs.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.Clone">
      <summary>Clones the ID format schema and returns a new object that is in the same state as the current one.</summary>
      <returns>The newly cloned ID format schema object.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.CompareTo(System.Object)">
      <summary>Compares the current instance with another <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object.</summary>
      <returns>A 32-bit signed integer that indicates the relative order of the objects that are being compared. The return value has the following meanings.ValueMeaningLess than 0 This instance is less than <paramref name="obj" />.0This instance is equal to <paramref name="obj" />.Greater than 0This instance is greater than <paramref name="obj" />. </returns>
      <param name="obj">A <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object to compare with this instance.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="formats" /> could not be converted to a <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.Equals(Microsoft.Synchronization.SyncIdFormatGroup)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object is the same as the current object.</summary>
      <returns>true if <paramref name="other" /> is the same as the current object; otherwise, false.</returns>
      <param name="other">The <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> to compare with the current object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object is the same as the current object.</summary>
      <returns>true if <paramref name="obj" /> is the same as the current object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> to compare with the current object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.GetHashCode">
      <summary>Computes a hash code that is suitable for use in hashing algorithms and data structures, such as a hash table.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncIdFormatGroup.ItemIdFormat">
      <summary>Gets the ID format for item IDs.</summary>
      <returns>The ID format for item IDs.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.op_Equality(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncIdFormatGroup)">
      <summary>Determines whether the two specified <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> objects are the same.</summary>
      <returns>true if the objects are the same; otherwise, false.</returns>
      <param name="formats1">The first <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object to compare.</param>
      <param name="formats2">The second <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.op_GreaterThan(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncIdFormatGroup)">
      <summary>Determines whether <paramref name="formats1" /> is greater than <paramref name="formats2" />.</summary>
      <returns>true if <paramref name="formats1" /> is greater than <paramref name="formats2" />; otherwise, false.</returns>
      <param name="formats1">The first <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object to compare.</param>
      <param name="formats2">The second <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.op_Inequality(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncIdFormatGroup)">
      <summary>Determines whether the two specified <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> objects are not the same.</summary>
      <returns>true if the objects are not the same; otherwise, false.</returns>
      <param name="formats1">The first <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object to compare.</param>
      <param name="formats2">The second <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object to compare.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.op_LessThan(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncIdFormatGroup)">
      <summary>Determines whether <paramref name="formats1" /> is less than <paramref name="formats2" />.</summary>
      <returns>true if <paramref name="formats1 " />is less than <paramref name="formats2" />; otherwise, false.</returns>
      <param name="formats1">The first <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object to compare.</param>
      <param name="formats2">The second <see cref="T:Microsoft.Synchronization.SyncIdFormatGroup" /> object to compare.</param>
    </member>
    <member name="P:Microsoft.Synchronization.SyncIdFormatGroup.ReplicaIdFormat">
      <summary>Gets the ID format for replica IDs.</summary>
      <returns>The ID format for replica IDs. </returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Returns a null.</summary>
      <returns>A null.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Reconstitutes the object from its XML representation.</summary>
      <param name="reader">An XML reader stream that contains the XML representation of the object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatGroup.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts this object into its XML representation.</summary>
      <param name="writer">The XML representation of the object is written to this XML writer stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
      <summary>The exception that is thrown when an ID format is specified that is not in the format that is expected.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncIdFormatMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.SyncInvalidOperationException">
      <summary>The exception that is thrown when a method call is invalid for the current state of the object.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncInvalidOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncInvalidOperationException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncInvalidOperationException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncInvalidOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncInvalidOperationException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncInvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncInvalidOperationException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.SyncKnowledge">
      <summary>Represents knowledge that a replica has about its item store.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.ReplicaKeyMap,System.UInt64)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> class that contains the specified ID format schema, replica key map, and tick count.</summary>
      <param name="idFormats">The ID format schema for the provider.</param>
      <param name="replicaKeyMap">The replica key map that is associated with this knowledge.</param>
      <param name="tickCount">The current tick count of the replica that owns this knowledge.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="replicaKeyMap" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncId,System.UInt64)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> class that contains the specified ID format schema, replica ID, and tick count.</summary>
      <param name="idFormats">The ID format schema for the provider.</param>
      <param name="replicaId">The ID of the replica that owns this knowledge.</param>
      <param name="tickCount">The current tick count for the replica that owns this knowledge.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Data could not be read from <paramref name="info" /> or its format could not be determined.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.AddMarker(Microsoft.Synchronization.MarkerType,Microsoft.Synchronization.SyncId)">
      <summary>Marks the specified item with the specified marker type.</summary>
      <param name="markerType">
        <paramref name="itemId" /> is marked with this marker type.</param>
      <param name="itemId">The ID of the item to mark with <paramref name="markerType" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="markerType" /> is not a valid value.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">The <see cref="P:Microsoft.Synchronization.SyncKnowledge.CompatibilityLevel" /> property is less than <see cref="F:Microsoft.Synchronization.CompatibilityLevel.SyncFrameworkVersion2" />.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="itemId" /> is not in the ID format specified for this knowledge object.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeMarkerException">The knowledge object already contains items that are marked with a type of marker other than <paramref name="markerType" />.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Clone">
      <summary>Creates a new instance of this object, and copies the data from this object to the new object.</summary>
      <returns>The newly created copy of this object.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Combine(Microsoft.Synchronization.SyncKnowledge)">
      <summary>Combines the specified knowledge with the current knowledge.</summary>
      <param name="knowledge">The knowledge to combine with the current knowledge.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="knowledge" /> is not a valid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="knowledge" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">The <see cref="P:Microsoft.Synchronization.SyncKnowledge.CompatibilityLevel" /> property is less than <see cref="F:Microsoft.Synchronization.CompatibilityLevel.SyncFrameworkVersion2" />.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Compare(Microsoft.Synchronization.KnowledgeCookie)">
      <summary>Performs a fast comparison between the specified knowledge cookie and this knowledge object.</summary>
      <returns>The result of the comparison.</returns>
      <param name="otherCookie">The knowledge cookie to compare against this object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherCookie" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncKnowledge.CompatibilityLevel">
      <summary>Gets or sets the version of Sync Framework components that can be used with this object.</summary>
      <returns>The version of Sync Framework components that can be used with this object.</returns>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">The property is set to a value that is less than the value of <see cref="P:Microsoft.Synchronization.SyncKnowledge.MinimumCompatibilityLevel" />.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Complement(Microsoft.Synchronization.SyncKnowledge)">
      <summary>Returns the knowledge that is contained in this object, but that is not contained in the specified knowledge.</summary>
      <returns>The knowledge that is contained in this object but that is not contained in the specified knowledge.</returns>
      <param name="otherKnowledge">The knowledge to remove from this object to calculate the result of the complement operation.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="otherKnowledge" /> is not a valid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherKnowledge" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Contains(Microsoft.Synchronization.ChangeUnitChange)">
      <summary>Indicates whether the specified change unit change is known by this knowledge.</summary>
      <returns>true if <paramref name="changeUnitChange" /> is known. Otherwise, false.</returns>
      <param name="changeUnitChange">The change unit change to look up.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="changeUnitChange" /> is a null or its <see cref="P:Microsoft.Synchronization.ChangeUnitChange.ParentChange" /> or <see cref="P:Microsoft.Synchronization.ChangeUnitChange.ChangeUnitVersion" /> property is a null.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Contains(Microsoft.Synchronization.ItemChange)">
      <summary>Indicates whether the specified item change is known by this knowledge.</summary>
      <returns>true if <paramref name="itemChange" /> is known. Otherwise, false.</returns>
      <param name="itemChange">The item change to look up.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemChange" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="itemChange" /> has change units.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Contains(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncVersion)">
      <summary>Indicates whether the specified change unit change is known by this knowledge.</summary>
      <returns>true if the change unit change is known. Otherwise, false.</returns>
      <param name="replicaId">The ID of the replica that originated this change.</param>
      <param name="itemId">The ID of the item that was changed.</param>
      <param name="changeUnitId">The ID of the change unit that was changed.</param>
      <param name="changeVersion">The version for the change.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replicaId" />, <paramref name="itemId," /><paramref name="changeUnitId" />, or c<paramref name="hangeVersion" /> or is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="replicaId" />, <paramref name="itemId" />, or <paramref name="changeUnitId" /> is not in the ID format specified for this knowledge object.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Contains(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncVersion)">
      <summary>Indicates whether the specified item change is known by this knowledge.</summary>
      <returns>true if the item change is known. Otherwise, false.</returns>
      <param name="replicaId">The ID of the replica that originated this change.</param>
      <param name="itemId">The ID of the item that was changed.</param>
      <param name="changeVersion">The version for the change.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replicaId" />, <paramref name="itemId," /> or c<paramref name="hangeVersion" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="replicaId" /> or <paramref name="itemId" /> is not in the ID format specified for this knowledge object.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Contains(Microsoft.Synchronization.SyncKnowledge)">
      <summary>Indicates whether the specified knowledge is known by this knowledge.</summary>
      <returns>true if <paramref name="syncKnowledge" /> is known. Otherwise, false.</returns>
      <param name="syncKnowledge">The knowledge to look up.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncKnowledge" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">The <see cref="P:Microsoft.Synchronization.SyncKnowledge.CompatibilityLevel" /> property is less than <see cref="F:Microsoft.Synchronization.CompatibilityLevel.SyncFrameworkVersion2" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.ContainsMarker(Microsoft.Synchronization.MarkerType,Microsoft.Synchronization.SyncId)">
      <summary>Indicates whether the specified item is marked with the specified marker type.</summary>
      <returns>true when <paramref name="itemId" /> is marked with the specified marker type. Otherwise, false.</returns>
      <param name="markerType">The type of marker to look up.</param>
      <param name="itemId">The ID of the item to be looked up.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="markerType" /> is not a valid value.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">The <see cref="P:Microsoft.Synchronization.SyncKnowledge.CompatibilityLevel" /> property is less than <see cref="F:Microsoft.Synchronization.CompatibilityLevel.SyncFrameworkVersion2" />.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="itemId" /> is not in the ID format specified for this knowledge object.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncKnowledge.DefaultCompatibilityLevel">
      <summary>Gets or sets the default compatibility level of all <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> objects.</summary>
      <returns>The default compatibility level of all <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> objects.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is not a member of the <see cref="T:Microsoft.Synchronization.CompatibilityLevel" /> enumeration.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Deserialize(Microsoft.Synchronization.SyncIdFormatGroup,System.Byte[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> class by using serialized data.</summary>
      <returns>The new knowledge object instance that is initialized by using the serialized data.</returns>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="data">The serialized data used to initialize the new knowledge object.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="data" /> does not contain a replica key map.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="data" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Deserialize(Microsoft.Synchronization.SyncIdFormatGroup,System.Byte[],Microsoft.Synchronization.ReplicaKeyMap)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> class by using serialized data and the specified replica key map.</summary>
      <returns>The new knowledge object instance that is initialized by using the serialized data and the specified replica key map.</returns>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="data">The serialized data used to initialize the new knowledge object.</param>
      <param name="replicaKeyMap">The replica key map associated with the knowledge.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="data" /> contains a replica key map.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" />, <paramref name="data" />, or <paramref name="replicaKeyMap" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.ExcludeChangeUnit(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId)">
      <summary>Removes knowledge about the specified change unit from the knowledge.</summary>
      <param name="itemId">The ID of the item that contains the change unit to exclude.</param>
      <param name="changeUnitId">The ID of the change unit to exclude.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemId" /> or <paramref name="changeUnitId" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="itemId" /> or <paramref name="changeUnitId" /> is not in the ID format specified for this knowledge object or has a different variable length setting.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.ExcludeItem(Microsoft.Synchronization.SyncId)">
      <summary>Removes knowledge about the specified item from the knowledge.</summary>
      <param name="itemId">The ID of the item to exclude.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemId" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="itemId" /> is not in the ID format specified for this knowledge object or has a different variable length setting.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.FindMinTickCountForReplica(Microsoft.Synchronization.SyncId)">
      <summary>Finds the minimum tick count in the knowledge for the specified replica.</summary>
      <returns>The minimum tick count in the knowledge for the specified replica.</returns>
      <param name="replicaId">The ID of the replica to look up.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replicaId" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="replicaId" /> is not in the ID format specified for this knowledge object or has a different variable length setting.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.GetKnowledgeCookie">
      <summary>Gets a lightweight, read-only representation of this knowledge object that can be used for fast comparisons.</summary>
      <returns>A lightweight, read-only representation of this knowledge object that can be used for fast comparisons.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.GetKnowledgeForChangeUnit(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId)">
      <summary>Gets the knowledge for the specified change unit.</summary>
      <returns>The knowledge for the specified change unit.</returns>
      <param name="itemId">The ID of the item that contains the change unit to look up.</param>
      <param name="changeUnitId">The ID of the change unit to look up.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemId" /> or <paramref name="changeUnitId" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="itemId" /> or <paramref name="changeUnitId" /> is not in the ID format specified for this knowledge object or has a different variable length setting.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.GetKnowledgeForColumns(Microsoft.Synchronization.SyncId[])">
      <summary>Returns the knowledge for the specified set of change units for all the items that are contained in this object.</summary>
      <returns>Returns a knowledge object that contains only the change units that are specified by <paramref name="columnIds" /> for all items contained in this object.</returns>
      <param name="columnIds">The set of change unit IDs to look up.</param>
      <exception cref="T:System.ArgumentNullException">A required parameter is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">The <see cref="P:Microsoft.Synchronization.SyncKnowledge.CompatibilityLevel" /> property is less than <see cref="F:Microsoft.Synchronization.CompatibilityLevel.WindowsSync" />.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The IDs in <paramref name="columnIds" /> are not in the ID format specified for this knowledge object.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.GetKnowledgeForItem(Microsoft.Synchronization.SyncId)">
      <summary>Gets the knowledge for the specified item.</summary>
      <returns>The knowledge for the specified item.</returns>
      <param name="itemId">The ID of the item to look up.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemId" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="itemId" /> is not in the ID format specified for this knowledge object or has a different variable length setting.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.GetKnowledgeForRange(Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncId)">
      <summary>Gets the knowledge for the specified range of item IDs.</summary>
      <returns>The knowledge for the specified range of item IDs.</returns>
      <param name="closedLowerBound">The closed lower bound item ID of the range.</param>
      <param name="closedUpperBound">The closed upper bound item ID of the range.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="closedLowerBound" /> or <paramref name="closedUpperBound" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="closedLowerBound" /> or <paramref name="closedUpperBound" /> is not in the ID format specified for this knowledge object or has a different variable length setting.</exception>
      <exception cref="T:SystemArgumentException">
        <paramref name="closedLowerBound" /> is greater than or equal to <paramref name="closedUpperBound" />. </exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes the knowledge object data to a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that receives the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.GetSchema">
      <summary>Returns a null.</summary>
      <returns>A null.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.GetSyncIdFormatGroup">
      <summary>Gets the ID format schema of the IDs that are stored in this knowledge object.</summary>
      <returns>The ID format schema of the IDs that are stored in this knowledge object.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Intersects(Microsoft.Synchronization.SyncKnowledge)">
      <summary>Indicates whether the specified knowledge intersects with this knowledge.</summary>
      <returns>true if the specified knowledge intersects with this knowledge. Otherwise, false.</returns>
      <param name="otherKnowledge">The knowledge that is checked against this object to determine whether there is an intersection.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherKnowledge" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="otherKnowledge" /> is uninitialized.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">
        <paramref name="otherKnowledge" /> is in a version that is less than the value of <see cref="P:Microsoft.Synchronization.SyncKnowledge.MinimumCompatibilityLevel" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.MapRemoteKnowledgeToLocal(Microsoft.Synchronization.SyncKnowledge)">
      <summary>Converts a knowledge object from another replica into one that is compatible with the replica that owns this knowledge.</summary>
      <returns>The knowledge object that has been converted for use by the replica that owns this knowledge.</returns>
      <param name="remoteKnowledge">The knowledge object to convert.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="remoteKnowledge" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="remoteKnowledge" /> is uninitialized.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">
        <paramref name="remoteKnowledge" /> is in a version that is less than the value of <see cref="P:Microsoft.Synchronization.SyncKnowledge.MinimumCompatibilityLevel" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncKnowledge.MinimumCompatibilityLevel">
      <summary>Gets the minimum version of Sync Framework components that can be used with this object.</summary>
      <returns>The minimum version of Sync Framework components that can be used with this object.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.ReadXml(System.Xml.XmlReader)">
      <summary>Reconstitutes the object from its XML representation.</summary>
      <param name="reader">An XML reader stream that contains the XML representation of the object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is a null.</exception>
      <exception cref="T:System.Xml.XmlException">There was a problem reading XML from <paramref name="reader" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.RemoveAllChangeUnitsMarkers">
      <summary>Removes all markers for items in the knowledge.</summary>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">The <see cref="P:Microsoft.Synchronization.SyncKnowledge.CompatibilityLevel" /> property is less than <see cref="F:Microsoft.Synchronization.CompatibilityLevel.SyncFrameworkVersion2" />.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.RemoveMarker(Microsoft.Synchronization.MarkerType,Microsoft.Synchronization.SyncId)">
      <summary>Removes a marker of the specified type from the specified item.</summary>
      <param name="markerType">The type of marker to remove.</param>
      <param name="itemId">The ID of the item to be looked up.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="markerType" /> is not a valid value.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeVersionException">The <see cref="P:Microsoft.Synchronization.SyncKnowledge.CompatibilityLevel" /> property is less than <see cref="F:Microsoft.Synchronization.CompatibilityLevel.SyncFrameworkVersion2" />.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="itemId" /> is not in the ID format specified for this knowledge object.</exception>
      <exception cref="T:Microsoft.Synchronization.InvalidKnowledgeMarkerException">The knowledge object contains items that are marked with a type of marker other than <paramref name="markerType" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncKnowledge.ReplicaId">
      <summary>Gets the ID of the replica that owns this knowledge.</summary>
      <returns>The ID of the replica that owns this knowledge.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">The format of the replica that owns this knowledge is different from the format of this <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncKnowledge.ReplicaKeyMap">
      <summary>Gets the replica key map that is associated with this knowledge.</summary>
      <returns>The replica key map that is associated with this knowledge.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Serialize">
      <summary>Serializes the knowledge object data to a byte array.</summary>
      <returns>The byte array that contains the serialized knowledge object data.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.Serialize(System.Boolean)">
      <summary>Serializes the knowledge object data to a byte array.</summary>
      <returns>The byte array that contains the data for the serialized knowledge object.</returns>
      <param name="includeReplicaKeyMap">true to include the replica key map in the serialized data. Otherwise, false.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.SetLocalTickCount(System.UInt64)">
      <summary>Sets the tick count for the replica that owns this knowledge.</summary>
      <param name="localTickCount">The current tick count of the replica that owns this knowledge.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> object is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.ToString">
      <summary>Gets a string that represents the knowledge.</summary>
      <returns>A string that represents the knowledge. </returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncKnowledge.WriteXml(System.Xml.XmlWriter)">
      <summary>Converts this object into its XML representation.</summary>
      <param name="writer">The XML representation of the object is written to this XML writer stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.SyncOperationStatistics">
      <summary>Represents statistics about a bidirectional synchronization session.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOperationStatistics.DownloadChangesApplied">
      <summary>Gets the total number of changes that were successfully applied during the download session.</summary>
      <returns>The total number of changes that were successfully applied during the download session. Returns 0 when no download session occurred.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOperationStatistics.DownloadChangesFailed">
      <summary>Gets the total number of changes that were not applied during the download session.</summary>
      <returns>The total number of changes that were not applied during the download session.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOperationStatistics.DownloadChangesTotal">
      <summary>Gets the total number of changes that were tried during the download session.</summary>
      <returns>The total number of changes that were tried during the download session.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOperationStatistics.SyncEndTime">
      <summary>Gets or sets the date and time when the synchronization session ended.</summary>
      <returns>The date and time when the synchronization session ended.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOperationStatistics.SyncStartTime">
      <summary>Gets or sets the date and time when the synchronization session started.</summary>
      <returns>The date and time when the synchronization session started.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOperationStatistics.UploadChangesApplied">
      <summary>Gets the total number of changes that were successfully applied during the upload session.</summary>
      <returns>The total number of changes that were successfully applied during the upload session.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOperationStatistics.UploadChangesFailed">
      <summary>Gets the total number of changes that failed to apply during the upload session.</summary>
      <returns>The total number of changes that failed to apply during the upload session.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOperationStatistics.UploadChangesTotal">
      <summary>Gets the total number of changes that were tried during the upload session.</summary>
      <returns>The total number of changes that were tried during the upload session.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.SyncOrchestrator">
      <summary>Initiates and controls synchronization sessions.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncOrchestrator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncOrchestrator" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncOrchestrator.Cancel">
      <summary>Cancels the current synchronization session.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Microsoft.Synchronization.SyncOrchestrator.State" /> is any value other than <see cref="F:Microsoft.Synchronization.SyncOrchestratorState.Downloading" /> or <see cref="F:Microsoft.Synchronization.SyncOrchestratorState.Uploading" />. Be aware that this means <see cref="M:Microsoft.Synchronization.SyncOrchestrator.Cancel" /> can only be called one time for each session.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOrchestrator.Direction">
      <summary>Gets or sets the direction of synchronization. For two-way synchronizations, this also includes the order in which the synchronizations are performed.</summary>
      <returns>The direction of synchronization. For two-way synchronizations, this also includes the order in which the synchronizations are performed. The default is <see cref="F:Microsoft.Synchronization.SyncDirectionOrder.UploadAndDownload" />.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncOrchestrator" /> object is neither ready nor canceled.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is not a valid E:Microsoft.Synchronization.SyncDirectionOrder enumeration value. </exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOrchestrator.LocalDataConverter">
      <summary>Gets or sets the data converter for the local provider. This enables the conversion of data to and from the local provider’s data format.</summary>
      <returns>A <see cref="T:Microsoft.Synchronization.SyncDataConverter" /> object that represents the data converter.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncOrchestrator" /> object is neither ready nor canceled.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOrchestrator.LocalProvider">
      <summary>Gets or sets the local synchronization provider.</summary>
      <returns>The local synchronization provider. The default is a null.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncOrchestrator" /> object is neither ready nor canceled.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOrchestrator.RemoteDataConverter">
      <summary>Gets or sets the data converter for the remote provider. This enables the conversion of data to and from the remote provider’s data format.</summary>
      <returns>A <see cref="T:Microsoft.Synchronization.SyncDataConverter" /> object that represents the data converter.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncOrchestrator" /> object is neither ready nor canceled.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOrchestrator.RemoteProvider">
      <summary>Gets or sets the remote synchronization provider.</summary>
      <returns>The remote synchronization provider. The default is a null.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncOrchestrator" /> object is neither ready nor canceled.</exception>
    </member>
    <member name="E:Microsoft.Synchronization.SyncOrchestrator.SessionProgress">
      <summary>Occurs periodically during the synchronization session to report progress.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOrchestrator.State">
      <summary>Gets the current state of the orchestrator.</summary>
      <returns>The current state of the orchestrator.</returns>
    </member>
    <member name="E:Microsoft.Synchronization.SyncOrchestrator.StateChanged">
      <summary>Occurs when <see cref="P:Microsoft.Synchronization.SyncOrchestrator.State" /> changes.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncOrchestrator.Synchronize">
      <summary>Starts a synchronization session.</summary>
      <returns>Statistics about the synchronization session.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.SyncOrchestrator" /> object is neither ready nor canceled—or—The <see cref="P:Microsoft.Synchronization.SyncOrchestrator.LocalProvider" /> property or <see cref="P:Microsoft.Synchronization.SyncOrchestrator.RemoteProvider" /> property is a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.SyncOrchestratorState">
      <summary>Represents the possible states of a <see cref="T:Microsoft.Synchronization.SyncOrchestrator" /> object.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncOrchestratorState.Ready">
      <summary>
        <see cref="T:Microsoft.Synchronization.SyncOrchestrator" /> is ready. <see cref="T:Microsoft.Synchronization.SyncOrchestrator" /> returns to this state when a synchronization session finishes, unless the session was canceled.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncOrchestratorState.Uploading">
      <summary>An upload synchronization is currently being performed.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncOrchestratorState.Downloading">
      <summary>A download synchronization is currently being performed.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncOrchestratorState.UploadingAndDownloading">
      <summary>A two-way synchronization is currently being performed. This value does not imply the order in which the synchronization direction is performed. This value is set when <see cref="P:Microsoft.Synchronization.SyncOrchestrator.Direction" /> is <see cref="F:Microsoft.Synchronization.SyncDirectionOrder.DownloadAndUpload" /> or <see cref="F:Microsoft.Synchronization.SyncDirectionOrder.UploadAndDownload" />.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncOrchestratorState.Canceling">
      <summary>A pending synchronization operation is in the process of being canceled.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncOrchestratorState.Canceled">
      <summary>The synchronization session was canceled.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.SyncOrchestratorStateChangedEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Synchronization.SyncOrchestrator.StateChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncOrchestratorStateChangedEventArgs.#ctor(Microsoft.Synchronization.SyncOrchestratorState,Microsoft.Synchronization.SyncOrchestratorState)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncOrchestratorStateChangedEventArgs" /> class that contains the states before and after the state change.</summary>
      <param name="oldState">The state before the state change.</param>
      <param name="newState">The state after the state change.</param>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOrchestratorStateChangedEventArgs.NewState">
      <summary>Gets the state after the state change.</summary>
      <returns>The state after the state change.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncOrchestratorStateChangedEventArgs.OldState">
      <summary>Gets the state before the state change.</summary>
      <returns>The state before the state change.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.SyncProvider">
      <summary>When overridden by a derived class, represents a synchronization provider.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncProvider" /> class. </summary>
    </member>
    <member name="T:Microsoft.Synchronization.SyncProviderPosition">
      <summary>Represents the position of a provider, relative to the other provider in the synchronization session.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncProviderPosition.Local">
      <summary>The provider is the local provider.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncProviderPosition.Remote">
      <summary>The provider is the remote provider.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.SyncProviderPosition.Unknown">
      <summary>The position of the provider is not known.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.SyncRuntimeInternalErrorException">
      <summary>The exception that is thrown when an internal error has occurred in Sync Framework.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncRuntimeInternalErrorException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncRuntimeInternalErrorException" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncRuntimeInternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncRuntimeInternalErrorException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception that is being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncRuntimeInternalErrorException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncRuntimeInternalErrorException" /> class that contains a specified error message.</summary>
      <param name="message">The message that states the error.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncRuntimeInternalErrorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncRuntimeInternalErrorException" /> class that contains a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that states the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null when no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.Synchronization.SyncSessionContext">
      <summary>Represents information about the current synchronization session. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncSessionContext.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncCallbacks)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncSessionContext" /> class by using the specified ID format schema and callback object.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="callbacks">An object that receives notification of events that occur during synchronization. Can be a null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncSessionContext.ChangeApplierInfo">
      <summary>Gets or sets data for a serialized change applier.</summary>
      <returns>The data for the serialized change applier. The default is a null.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncSessionContext.ForgottenKnowledgeRecoveryRangeLowerBound">
      <summary>Gets or sets the lower bound of the recovery range when the session is performing forgotten knowledge recovery.</summary>
      <returns>The lower bound of the recovery range when the session is performing forgotten knowledge recovery. The default is a null.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncSessionContext.ForgottenKnowledgeRecoveryRangeUpperBound">
      <summary>Gets or sets the upper bound of the recovery range when the session is performing forgotten knowledge recovery.</summary>
      <returns>The upper bound of the recovery range when the session is performing forgotten knowledge recovery. The default is a null.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncSessionContext.IsCanceled">
      <summary>Indicates whether the synchronization session has been canceled.</summary>
      <returns>true if the synchronization session has been canceled; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncSessionContext.OnProgressChanged(Microsoft.Synchronization.SyncStagedProgressEventArgs)">
      <summary>Reports synchronization progress to the application.</summary>
      <param name="e">A <see cref="T:Microsoft.Synchronization.SyncStagedProgressEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="P:Microsoft.Synchronization.SyncSessionContext.SyncSessionStatus">
      <summary>Gets an <see cref="T:System.Exception" /> object that indicates why the synchronization session failed, if a failure occurred.</summary>
      <returns>An <see cref="T:System.Exception" /> object that indicates why the synchronization session failed, or a null if the session succeeded.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.SyncSessionStatistics">
      <summary>Represents statistics about a single, unidirectional synchronization session.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncSessionStatistics.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncSessionStatistics" /> class.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.SyncSessionStatistics.ChangesApplied">
      <summary>Gets or sets the total number of changes that were successfully applied during the synchronization session.</summary>
      <returns>The total number of changes that were successfully applied during the synchronization session. </returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncSessionStatistics.ChangesFailed">
      <summary>Gets or sets the total number of changes that were not applied during a session.</summary>
      <returns>The total number of changes that were not applied during a session.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.SyncStagedProgressEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Synchronization.SyncOrchestrator.SessionProgress" /> event.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncStagedProgressEventArgs.#ctor(Microsoft.Synchronization.SyncProviderPosition,Microsoft.Synchronization.SessionProgressStage,System.UInt32,System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncStagedProgressEventArgs" /> class that contains the specified position of the provider associated with this event, the current stage of the session, the completed work value, and the total work value.</summary>
      <param name="providerPosition">The position of the provider that is associated with this event.</param>
      <param name="sessionStage">The current stage of the synchronization session.</param>
      <param name="completedWork">The amount of work that is currently completed in the session. This value is interpreted as being a part of <paramref name="totalWork" />.</param>
      <param name="totalWork">The total work for the session.</param>
    </member>
    <member name="P:Microsoft.Synchronization.SyncStagedProgressEventArgs.CompletedWork">
      <summary>Gets the amount of work that is currently completed in the session.</summary>
      <returns>The amount of work that is currently completed in the session.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncStagedProgressEventArgs.ReportingProvider">
      <summary>Gets the position of the provider that is associated with this event.</summary>
      <returns>The position of the provider that is associated with this event.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncStagedProgressEventArgs.Stage">
      <summary>Gets the current stage of the synchronization session.</summary>
      <returns>The current stage of the synchronization session.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncStagedProgressEventArgs.TotalWork">
      <summary>Gets the total work for the session.</summary>
      <returns>The total work for the session.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.SyncVersion">
      <summary>Represents a version for an item or a change unit.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.SyncVersion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncVersion" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.SyncVersion.#ctor(System.UInt32,System.UInt64)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.SyncVersion" /> class that contains the specified replica key and tick count.</summary>
      <param name="replicaKey">The key of the replica that originated this version.</param>
      <param name="tickCount">The tick count for the version.</param>
    </member>
    <member name="M:Microsoft.Synchronization.SyncVersion.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Serializes the version object data to a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to hold the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.SyncVersion.ReplicaKey">
      <summary>Gets the replica key that is associated with the version.</summary>
      <returns>The replica key that is associated with the version. </returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncVersion.TickCount">
      <summary>Gets the tick count that is associated with the version.</summary>
      <returns>The tick count that is associated with the version. </returns>
    </member>
    <member name="M:Microsoft.Synchronization.SyncVersion.ToString">
      <summary>Returns a string that represents the version.</summary>
      <returns>A string that represents the version. </returns>
    </member>
    <member name="P:Microsoft.Synchronization.SyncVersion.UnknownVersion">
      <summary>Returns a <see cref="T:Microsoft.Synchronization.SyncVersion" /> object that contains the replica key and tick count set to 0.</summary>
      <returns>A <see cref="T:Microsoft.Synchronization.SyncVersion" /> object that contains the replica key and tick count set to 0. </returns>
    </member>
    <member name="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper">
      <summary>Represents a managed object that wraps an unmanaged synchronization provider.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> class that represents the specified unmanaged provider.</summary>
      <param name="unmanagedKnowledgeSyncProvider">The unmanaged provider that is wrapped by this object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unmanagedKnowledgeSyncProvider" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unmanagedKnowledgeSyncProvider" /> is not a <see cref="T:System.Runtime.InteropServices.CoreInterop.ISyncProvider" /> object.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> object is already initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.#ctor(System.Object,Microsoft.Synchronization.IChangeDataRetrieverAdapter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> class that represents the specified unmanaged provider and uses the specified change data retriever adapter to convert between managed and unmanaged data retrievers.</summary>
      <param name="unmanagedKnowledgeSyncProvider">The unmanaged provider that is wrapped by this object.</param>
      <param name="changeDataRetrieverAdapter">An adapter that can convert the change data retriever and change data between its managed and unmanaged representations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unmanagedKnowledgeSyncProvider" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unmanagedKnowledgeSyncProvider" /> is not a <see cref="T:System.Runtime.InteropServices.CoreInterop.ISyncProvider" /> object.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> object is already initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.BeginSession(Microsoft.Synchronization.SyncProviderPosition,Microsoft.Synchronization.SyncSessionContext)">
      <summary>Notifies the unmanaged provider that it is joining a synchronization session.</summary>
      <param name="position">The position of this provider, relative to the other provider in the session.</param>
      <param name="syncSessionContext">The current status of the corresponding session.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncSessionContext" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.EndSession(Microsoft.Synchronization.SyncSessionContext)">
      <summary>Notifies the unmanaged provider that a synchronization session to which it was enlisted has finished.</summary>
      <param name="syncSessionContext">The current status of the corresponding session.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="syncSessionContext" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.GetChangeBatch(System.UInt32,Microsoft.Synchronization.SyncKnowledge,System.Object@)">
      <summary>Gets a batch of changes from the unmanaged provider.</summary>
      <returns>The batch of changes from the unmanaged provider.</returns>
      <param name="batchSize">The number of changes to include in the returned change batch.</param>
      <param name="destinationKnowledge">The knowledge of the destination replica.</param>
      <param name="changeDataRetriever">Returns an object that can be used to retrieve change data.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationKnowledge" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.GetFullEnumerationChangeBatch(System.UInt32,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.SyncKnowledge,System.Object@)">
      <summary>Gets a batch of changes from the unmanaged provider as part of a full enumeration.</summary>
      <returns>The batch of changes from the unmanaged provider.</returns>
      <param name="batchSize">The number of changes to include in the returned change batch.</param>
      <param name="lowerEnumerationBound">The closed lower bound for item IDs to enumerate. This method returns changes that have item IDs greater than or equal to this value.</param>
      <param name="knowledgeForDataRetrieval">A knowledge object that specifies items for which data is already known.</param>
      <param name="changeDataRetriever">Returns an object that can be used to retrieve change data.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> object is not initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lowerEnumerationBound" /> or <paramref name="knowledgeForDataRetrieval" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.GetSyncBatchParameters(System.UInt32@,Microsoft.Synchronization.SyncKnowledge@)">
      <summary>Gets the requested batch size and current knowledge for the scope from the unmanaged provider.</summary>
      <param name="batchSize">Returns the requested batch size.</param>
      <param name="knowledge">Returns the current knowledge for the scope, or a newly created knowledge object when no current knowledge exists.</param>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> object is not initialized.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.IdFormats">
      <summary>Gets the ID format schema of the unmanaged provider.</summary>
      <returns>The ID format schema of the unmanaged provider.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.Initialize(System.Object,Microsoft.Synchronization.IChangeDataRetrieverAdapter)">
      <summary>Initializes the wrapper so that it represents the specified unmanaged provider and uses the specified change data retriever adapter to convert between managed and unmanaged data retrievers.</summary>
      <param name="unmanagedKnowledgeSyncProvider">The unmanaged provider that is wrapped by this object.</param>
      <param name="changeDataRetrieverAdapter">An adapter that can convert the change data retriever and change data between its managed and unmanaged representations. Can be a null if no conversion is needed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unmanagedKnowledgeSyncProvider" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unmanagedKnowledgeSyncProvider" /> is not a <see cref="T:System.Runtime.InteropServices.CoreInterop.ISyncProvider" /> object.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> object is already initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.ProcessChangeBatch(Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.ChangeBatch,System.Object,Microsoft.Synchronization.SyncCallbacks,Microsoft.Synchronization.SyncSessionStatistics)">
      <summary>Passes a batch of changes to the unmanaged provider for processing.</summary>
      <param name="resolutionPolicy">The policy to use for resolving conflicts.</param>
      <param name="sourceChanges">The batch of changes from the source provider.</param>
      <param name="changeDataRetriever">An object that can be used to retrieve change data.</param>
      <param name="syncCallbacks">An object that receives event notifications during change application.</param>
      <param name="sessionStatistics">The statistics for the session.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceChanges" />, <paramref name="changeDataRetriever" />, <paramref name="syncCallbacks" />, or<paramref name=" sessionStatistics" /> is a null.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> object is already initialized.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.UnmanagedSyncProviderWrapper.ProcessFullEnumerationChangeBatch(Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.FullEnumerationChangeBatch,System.Object,Microsoft.Synchronization.SyncCallbacks,Microsoft.Synchronization.SyncSessionStatistics)">
      <summary>Passes a batch of changes to the unmanaged provider for processing during a full enumeration.</summary>
      <param name="resolutionPolicy">The policy to use for resolving conflicts.</param>
      <param name="sourceChanges">The batch of changes from the source provider.</param>
      <param name="changeDataRetriever">An object that can be used to retrieve change data.</param>
      <param name="syncCallbacks">An object that receives event notifications during change application.</param>
      <param name="sessionStatistics">The statistics for the session.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceChanges" />, <paramref name="changeDataRetriever" />, <paramref name="syncCallbacks" />, or<paramref name=" sessionStatistics" /> is a null.</exception>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:Microsoft.Synchronization.UnmanagedSyncProviderWrapper" /> object is already initialized.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.UserLoadChangeContext">
      <summary>Represents information about a change to be loaded from the item store. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.UserLoadChangeContext.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.ItemChange)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.UserLoadChangeContext" /> class that contains the specified ID format schema and item change metadata.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="itemChange">The item change for which the change data should be retrieved from the item store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="itemChange" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.UserLoadChangeContext.ItemChange">
      <summary>Gets the change item for which the change data should be retrieved from the item store.</summary>
      <returns>The change item for which the change data should be retrieved from the item store.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.UserLoadChangeContext.RecordRecoverableErrorForChangeUnit(Microsoft.Synchronization.ChangeUnitChange,Microsoft.Synchronization.RecoverableErrorData)">
      <summary>Indicates that a recoverable error occurred when data for the specified change unit was loaded from the item store.</summary>
      <param name="changeUnitChange">The change unit change that caused the error.</param>
      <param name="errorData">Additional information about the error.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="changeUnitChange" /> or <paramref name="errorData" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.UserLoadChangeContext.RecordRecoverableErrorForItem(Microsoft.Synchronization.RecoverableErrorData)">
      <summary>Indicates that a recoverable error occurred when data for this item was loaded from the item store.</summary>
      <param name="errorData">Additional information about the error.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="errorData" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.UserLoadChangeContext.RetrieveRecoverableErrorForChangeUnits">
      <summary>Gets the list of recoverable errors reported when data for change units was loaded from the item store.</summary>
      <returns>The list of recoverable errors reported when data for change units was loaded from the item store.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.UserLoadChangeContext.RetrieveRecoverableErrorForItem">
      <summary>Gets the recoverable error that was reported when data for this item was loaded from the item store.</summary>
      <returns>The recoverable error that was reported when data for this item was loaded from the item store.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.EndpointState">
      <summary>Represents the state of a FeedSync endpoint. This can be loaded from either a provider or a FeedSync feed.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.EndpointState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FeedSync.EndpointState" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.EndpointState.Combine(Microsoft.Synchronization.FeedSync.EndpointState)">
      <summary>Combines the current endpoint state with the specified endpoint state.</summary>
      <param name="endpointState">The endpoint state to combine with the current endpoint state.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpointState" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.EndpointState.LoadFrom(Microsoft.Synchronization.SyncProvider)">
      <summary>Loads the endpoint state from the specified provider. </summary>
      <param name="storeProvider">The provider that contains the endpoint state to load.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="storeProvider" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.EndpointState.LoadFrom(System.IO.Stream,Microsoft.Synchronization.FeedSync.FeedIdConverter)">
      <summary>Loads the endpoint state from the specified FeedSync feed.</summary>
      <param name="feedStream">The FeedSync stream that contains the endpoint state to load.</param>
      <param name="idConverter">The converter that is used to convert IDs in the FeedSync feed to the format expected by the provider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="feedStreem" /> or <paramref name="idConverter" /> is a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedBuilder">
      <summary>Builds a FeedSync feed during a synchronization session.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedBuilder.#ctor(Microsoft.Synchronization.FeedSync.FeedSyncServices)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FeedSync.FeedBuilder" /> class that contains the specified FeedSync services object.</summary>
      <param name="feedSyncServices">The FeedSync services object for this particular synchronization session.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="feedSyncServices" /> is null.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">
        <paramref name="feedSyncServices" /> is not intialized, does not contain feed metadata, or a <see cref="Microsoft.Synchronization.FeedSync.FeedBuilder" /> has already been created for <paramref name="feedSyncServices" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedBuilder.LogConflict(Microsoft.Synchronization.ItemChange,System.String,Microsoft.Synchronization.SyncKnowledge)">
      <summary>Saves a conflict for later conflict resolution or propagation.</summary>
      <param name="conflictingChange">The change that caused the conflict.</param>
      <param name="itemData">The item data in XML format.</param>
      <param name="knowledge">The knowledge to be learned if the conflicting change is applied. This must be logged with the conflicting change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conflictingChange" /> or <paramref name="knowledge" /> is a null.</exception>
      <exception cref="T:Microsoft.Synchronization.ItemNotInFeedMetadataException">The changed item was not in the feed metadata.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncInvalidOperationException">Metadata for <paramref name="itemData" /> was missing from the feed or a synchronization XML node was missing from <paramref name="itemData" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedBuilder.SaveFeed(System.IO.Stream)">
      <summary>Saves the feed to a stream.</summary>
      <param name="feedStream">The stream to receive the feed.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedBuilder.SaveItemChange(Microsoft.Synchronization.SaveChangeAction,Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SaveChangeContext,Microsoft.Synchronization.FeedSync.ItemDataMerger)">
      <summary>Saves an item change to the feed.</summary>
      <param name="saveChangeAction">The action to be performed for the change.</param>
      <param name="itemChange">The item change to be saved.</param>
      <param name="saveChangeContext">Context information about the change to save.</param>
      <param name="itemDataMergerDelegate">An item data merger delegate that can be called to merge changes. Can be a null if no merging is required.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="saveChangeContext" /> or <paramref name="itemChange" /> is a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedClockVector">
      <summary>Represents a clock vector that contains FeedSync information. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FeedSync.FeedClockVector" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.Add(Microsoft.Synchronization.IClockVectorElement)">
      <summary>Adds an element to the clock vector.</summary>
      <param name="item">The element to add to the clock vector.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is a null or cannot be converted to <see cref="T:Microsoft.Synchronization.FeedSync.FeedClockVectorElement" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.Clear">
      <summary>Removes all items from the clock vector.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.Contains(Microsoft.Synchronization.IClockVectorElement)">
      <summary>Determines whether the clock vector contains the specified element.</summary>
      <returns>true if <paramref name="item" /> is contained in the clock vector; otherwise, false.</returns>
      <param name="item">The element to find in the clock vector.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is a null or cannot be converted to <see cref="T:Microsoft.Synchronization.FeedSync.FeedClockVectorElement" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.CopyTo(Microsoft.Synchronization.IClockVectorElement[],System.Int32)">
      <summary>Copies the elements of the clock vector to <paramref name="array" />, starting at the index specified by <paramref name="arrayIndex" />.</summary>
      <param name="array">Clock vector elements are copied to this array.</param>
      <param name="arrayIndex">Copying starts at this index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0 or <paramref name="arrayIndex" /> plus the number of items in this <see cref="T:Microsoft.Synchronization.FeedSync.FeedClockVector" /> is larger than the length of <paramref name="array" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedClockVector.Count">
      <summary>Gets the number of elements that are contained in the clock vector.</summary>
      <returns>The number of elements that are contained in the clock vector.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.GetEnumerator">
      <summary>Returns an enumerator that iterates through the clock vector elements.</summary>
      <returns>An enumerator that iterates through the clock vector elements.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.IndexOf(Microsoft.Synchronization.IClockVectorElement)">
      <summary>Determines the index of a specific item in the clock vector element list.</summary>
      <returns>The index of <paramref name="item" /> in the clock vector element list.</returns>
      <param name="item">The element to find in the clock vector.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is a null or cannot be converted to <see cref="T:Microsoft.Synchronization.FeedSync.FeedClockVectorElement" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.Insert(System.Int32,Microsoft.Synchronization.IClockVectorElement)">
      <summary>Inserts an element into the clock vector at the specified index.</summary>
      <param name="index">The value of <paramref name="item" /> is inserted at this index.</param>
      <param name="item">The element to insert into the clock vector.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is a null or cannot be converted to <see cref="T:Microsoft.Synchronization.FeedSync.FeedClockVectorElement" />.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedClockVector.IsNoConflictsSpecified">
      <summary>Gets or sets a value that indicates whether conflicts are preserved for the FeedSync item.</summary>
      <returns>true if conflicts are not preserved for the item; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedClockVector.IsReadOnly">
      <summary>Gets a value that indicates whether the element list is read-only.</summary>
      <returns>true if the list is read only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedClockVector.Item(System.Int32)">
      <summary>Gets or sets the element in the clock vector that is indicated by the value of <paramref name="index" />.</summary>
      <returns>The element in the clock vector that is indicated by the value of <paramref name="index" />.</returns>
      <param name="index">The index of the element to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is a null or cannot be converted to <see cref="T:Microsoft.Synchronization.FeedSync.FeedClockVectorElement" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.Remove(Microsoft.Synchronization.IClockVectorElement)">
      <summary>Removes the first occurrence of a specific element from the clock vector.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the clock vector; otherwise, false. This method also returns false when <paramref name="item" /> is not found.</returns>
      <param name="item">The element to remove from the clock vector.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> is a null or cannot be converted to <see cref="T:Microsoft.Synchronization.FeedSync.FeedClockVectorElement" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index.</summary>
      <param name="index">The index of the element to remove from the clock vector.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection of clock vector elements.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the clock vector element collection.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Returns a null.</summary>
      <returns>A null.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Reconstitutes the object from its XML representation.</summary>
      <param name="reader">An XML reader stream that contains the XML representation of the object.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts this object into its XML representation.</summary>
      <param name="writer">The XML representation of the object will be written to this XML writer stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVector.ToString">
      <summary>Returns a string that represents this object.</summary>
      <returns>The string that represents this object.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedClockVector.UpdateCount">
      <summary>Gets or sets the number of updates that have been made to the FeedSync item.</summary>
      <returns>The number of updates that have been made to the FeedSync item.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedClockVectorElement">
      <summary>Represents a clock vector element that contains FeedSync information. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVectorElement.#ctor(System.UInt32,System.UInt64,System.Nullable{System.DateTime},Microsoft.Synchronization.FeedSync.FeedClockVectorElementOptions)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FeedSync.FeedClockVectorElement" /> class that contains the specified replica key, tick count, synchronization time, and option flags.</summary>
      <param name="replicaKey">The replica key for the replica that is tracked by this clock vector element.</param>
      <param name="tickCount">The tick count that defines the upper bound on the range of tick counts contained in this clock vector element.</param>
      <param name="syncTime">The synchronization time value that corresponds to the <paramref name="when" /> value for the item.</param>
      <param name="flags">Flags that specify additional information about the element.</param>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedClockVectorElement.Flags">
      <summary>Gets or sets flags that specify additional information about the clock vector element.</summary>
      <returns>Flags that specify additional information about the clock vector element.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedClockVectorElement.ReplicaKey">
      <summary>Gets or sets the replica key for the replica that is tracked by this clock vector element.</summary>
      <returns>The replica key for the replica that is tracked by this clock vector element.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedClockVectorElement.SyncTime">
      <summary>Gets or sets the synchronization time value that corresponds to the <paramref name="when" /> value for the item.</summary>
      <returns>The synchronization time value that corresponds to the <paramref name="when" /> value for the item.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVectorElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Returns a null.</summary>
      <returns>A null.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVectorElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Reconstitutes the object from its XML representation.</summary>
      <param name="reader">An XML reader stream that contains the XML representation of the object.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="reader" /> is invalid and cannot be read.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVectorElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts this object into its XML representation.</summary>
      <param name="writer">The XML representation of the object will be written to this writer stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedClockVectorElement.TickCount">
      <summary>Gets or sets the tick count that defines the upper bound on the range of tick counts that are contained in this clock vector element.</summary>
      <returns>The tick count that defines the upper bound on the range of tick counts that are contained in this clock vector element.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedClockVectorElement.ToString">
      <summary>Returns a string that represents this object.</summary>
      <returns>The string that represents this object.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedClockVectorElementOptions">
      <summary>Represents additional information about the clock vector element.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.FeedSync.FeedClockVectorElementOptions.FromFeedHistoryEntry">
      <summary>The clock vector element represents a FeedSync history value.</summary>
    </member>
    <member name="F:Microsoft.Synchronization.FeedSync.FeedClockVectorElementOptions.HasByAttribute">
      <summary>The clock vector element represents a FeedSync history value that has a <paramref name="by" /> value.</summary>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedConsumer">
      <summary>Consumes items from a FeedSync feed and imports them to a synchronization provider. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedConsumer.#ctor(Microsoft.Synchronization.KnowledgeSyncProvider,Microsoft.Synchronization.FeedSync.FeedIdConverter,Microsoft.Synchronization.FeedSync.FeedItemConverter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FeedSync.FeedConsumer" /> class that contains the specified provider, ID converter, and item converter.</summary>
      <param name="storeProvider">The provider that will import the feed items.</param>
      <param name="idConverter">A converter that translates feed IDs to the format that the provider expects. </param>
      <param name="itemConverter">A converter that translates feed items to the format that the provider expects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="storeProvider" />, <paramref name="idConverter" />, or <paramref name="itemConverter" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedConsumer.ConsumeFeed(System.IO.Stream)">
      <summary>Consumes the specified feed and imports the items into the provider that is contained in this object.</summary>
      <returns>The endpoint state of the feed. A null when the feed is empty.</returns>
      <param name="feedStream">A stream that contains the FeedSync feed to be consumed. Sync Framework must have read access to the stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="feedStream" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="feedStream" /> cannot be read or contains no feed items.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedConsumer.FeedItemConverter">
      <summary>Gets or sets the feed item converter.</summary>
      <returns>The feed item converter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedConsumer.IdConverter">
      <summary>Gets or sets the ID converter.</summary>
      <returns>The ID converter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedConsumer.StoreProvider">
      <summary>Gets or sets the synchronization provider that is importing the feed items to its store.</summary>
      <returns>The synchronization provider that is importing the feed items to its store.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedIdConverter">
      <summary>When overridden, represents an object that can translate between IDs in the FeedSync format and IDs in the provider format.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedIdConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FeedSync.FeedIdConverter" /> class. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedIdConverter.ConvertItemIdToString(Microsoft.Synchronization.SyncId)">
      <summary>When overridden in a derived class, converts an item ID to the FeedSync format. </summary>
      <returns>The item ID in the FeedSync format.</returns>
      <param name="itemId">The item ID in the provider format.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedIdConverter.ConvertReplicaIdToString(Microsoft.Synchronization.SyncId)">
      <summary>When overridden in a derived class, converts a replica ID to the FeedSync format.</summary>
      <returns>The replica ID in the FeedSync format.</returns>
      <param name="replicaId">The replica ID in the provider format.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedIdConverter.ConvertStringToItemId(System.String)">
      <summary>When overridden in a derived class, converts an item ID from the FeedSync format to the provider format.</summary>
      <returns>The item ID in the provider format.</returns>
      <param name="value">The item ID in the FeedSync format.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedIdConverter.ConvertStringToReplicaId(System.String)">
      <summary>When overridden in a derived class, converts a replica ID from the FeedSync format to the provider format. </summary>
      <returns>The replica ID in the provider format.</returns>
      <param name="value">The replica ID in the FeedSync format.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedIdConverter.GenerateAnonymousReplicaId(System.String,System.UInt32)">
      <summary>When overridden in a derived class, generates an anonymous replica ID for an item that does not contain a <paramref name="by" /> value. </summary>
      <returns>The anonymous replica ID in the provider format.</returns>
      <param name="when">The value of the <paramref name="when" /> attribute of the FeedSync item.</param>
      <param name="sequence">The value of the <paramref name="sequence" /> attribute of the FeedSync item.</param>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedIdConverter.IdFormats">
      <summary>When overridden in a derived class, gets the format schema for the IDs that can be converted.</summary>
      <returns>The format schema for the IDs that can be converted.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedItemConverter">
      <summary>When overridden, represents an object that can translate items between the FeedSync format and the provider format. </summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedItemConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FeedSync.FeedItemConverter" /> class.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedItemConverter.ConvertItemDataToXmlText(System.Object)">
      <summary>When overridden in a derived class, converts items from the provider format to an XML string in the FeedSync format.</summary>
      <returns>An XML string that contains the item data in the FeedSync format.</returns>
      <param name="itemData">The item data in the provider format.</param>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedItemConverter.ConvertXmlToItemData(System.String)">
      <summary>When overridden in a derived class, converts items from an XML string that contains the item data in the FeedSync format to the provider format.</summary>
      <returns>The item data in the provider format.</returns>
      <param name="itemXml">An XML string that contains the item data in the FeedSync format.</param>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedItemHistory">
      <summary>Represents the FeedSync item history for an item. </summary>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedItemHistory.By">
      <summary>Gets the <paramref name="by" /> value for the item history or a null when no <paramref name="by" /> value exists.</summary>
      <returns>The <paramref name="by" /> value for the item history or null when no <paramref name="by" /> value exists.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedItemHistory.Sequence">
      <summary>Gets the <paramref name="sequence" /> value for the item history entry.</summary>
      <returns>The <paramref name="sequence" /> value for the item history entry.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedItemHistory.When">
      <summary>Gets the <paramref name="when" /> value for the item history or a null when no <paramref name="when" /> value exists.</summary>
      <returns>The <paramref name="when" /> value for the item history or null when no <paramref name="when" /> value exists.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedItemMetadata">
      <summary>Represents the FeedSync item metadata for an item.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedItemMetadata.IsNoConflicts">
      <summary>Gets the <paramref name="noconflicts" /> value of the item.</summary>
      <returns>true if conflict preservation should not be performed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedItemMetadata.IsTombstone">
      <summary>Gets a value that indicates whether the item is a tombstone. </summary>
      <returns>true if the item is a tombstone; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedItemMetadata.ItemConflictCollection">
      <summary>Gets the item conflict collection.</summary>
      <returns>The item conflict collection.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedItemMetadata.ItemData">
      <summary>Gets the item data formatted as XML text.</summary>
      <returns>The item data formatted as XML text.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedItemMetadata.ItemHistoryCollection">
      <summary>Gets the item history collection.</summary>
      <returns>The item history collection.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedItemMetadata.ItemId">
      <summary>Gets the item ID.</summary>
      <returns>The item ID.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedItemMetadata.UpdateCount">
      <summary>Gets the number of updates that have been made to the item so far.</summary>
      <returns>The number of updates that have been made to the item so far.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedMetadata">
      <summary>Contains the metadata for the FeedSync feed.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedMetadata.ItemMetadataCollection">
      <summary>Gets the item metadata collection. </summary>
      <returns>The item metadata collection.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedMetadata.SharingInformation">
      <summary>Gets the FeedSync sharing information for the feed or a null when no sharing information exists.</summary>
      <returns>The FeedSync sharing information for the feed or a null when no sharing information exists.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedProducer">
      <summary>Produces FeedSync feeds that are based on data from a synchronization provider.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedProducer.#ctor(Microsoft.Synchronization.KnowledgeSyncProvider,Microsoft.Synchronization.FeedSync.FeedIdConverter,Microsoft.Synchronization.FeedSync.FeedItemConverter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FeedSync.FeedProducer" /> class that contains the specified synchronization provider, ID converter, and item converter.</summary>
      <param name="storeProvider">The provider that exports the data to produce as a FeedSync feed.</param>
      <param name="idConverter">A converter that is used to translate IDs from the provider format to the FeedSync format.</param>
      <param name="itemConverter">A converter that is used to translate items from the provider format to the FeedSync format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="storeProvider" />, <paramref name="idConverter" />, or <paramref name="itemConverter" /> is a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedProducer.IdConverter">
      <summary>Gets or sets the ID converter.</summary>
      <returns>The ID converter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is assigned to a null.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedProducer.IncrementalFeedBaseline">
      <summary>Gets or sets the endpoint state that is used as a baseline for producing an incremental feed.</summary>
      <returns>The endpoint state that is used as a baseline for producing an incremental feed.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedProducer.ItemConverter">
      <summary>Gets or sets the item converter.</summary>
      <returns>The item converter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is assigned to a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedProducer.ProduceFeed(System.IO.Stream)">
      <summary>Produces a FeedSync feed to the specified stream. The feed contains items that are supplied by the associated synchronization provider.</summary>
      <param name="feedStream">The stream that will receive the FeedSync feed. This stream must initially contain an empty RSS or Atom feed. Sync Framework must have read and write access to the stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="feedStream" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="feedStream" /> cannot be read from, cannot be written to, or contains no feed items.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedProducer.StoreProvider">
      <summary>Gets or sets the provider that exports item data that is used to produce the feed.</summary>
      <returns>The provider that exports item data that is used to produce the feed.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is assigned to a null.</exception>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedSharingInformation">
      <summary>Represents the FeedSync sharing metadata for the feed.</summary>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedSharingInformation.Expires">
      <summary>Gets the <paramref name="expires" /> value for the FeedSync sharing information or a null when no <paramref name="expires" /> value exists.</summary>
      <returns>The <paramref name="expires" /> value for the FeedSync sharing information or a null when no <paramref name="expires" /> value exists.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedSharingInformation.Since">
      <summary>Gets the <paramref name="since" /> value for the FeedSync sharing information or a null when no <paramref name="since" /> value exists. </summary>
      <returns>The <paramref name="since" /> value for the FeedSync sharing information or a null when no <paramref name="since" /> value exists.</returns>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedSharingInformation.Until">
      <summary>Gets the <paramref name="until" /> value for the FeedSync sharing information or a null when no <paramref name="until" /> value exists. </summary>
      <returns>The <paramref name="until" /> value for the FeedSync sharing information or a null when no <paramref name="until" /> value exists.</returns>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.FeedSyncServices">
      <summary>Represents services that translate data between the FeedSync XML format to the Sync Framework object format.</summary>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncId)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FeedSync.FeedSyncServices" /> class that contains the specified ID format schema and replica ID.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="localEndpointId">The replica ID that is associated with the FeedSync feed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="localEndpointId" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="idFormats" /> or <paramref name="localEndpointId" /> are fixed length.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="idFormats" /> contains invalid parameters,<paramref name="idFormats" />'s replica ID or item ID do not form valid parameter pairs or are not variable length,—or— <paramref name="idFormats" />'s replica ID is not a valid ID.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.#ctor(Microsoft.Synchronization.SyncIdFormatGroup,Microsoft.Synchronization.SyncId,Microsoft.Synchronization.FeedSync.FeedIdConverter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Synchronization.FeedSync.FeedSyncServices" /> class that contains the specified ID format schema, replica ID, and ID converter.</summary>
      <param name="idFormats">The ID format schema of the provider.</param>
      <param name="localEndpointId">The replica ID that is associated with the FeedSync feed.</param>
      <param name="idConverter">A converter to translate IDs between the FeedSync XML format and the provider format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="idFormats" /> or <paramref name="localEndpointId" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="idFormats" /> or <paramref name="localEndpointId" /> are fixed length.</exception>
      <exception cref="T:Microsoft.Synchronization.SyncIdFormatMismatchException">
        <paramref name="idFormats" /> contains invalid parameters,<paramref name="idFormats" />'s replica ID or item ID do not form valid parameter pairs or are not variable length,—or— <paramref name="idFormats" />'s replica ID is not a valid ID.</exception>
    </member>
    <member name="P:Microsoft.Synchronization.FeedSync.FeedSyncServices.FeedMetadata">
      <summary>Gets the metadata for the FeedSync feed.</summary>
      <returns>The metadata for the FeedSync feed.</returns>
      <exception cref="T:System.InvalidOperationException">A FeedSync feed was not previously loaded with <see cref="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.LoadFeed(System.IO.Stream)" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.GetChangeBatch(System.UInt32,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.FilterInfo,Microsoft.Synchronization.FeedSync.ItemMetadataFilter,System.Object@)">
      <summary>Gets a change batch from the loaded FeedSync feed. The change batch contains item metadata for items that are not contained in the specified knowledge from the destination provider.</summary>
      <returns>A change batch that contains item metadata for items that are not contained in the specified knowledge from the destination provider.</returns>
      <param name="batchSize">The size of the batch to be created.</param>
      <param name="destinationKnowledge">The knowledge from the destination provider.</param>
      <param name="filterInfo">Filter information that is used to control which items are included in the change batch. Can be a null.</param>
      <param name="itemMetadataFilterDelegate">A delegate that is used to dynamically filter items added to the change batch. Can be a null.</param>
      <param name="changeDataRetriever">Returns an object that can be used by the destination provider to retrieve item data from the source provider. The object can be an <see cref="T:Microsoft.Synchronization.IChangeDataRetriever" /> object or a provider-specific object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationKnowledge" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="batchSize" /> is 0.</exception>
      <exception cref="T:System.InvalidOperationException">Feed metadata was not previously loaded by calling <see cref="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.LoadFeed(System.IO.Stream)" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.GetKnowledge">
      <summary>Computes the current knowledge of the replica by using the loaded FeedSync feed and returns that knowledge.</summary>
      <returns>The current knowledge that is computed by using the loaded FeedSync feed.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.GetNextTickCount">
      <summary>Gets the current tick count from <see cref="T:Microsoft.Synchronization.SyncKnowledge" /> that is computed by using the loaded FeedSync feed, advances the tick count, and updates the tick count in the knowledge.</summary>
      <returns>The updated tick count.</returns>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.LoadChangeData(Microsoft.Synchronization.LoadChangeContext)">
      <summary>Gets item data from the loaded FeedSync feed. The item data is represented as XML text.</summary>
      <returns>Item data from the loaded FeedSync feed. The item data is represented as XML text.</returns>
      <param name="loadChangeContext">Contextual information that represents the item to retrieve from the FeedSync feed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loadChangeContext" /> is a null.</exception>
      <exception cref="T:System.InvalidOperationException">Feed metadata was not previously loaded by calling <see cref="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.LoadFeed(System.IO.Stream)" />.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.LoadFeed(System.IO.Stream)">
      <summary>Loads a FeedSync feed from a stream.</summary>
      <param name="feedStream">A stream that contains the FeedSync feed to load.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="feedStream" /> is a null.</exception>
    </member>
    <member name="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.ProcessChangeBatch(Microsoft.Synchronization.ConflictResolutionPolicy,Microsoft.Synchronization.ChangeBatch,System.Object,Microsoft.Synchronization.INotifyingChangeApplierTarget,Microsoft.Synchronization.SyncSessionContext,Microsoft.Synchronization.SyncCallbacks)">
      <summary>Processes a batch of changes that are specified by the source provider by handling conflicts and applying changes to the loaded FeedSync feed.</summary>
      <param name="conflictResolutionPolicy">The policy that is used to resolve conflicts.</param>
      <param name="sourceChanges">The batch of changes from the source provider.</param>
      <param name="changeDataRetriever">An object that can be used by the destination provider to retrieve item data from the source provider. The object can be an <see cref="T:Microsoft.Synchronization.IChangeDataRetriever" /> object or a provider-specific object.</param>
      <param name="changeApplierTarget">An object that handles calls from the change applier object during change application.</param>
      <param name="syncSessionContext">Information about the synchronization session.</param>
      <param name="syncCallback">An object that receives event notifications during change processing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceChanges" />, <paramref name="changeDataRetriever" />, <paramref name="changeApplierTarget" />, or<paramref name=" syncSessionContext" /> is a null.  </exception>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.ItemDataMerger">
      <summary>Represents the method that will handle the merging of data for a merge change to be saved by <see cref="M:Microsoft.Synchronization.FeedSync.FeedBuilder.SaveItemChange(Microsoft.Synchronization.SaveChangeAction,Microsoft.Synchronization.ItemChange,Microsoft.Synchronization.SaveChangeContext,Microsoft.Synchronization.FeedSync.ItemDataMerger)" />.</summary>
      <param name="sourceItemData">XML text that contains the item data from the source replica.</param>
      <param name="destinationItemData">XML text that contains the item data from the destination replica.</param>
    </member>
    <member name="T:Microsoft.Synchronization.FeedSync.ItemMetadataFilter">
      <summary>Represents the method that will filter items to be included in a change batch. This delegate is used by <see cref="M:Microsoft.Synchronization.FeedSync.FeedSyncServices.GetChangeBatch(System.UInt32,Microsoft.Synchronization.SyncKnowledge,Microsoft.Synchronization.FilterInfo,Microsoft.Synchronization.FeedSync.ItemMetadataFilter,System.Object@)" />.</summary>
      <param name="itemId">The ID of the item.</param>
      <param name="creationVersion">The creation version of the item.</param>
      <param name="changeVersion">The change version of the item.</param>
    </member>
  </members>
</doc>