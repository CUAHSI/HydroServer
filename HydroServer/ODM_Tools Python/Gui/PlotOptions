

class plotData (object):
  def __init__(self, sID, dValues, dTimes,  ylabel, title, color ):
    self.SeriesID= sID
    self.DataValues = dValues
    self.DateTimes=dTimes

    self.startDate= min(dTimes)
    self.endDate=max(dTimes)
    self.ylabel = ylabel
    self.title = title
    self.color = color

class axisData (object):
  def __init__(self, axisid, axis,  position, side="", rightadjust="", leftadjust="", minx="", maxx=""):
    self.axisid= axisid
    self.axis = axis
    self.rightadjust= rightadjust
    self.leftadjust = leftadjust
    self.position = position
    self.side = side
    self.minx= minx
    self.maxx= maxx

  def __repr__(self):
    return "<AxisData(id:'%s', axis:'%s', pos:'%s', side:'%s', radj:'%s', ladj:'%s')>" % (self.axisid, self.axis, self.position, self.side, self.rightadjust, self.leftadjust)

class PlotOptions(object):
    def enum( **enums):
        return type('Enum', (), enums)
    TimeSeriesType= enum('Both'=3, 'Line'=2, 'Point'=1, 'None'=0)
    BoxWhiskerType = enum('Monthly'=0, 'Seasonal'= 2, 'Yearly'=3, 'Overall'=4)

    timeSeriesMethod =TimeSeriesType.Both
    numBins = 25
    binWidth=1.5
    xMax
    xMin
    yMax
    yMin
    xMajor
    boxWhiskerMethod = BosWhiskerType.Monthly
    isPlotCensored = True
    colorList = []
    showLegend =True
    useCensoredData = False
    displayFullDate=True
    _startDateTime
    def setStartDate(self, datetime):
        _startDateTime = datetime
    def getStartDate(self):
        return _startDateTime    
    _endDateTime
    def setEndDate(self, datetime):
        _endDateTime = datetime
    def getEndDate(self):
        return _endDateTime

    _startDateLimit
    def setStartDateLimit(self, datelimit):
        _startDateLimit = datelimit
    def getStartDateLimit(self):
        return _startDateLimit   
    _endDateLimit
    def setEndDate(self, datelimit):
        _endDateL = datelimit
    def getEndDate(self):
        return _endDateLimit

    def setColorCollections(self):
        colorlist = ('b', 'g', 'r', 'c', 'm', 'y')
    

class OneSeriesPlotInfo(object):
    data_table # link to sql database
    cursor
    site_name=""
    variable_name=""
    data_type=""
    variable_units=""
    plot_options=""
    series_id=0
    line_color = "Black"
    point_color =line_color# will currently be the same as the line color
    statistics= Statistics()

    def __init__ (self, prnt):
        self.parent=prnt

    def getPlotOptions(self):
        return plot_options

class SeriesPlotInfo(object):
    _site_display_column = ""
    _plot_options #= PlotOptions()
    _series_infos #dictionary(integer(seriesID)/OneSeriesPlotInfo)
    isColorsChanged= False

    def __init__(self, siteDisplayColumn, plotOptions):
        _site_display_column = siteDisplayColumn
        _plot_options= plotOptions

    def Update(self, e):
        if not e.ischecked :
            del _series_infos[e.series_id]
        else
            _series_infos[e.series_id]=""

    def Update(self):            
        for key, value in enumerate(_series_infos):
            _series_infos[key]=""

    def GetSeriesIDs():
        return _series_infos.items()

    def GetSeriesInfo():
        lst= []





